<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>欢迎来到匡盟盟的博客！</title>
  
  <subtitle>Colyn 崛起正当时！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://meng.uno/"/>
  <updated>2018-02-11T14:04:49.151Z</updated>
  <id>http://meng.uno/</id>
  
  <author>
    <name>匡盟盟</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux Test Project</title>
    <link href="http://meng.uno/posts/bfb74f68/"/>
    <id>http://meng.uno/posts/bfb74f68/</id>
    <published>2018-02-11T13:29:33.000Z</published>
    <updated>2018-02-11T14:04:49.151Z</updated>
    
    <content type="html"><![CDATA[<p>I found this project from the references of other papers, and I thought it was good, so I plan to run it. As we can see from its name, Linux Test Project (LTP) has a goal to deliver test suites to the open source community that validate the reliability,  robustness, and stability of Linux. This project wants to support Linux development by making unit testing more complete and minimizing user impact by building a barrier to keep bugs from making it to the user. There are two important testing techniques  which are supported by giving developers an ever growing set of tools to help identify any operational problems in their code: Design and Code Inspections. I knew that Yggdrasil and Hyperkernel which I have run successfully belong to the last category.  LTP doesn’t have a benchmark which means they don’t compare different kernel of Linux.</p><p>In LTP, we need to know:</p><ul>  <li>Test case: A single action and verification which has a result PASS/FAIL.</li>  <li>Test suite: Containing one or more test cases.</li>  <li>Test tags: Pairing a unique identifier with a test program and a set of command line options.</li></ul><p>We also need to know the ways of reporting the results of a test case. There are two main ways which are contained in LTP:</p><ul>  <li>Exit status: If a test program encounters unexpected or incorrect results, exit the test program with a non-zero exit status, i.e. exit(1). Conversely, if a program completes as expected, return a zero exit status, i.e. exit(0).</li>  <li>Standard output: Tools can be used to analyze the results, if they are written in a standard way.</li></ul><h2 id="build-and-run"><a class="header-anchor" href="#build-and-run">🌊</a>Build and Run</h2><p>To build this project, we need to run the following executions:</p><figure class="highlight stylus">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>      </td>      <td class="code">        <pre><span class="line">$ git clone https:<span class="comment">//github.com/linux-test-project/ltp.git</span></span><br><span class="line">$ cd ltp</span><br><span class="line">$ make autotools</span><br><span class="line">$ ./configure</span><br><span class="line">$ make</span><br><span class="line">$ make install</span><br></pre>      </td>    </tr>  </table></figure><p>Before these, we need to ensure “git, autoconf, automake, m4” are installed. If not, we can use “apt-get” to get them. The output of “make” is shown as following.</p><p><img src="http://www.meng.uno/images/ltp/1.png" alt="LTP"></p><p>After building this project, let’s run it personally. If we want to run all the test suites, we just need run “./runltp” in the “opt/ltp/” directory. However, I will run a single test suite to verify this project only with “./runltp -f syscalls” execution.</p><p><img src="http://www.meng.uno/images/ltp/2.png" alt="LTP"></p><p>The picture above is the output of “abort01” test case. From it we can see that the test method is “Exit status test” and it passes all the situations.</p><p>If a test case needs datafiles to work, these would be put in a subdirectory named datafilesand installed in the testcases/data/$TCID directory</p><h2 id="analyze-test-cases"><a class="header-anchor" href="#analyze-test-cases">🌊</a>Analyze Test Cases</h2><p>We could find LTP in “/opt/ltp” and the test suites are installed in the “/opt/ltp/runtest/” directory. The following picture is a screenshot of it.</p><p><img src="http://www.meng.uno/images/ltp/3.png" alt="LTP"></p><p>In a single file, such as “syscalls” file, there exist many single test cases which are like the follows.</p><p><img src="http://www.meng.uno/images/ltp/4.png" alt="LTP"></p><p>From this picture, those words, like “abort01”, represent different test cases which are laid in “/opt/ltp/testcases/bin/” directory.</p><p><img src="http://www.meng.uno/images/ltp/5.png" alt="LTP"></p><p>Each test case is a binary written either in portable Shell or C such as “abort01” which is from “abort01.c” which lays in the “ltp/testcases/kernel/syscalls/abort” directory. The test gets a configuration via environment variables and/or command line  parameters, it prints additional information into the stdout and reports overall success/failure via the exit value.</p><p><img src="http://www.meng.uno/images/ltp/6.png" alt="LTP"></p><h2 id="write-a-test-suite"><a class="header-anchor" href="#write-a-test-suite">🌊</a>Write A Test Suite</h2><p>To make things simple, I will use LTP standard interface, not add custom reporting functions and use LTP build system. The following are my steps (These steps are very simple, so I didn’t list any screenshot):</p><ul>  <li>Add a new file “meng” to “ltp/runtest/” directory;</li>  <li>Write some test cases’ names, such as “abort01 accept01”;</li>  <li>Run “make” and “make install”;</li>  <li>Enter “/opt/ltp/” directory;</li>  <li>Run “./runltp -f meng”;</li>  <li>Get the result as the picture. (You can also find the full logs from “meng_output.txt” file in the attachment)</li></ul><p><img src="http://www.meng.uno/images/ltp/7.png" alt="LTP"></p><h2 id="write-a-test-case"><a class="header-anchor" href="#write-a-test-case">🌊</a>Write A Test Case</h2><p>As I said before, we can use C language or Shell to write a test case, however, in this section, I will just use C language to write a simple one which may make me have a deep understanding of this project.</p><p><strong>I used the “man-pages” to find the untested system calls, however, my linux version maybe a little old (2015 release, version 16.04), so that I can’t find a untested one which is excluded by the newest LTP.</strong></p><p>I will write a test for verifying system call “file rename”. First, I create a new file “meng.c” in the “ltp/testcases/kernel/syscalls/meng/” directory. Then I need to write the codes. The next thing I need to do is to include “tst_test.h” (There are  also another headers, however, this one is basic). We need to write “main(), setup(), clean()” functions and the detailed realizations are in the “meng.c” which is in the attachment (I give some notes of the code in the “meng.c” file as well). What’s  more, we need to create a “Makefile” in the same directory and write the compiling information. The compiled file is like this.</p><p><img src="http://www.meng.uno/images/ltp/8.png" alt="LTP"></p><p>Last, I will add this test case to the “meng” test suite and see the result (You can find the full output in “meng_syscall_output.txt” in the attachment).</p><p><img src="http://www.meng.uno/images/ltp/9.png" alt="LTP"></p><p>From the above picture, we can see that the verification is “pass” which means that not only the “rename” system call is correct, but also my code is right.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I found this project from the references of other papers, and I thought it was good, so I plan to run it. As we can see from its name, Li
      
    
    </summary>
    
      <category term="Linux" scheme="http://meng.uno/categories/Linux/"/>
    
      <category term="Linux Test" scheme="http://meng.uno/categories/Linux/Linux-Test/"/>
    
    
      <category term="Linux" scheme="http://meng.uno/tags/Linux/"/>
    
      <category term="Linux Test" scheme="http://meng.uno/tags/Linux-Test/"/>
    
  </entry>
  
  <entry>
    <title>A Melody Composer for both Tonal and Non-Tonal Languages</title>
    <link href="http://meng.uno/posts/2251dcee/"/>
    <id>http://meng.uno/posts/2251dcee/</id>
    <published>2018-02-11T04:03:24.000Z</published>
    <updated>2018-02-11T04:39:53.403Z</updated>
    
    <content type="html"><![CDATA[<h1>Summary</h1><h2 id="abstract"><a class="header-anchor" href="#abstract">🌊</a>Abstract</h2><p>This paper contains some improvements on an algorithmic melody composer called “T-music”. “T-music” is an algorithm which can compose a melody for users’ input lyrics by mining the relationship between the melodies and lyrics. These relationships are  known as frequent patterns (FPS) . The ameliorations are two ways to enhance the methods of mining frequent patterns form instrumental compositions and an optimal way of using FPS mined from songs in one language to compose a melody for the input things  in another language.</p><h2 id="propse"><a class="header-anchor" href="#propse">🌊</a>Propse</h2><p>The propose is to get an algorithm which take lyrics as input and a good melody as outcome in order to help those people who have little music background to compose songs. In view of the fact that there is already a pretty well method, T-music, the authors’  tasks are making some improvements on the basis of the original algorithm.</p><h2 id="deficiencies-of-original-algorithm"><a class="header-anchor" href="#deficiencies-of-original-algorithm">🌊</a>Deficiencies of original algorithm</h2><p>At the first place, I need to borrow a figure from the paper as follows to express my understanding of the original T-music method.</p><p><img src="http://www.meng.uno/images/t-music-arch.png" alt="t-musuc"></p><p>As the picture shows that the system architecture of T-music can be divided as two phases which are “Frequent Pattern Mining” and “Melody Composition”. I will report this method following the flow of the algorithm.</p><ul>  <li>    <p>Mining the FPS from “Song Database” and storing them in the “Frequent Pattern Database”:</p>    <ul>      <li>Obtaining tone sequences from “Song Database” by reading the “Language Dictionary”;</li>      <li>Generating s-sequence from a melody, a pitch sequence and a duration sequence;</li>      <li>Mining the FPS from s-sequence;</li>      <li>Storing the FPS to “Frequent Pattern Database”.</li>    </ul>  </li>  <li>    <p>Composing a melody for the “Lyrics” based on FPS in the “Frequent Pattern Database”:</p>    <ul>      <li>Obtaining the tone sequence of the lyrics by reading the “Language Dictionary”;</li>      <li>Adding some “Music Parameters” such as some music rules;</li>      <li>Generating “Melody” by the process “Melody Composition” using FPS.</li>    </ul>  </li></ul><p>There are some deficiencies of the original T-music algorithm as follows. It can only mine FPS from songs in which lyrics must be present. What’s more, the original one can’t use the FPS mined from a language to compose melody in another language. However,  we can’t always get the ideal songs data which have lyrics embedded easily. What we can get from the Internet are those instrumental compositions in which lyrics are absent. Also, we want to achieve that composing melody in a language with the FPS mined  from another language which can make the algorithm more efficient.</p><h2 id="improvements"><a class="header-anchor" href="#improvements">🌊</a>Improvements</h2><p>What the authors have done provided two ways to mine Frequent Patterns from instrumental compositions and an optimal mapping method for composing a melody using FPS in different language with the input lyrics.</p><p>The first way is “Method emphasizing the original FPS”. I will use the following picture to express my comprehension. Firstly, mining the FPS from songs and storing them in “FP database (General)”. Secondly, mining the frequent pitch trends from “Instrumental  compositions with style database” and storing them in “Frequent pitch trends (Style)” and then using it as a selector to select those FPS storing the matches in “FP database (Style)”.</p><p><img src="http://www.meng.uno/images/t-music-database.png" alt="t-musuc"></p><p>The second way is “Method emphasizing the newly mined frequent pitch trends”. I will also introduce it using the screenshot from the paper. The FPS based on those of the first way was subdivided. The frequent pitch trends are mined as usually. The most  difference is that one pitch trend may match a set of several tone trends.</p><p><img src="http://www.meng.uno/images/t-music-database2.png" alt="t-musuc"></p><p>The optimal mapping method is shown as follows. Firstly, using the same method gets a “FP database” in one language. Then, generating several tone sequences for each tone trend in this “FP database”. There are some lemmas proofed on the paper to decide  the specific number of the mapping.</p><h1>Improvements</h1><p>In this section, I will analysis some excellent algorithms, important thoughts or some key points. Some of them may look small or nothing special, but each has its function.</p><h2 id="using-the-trend-representation"><a class="header-anchor" href="#using-the-trend-representation">🌊</a>Using the “Trend” representation</h2><p>If I were doing this job, I could have chosen the simple “absolute” representation, just because this is the most intuitive frequent pattern we can get from songs. After careful consideration, just as the author explains that same melodies which start  at different pitches may sound similar to us. Then, I understand that it is a big wisdom to use the “trend” representation which uses a FP to extract the general rules of a set of FPS with different pitches, simplifying a large number of calculations  and making the result more obvious.</p><h2 id="using-frequent-pitch-trends-style-as-a-selector"><a class="header-anchor" href="#using-frequent-pitch-trends-style-as-a-selector">🌊</a>Using “Frequent pitch trends (Style)” as a selector</h2><p>Though we know that “T-music” uses “the FPS between the tone port and the pitch part” and agree the mining method used on mining the frequent pattern which contains a tone trend and a pitch trend, there must be some correlation between “Tone trend” and  “Pitch trend”. Since the instrumental compositions don’t contain lyrics, we couldn’t mine a whole frequent pattern from them. However, we can also mine part of the frequent pattern from them which is “Pitch trend”. For we have so much instrumental compositions  which means we can get enough “Pitch trend” and we already know the correlation between “Tone trend” and “Pitch trend”, we can estimate the frequency of the original frequent pattern and eliminate part of them which have a zero frequency.</p><h2 id="using-the-subsequences-of-original-frequent-pattern"><a class="header-anchor" href="#using-the-subsequences-of-original-frequent-pattern">🌊</a>Using the subsequences of original frequent pattern</h2><p>According to the Apriori property that all nonempty subsets of frequent item set must also be frequent, the authors artfully break the original FPS into smaller form and then making them combine more FPS which can be selected from the original FP database.  By doing this, we can get more frequent patterns from the identical data which means our mining algorithm is more efficient.</p><h2 id="using-multi-map-as-a-data-structure"><a class="header-anchor" href="#using-multi-map-as-a-data-structure">🌊</a>Using multi-map as a data structure</h2><p>This data structure allows the task of retrieving a value by a key quickly and returns more than one frequent pattern with a support. From it, we can get a tuple in top-k tuples with some selection strategies and ensure that a pattern with a very large  support isn’t always selected because it doesn’t mean that it is always the best choice.</p><h2 id="employing-the-divide-and-conquer-idea"><a class="header-anchor" href="#employing-the-divide-and-conquer-idea">🌊</a>Employing the divide and conquer idea</h2><p>Considering to compose a melody of a very long lyric, we may need to divide the original tone trend into several shorter tone trends, apply the same procedure on them and then return the concatenation of the results of the sub-problems. It is a simple  idea of solving such problem, but we can’t resist its correctness and effectiveness.</p><h1>Limitations</h1><p>I just list some areas that I think need improvements or I think it can be added slightly on the basis of the original research.</p><h2 id="applying-word-segmentation"><a class="header-anchor" href="#applying-word-segmentation">🌊</a>Applying word segmentation</h2><p>Though the paper has mentioned the use of word segmentation, there is just a word and no detailed explanation. I think I should express my own idea here. Firstly, the word segmentation here isn’t the same of those applied in the fields of natural language  processing (NLP). As we all known, the latter has so many strict norms to follow, however, in the lyrics, the norms aren’t very same. Why we do this in the input lyrics is because we want to determine the length of durations between every two words,  which is different from the propose in the NLP which just wants to add pause at the same length of time between words and words.</p><h2 id="handling-the-tone-trend-with-a-length-of-1"><a class="header-anchor" href="#handling-the-tone-trend-with-a-length-of-1">🌊</a>Handling the tone trend with a length of 1</h2><p>In this paper, the authors just simply set the pitch trend to be the input tone trend where, I think, may need improvement. Firstly, we all know that “the tone trend with a length of 1” couldn’t appear individually. It is usually because we matched the  tone sequences before it or after it. I think if we consider dividing the original sequence into overlapping parts using the similar idea of divide and conquer idea, the question may disappear.</p><h2 id="mining-the-relationship-between-tone-trend-and-pitch-trend"><a class="header-anchor" href="#mining-the-relationship-between-tone-trend-and-pitch-trend">🌊</a>Mining the relationship between “tone trend” and “pitch trend”</h2><p>The authors just determine the relationship based on statistics in whether the original T-music method or the improved edition, store the regulars on a multi-map and when using the frequent pattern, the method just randomly selects a tuple from top-k  tuples from the multi-map. Therefore, no matter which one we choose, it is just the original sequence in the FP-database. If there is a very large database which contains a large number of every frequent pattern, it may have a remarkable effect without  complex computations. However, we can’t ensure it or we just want to improve our algorithm with little support of so many records. Let’s look at the following samples which has the form as same as those in the multi-map and assume that the same tone  trend only has the three tuples.</p><figure class="highlight stylus">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&lt;<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&gt; —&gt; (&lt;<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,-<span class="number">1</span>,-<span class="number">2</span>&gt;, <span class="number">10</span>)</span><br><span class="line">&lt;<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&gt; —&gt; (&lt;<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,-<span class="number">2</span>,-<span class="number">1</span>&gt;, <span class="number">9</span>) </span><br><span class="line">&lt;<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&gt; —&gt; (&lt;<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>,-<span class="number">2</span>,-<span class="number">1</span>&gt;, <span class="number">5</span>)</span><br></pre>      </td>    </tr>  </table></figure><p>As we can see, they have the same tone trend and different pitch trends with different values of a support. If we just use the method described in the paper, we may get the result of the 1st, the 2nd, or the 3rd. However, is it the best one? Maybe not,  I think. I mean maybe <code>&lt;1,1,2,0,-2,-1&gt;</code> is better. I think we need to add some correlation analyses to the pitch trends which have the same tone trends.</p><h1>Expanding Research</h1><p>After reading this paper, I have some ideas for further research and some of them are listed as follows.</p><h2 id="adding-location-variables"><a class="header-anchor" href="#adding-location-variables">🌊</a>Adding location variables</h2><p>I mean, as we all known, a same lyric may have different melodies when it is at the beginning or at the end of a song. Of course, if we just want to use a simple sentence as its input, this consideration is rather superfluous. However, if the input lyric  is long enough, it is very important then.</p><h2 id="generating-a-melody-with-a-longer-note"><a class="header-anchor" href="#generating-a-melody-with-a-longer-note">🌊</a>Generating a melody with a longer note</h2><p>This thought is mentioned in the end of the paper as well. We may have noticed that the normal notes will be longer than the syllables of lyrics, at least at the end of each sentence. We may need to modify the match method to add the frequent pattern  which contains group of pitch trends sequences and its corresponding longer tone trends sequences.</p><h2 id="applying-syntactic-analysis"><a class="header-anchor" href="#applying-syntactic-analysis">🌊</a>Applying syntactic analysis</h2><p>The following is my exploratory opinion of the original T-music. If I have many songs with lyrics, I will mine the frequent patterns of syntactic analysis and add them to the “s-sequence” mentioned in this paper. Thus I will reform the original multi-map  as follows.</p><figure class="highlight stylus">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br></pre>      </td>      <td class="code">        <pre><span class="line">(&lt;pitch trend pattern&gt;, &lt;syntax pattern&gt;) —&gt; (&lt;tone trend pattern&gt;, support)</span><br></pre>      </td>    </tr>  </table></figure><p>When we match the input lyrics, we need to not only match the “pitch trend pattern” from the FP-database but also contrast the “syntax pattern” and then make the best decision.</p><h2 id="expanding-to-speech-recognization"><a class="header-anchor" href="#expanding-to-speech-recognization">🌊</a>Expanding to speech recognization</h2><p>I have a simple idea of speech recognization using the same method mentioned in this paper. If I could collect enough voice information spoken by the same person, I would mine the frequent patterns of his intonation habit from the voice data and then  using them to judge whether another voice is his or not.</p><h2 id="expanding-to-password-security"><a class="header-anchor" href="#expanding-to-password-security">🌊</a>Expanding to password security</h2><p>In order to prevent the password being stolen, all websites are making efforts on password diversity. I think the method of mining frequent pattern can be applied to protect users’ password as well. For the same string of ciphers, different people may  type it out in different speeds with different intermission on every two letters. I, for example, usually use the combination of my name and birthday as a password and when I type it out there is a longer break between the last letter of my name and  the first number of my birthday. If we use the same way to mine the frequent patterns form enough times records of someone, we may use the frequent patterns to judge whether it is the right person or not who is typing the password.</p><h2 id="generating-good-problems"><a class="header-anchor" href="#generating-good-problems">🌊</a>Generating “good problems”</h2><p>I often encounter some tricky programming problems and as we all known, “StackOverflow” is the biggest website which can offer you relevant solutions when you ask a question on it. However, we all want to get the best answer as soon as possible so we  may need to put forward “good questions”. I think the thought of this paper can be applied to this question. We can first collect enough “good questions” from the website and then mine the syntactic frequent patterns of each question by categories.  Finally, we can generate such “good questions” by adding the knowledge of sentence construction and providing some keywords needed.</p><h1>Related Research</h1><p>This paper is about mining frequent patterns which is a subfield of data mining. I will express my understanding mixing information retrieved from the Internet in this field.</p><p>With the rise of big data, so many research topics about data is more and more frequent such as forecasting passenger flow and passenger flow directions during the Spring Festival and predicting the composition of Chinese college entrance examination  this year. Data mining means the process of extracting valuable information and patterns from large amounts of data and these new discovery rules, patterns, information and concepts have potential value. It usually contains the association rules, classification,  estimation, clustering and so on.</p><p>As for association analysis, its propose is to discover interesting links hidden in large data sets and the patterns discovered are usually represented in association rules or frequent item sets just as this paper shown. There are several efficient and  scalable frequent item set mining methods such as Apriori algorithm and FP-growth which needs to construct FP-tree.</p><p>As for classification and prediction, I think it is a more stirring area. Think of this, a marketing manager needs data analysis to help guess whether or not a customer with a given profile will buy a new computer and then the marketing manager would  like to predict how much a given customer will spend during a sale, what an attractive job!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;Summary&lt;/h1&gt;
&lt;h2 id=&quot;abstract&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#abstract&quot;&gt;🌊&lt;/a&gt;Abstract&lt;/h2&gt;
&lt;p&gt;This paper contains some improvements on
      
    
    </summary>
    
      <category term="Paper Report" scheme="http://meng.uno/categories/Paper-Report/"/>
    
      <category term="Data mining" scheme="http://meng.uno/categories/Paper-Report/Data-mining/"/>
    
    
      <category term="Paper Report" scheme="http://meng.uno/tags/Paper-Report/"/>
    
      <category term="Data Mining" scheme="http://meng.uno/tags/Data-Mining/"/>
    
  </entry>
  
  <entry>
    <title>.length与length()的区别</title>
    <link href="http://meng.uno/posts/61c2f1f1/"/>
    <id>http://meng.uno/posts/61c2f1f1/</id>
    <published>2018-02-10T13:58:04.000Z</published>
    <updated>2018-02-10T14:52:50.489Z</updated>
    
    <content type="html"><![CDATA[<blockquote>  <p>当我们需要使用数组或者字符串长度时，习惯了使用IDE自动补全的我们是否知道<code>.length</code>与<code>length()</code>的区别喻原因呢？</p></blockquote><p>上面问题的答案是：</p><ul>  <li>数组使用<code>.length</code>属性</li>  <li>字符串使用<code>length()</code>方法</li></ul><p>下面我来回答原因。</p><h2 id="为什么数组有-length属性？"><a class="header-anchor" href="#为什么数组有-length属性？">🌊</a>为什么数组有<code>.length</code>属性？</h2><p>在Java中，数组是容器对象，其中包含了固定数量的同一类型的值，一旦数组创建，其长度就是固定的了，于是，其长度可以作为一个属性。</p><h2 id="为什么字符串需要length-方法？"><a class="header-anchor" href="#为什么字符串需要length-方法？">🌊</a>为什么字符串需要<code>length()</code>方法？</h2><p>Java中的String，实际上是一个char类型数组，而char[]已经有了<code>.length</code>属性，所以在实现String时就没必要再定义重复的属性了，于是需要定义一个方法来返回其长度。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
  &lt;p&gt;当我们需要使用数组或者字符串长度时，习惯了使用IDE自动补全的我们是否知道&lt;code&gt;.length&lt;/code&gt;与&lt;code&gt;length()&lt;/code&gt;的区别喻原因呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上面问题的答案是：&lt;/p&gt;
      
    
    </summary>
    
      <category term="Java开发Tips" scheme="http://meng.uno/categories/Java%E5%BC%80%E5%8F%91Tips/"/>
    
      <category term="String" scheme="http://meng.uno/categories/Java%E5%BC%80%E5%8F%91Tips/String/"/>
    
      <category term="Object" scheme="http://meng.uno/categories/Java%E5%BC%80%E5%8F%91Tips/String/Object/"/>
    
    
      <category term="Java" scheme="http://meng.uno/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java异常结构层次图</title>
    <link href="http://meng.uno/posts/1164dab2/"/>
    <id>http://meng.uno/posts/1164dab2/</id>
    <published>2018-02-09T14:11:15.000Z</published>
    <updated>2018-02-10T14:51:35.021Z</updated>
    
    <content type="html"><![CDATA[<p>在Java中，异常分为<code>checked</code>与<code>unchecked</code>，他们都在一个分类层次中，如下图。</p><p><img src="http://www.meng.uno/images/ehd.jpeg" alt="DEH"></p><p>其中，红色的异常是<code>checked</code>异常，意味着在一个方法中，他们<code>throw</code>后必须<code>catch</code>或者<code>declare</code>。</p><p>另一种颜色的为<code>unchecked</code>异常，他们的异常不需要被<code>recover</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在Java中，异常分为&lt;code&gt;checked&lt;/code&gt;与&lt;code&gt;unchecked&lt;/code&gt;，他们都在一个分类层次中，如下图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.meng.uno/images/ehd.jpeg&quot; alt=&quot;DEH&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="Java开发Tips" scheme="http://meng.uno/categories/Java%E5%BC%80%E5%8F%91Tips/"/>
    
      <category term="Exception" scheme="http://meng.uno/categories/Java%E5%BC%80%E5%8F%91Tips/Exception/"/>
    
    
      <category term="Java" scheme="http://meng.uno/tags/Java/"/>
    
      <category term="Exception" scheme="http://meng.uno/tags/Exception/"/>
    
  </entry>
  
  <entry>
    <title>二分查找的效率</title>
    <link href="http://meng.uno/posts/fff444e8/"/>
    <id>http://meng.uno/posts/fff444e8/</id>
    <published>2018-02-08T09:20:00.000Z</published>
    <updated>2018-02-10T13:05:27.172Z</updated>
    
    <content type="html"><![CDATA[<blockquote>  <p>查找是比较常见的工作，今天我通过对比几种在数组中查找一个确定的值的例子来向大家展示二分查找的魅力。</p></blockquote><h2 id="数组查找元素的几种方法"><a class="header-anchor" href="#数组查找元素的几种方法">🌊</a>数组查找元素的几种方法</h2><h3 id="使用list"><a class="header-anchor" href="#使用list">🌊</a>使用List</h3><figure class="highlight java">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">useList</span><span class="params">(String[] arr, String targetValue)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Arrays.asList(arr).contains(targetValue);</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><h3 id="使用set"><a class="header-anchor" href="#使用set">🌊</a>使用Set</h3><figure class="highlight java">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">useSet</span><span class="params">(String[] arr, String targetValue)</span> </span>&#123;</span><br><span class="line">Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;String&gt;(Arrays.asList(arr));</span><br><span class="line"><span class="keyword">return</span> set.contains(targetValue);</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><h3 id="使用for-loop"><a class="header-anchor" href="#使用for-loop">🌊</a>使用for-loop</h3><figure class="highlight java">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">useLoop</span><span class="params">(String[] arr, String targetValue)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(String s: arr)&#123;</span><br><span class="line"><span class="keyword">if</span>(s.equals(targetValue))</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><h3 id="使用二分"><a class="header-anchor" href="#使用二分">🌊</a>使用二分</h3><figure class="highlight java">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">useArraysBinarySearch</span><span class="params">(String[] arr, String targetValue)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a =  Arrays.binarySearch(arr, targetValue);</span><br><span class="line"><span class="keyword">if</span>(a &gt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><h2 id="时间复杂性"><a class="header-anchor" href="#时间复杂性">🌊</a>时间复杂性</h2><h3 id="代码"><a class="header-anchor" href="#代码">🌊</a>代码</h3><blockquote>  <p>使用如下代码来验证不同数据规模（5，1k，10k）的查找任务下四种方法的时间复杂性。（二分查找需要对数据排序，排序时间未计算在内。）</p></blockquote><figure class="highlight java">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String[] arr = <span class="keyword">new</span> String[] &#123;  <span class="string">"CD"</span>,  <span class="string">"BC"</span>, <span class="string">"EF"</span>, <span class="string">"DE"</span>, <span class="string">"AB"</span>&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//use list</span></span><br><span class="line"><span class="keyword">long</span> startTime = System.nanoTime();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">useList(arr, <span class="string">"A"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> endTime = System.nanoTime();</span><br><span class="line"><span class="keyword">long</span> duration = endTime - startTime;</span><br><span class="line">System.out.println(<span class="string">"useList:  "</span> + duration / <span class="number">1000000</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//use set</span></span><br><span class="line">startTime = System.nanoTime();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">useSet(arr, <span class="string">"A"</span>);</span><br><span class="line">&#125;</span><br><span class="line">endTime = System.nanoTime();</span><br><span class="line">duration = endTime - startTime;</span><br><span class="line">System.out.println(<span class="string">"useSet:  "</span> + duration / <span class="number">1000000</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//use loop</span></span><br><span class="line">startTime = System.nanoTime();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">useLoop(arr, <span class="string">"A"</span>);</span><br><span class="line">&#125;</span><br><span class="line">endTime = System.nanoTime();</span><br><span class="line">duration = endTime - startTime;</span><br><span class="line">System.out.println(<span class="string">"useLoop:  "</span> + duration / <span class="number">1000000</span>);</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><h3 id="5-结果"><a class="header-anchor" href="#5-结果">🌊</a>&quot;5&quot;结果</h3><figure class="highlight stylus">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>      </td>      <td class="code">        <pre><span class="line">useList:  <span class="number">13</span></span><br><span class="line">useSet:  <span class="number">72</span></span><br><span class="line">useLoop:  <span class="number">5</span></span><br></pre>      </td>    </tr>  </table></figure><h3 id="1k-结果"><a class="header-anchor" href="#1k-结果">🌊</a>&quot;1k&quot;结果</h3><h4 id="随机生成数据"><a class="header-anchor" href="#随机生成数据">🌊</a>随机生成数据</h4><figure class="highlight java">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>      </td>      <td class="code">        <pre><span class="line">String[] arr = <span class="keyword">new</span> String[<span class="number">1000</span>];</span><br><span class="line"> </span><br><span class="line">Random s = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt; <span class="number">1000</span>; i++)&#123;</span><br><span class="line">arr[i] = String.valueOf(s.nextInt());</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><h4 id="结果"><a class="header-anchor" href="#结果">🌊</a>结果</h4><figure class="highlight stylus">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>      </td>      <td class="code">        <pre><span class="line">useList:  <span class="number">112</span></span><br><span class="line">useSet:  <span class="number">2055</span></span><br><span class="line">useLoop:  <span class="number">99</span></span><br><span class="line">useArrayBinary:  <span class="number">12</span></span><br></pre>      </td>    </tr>  </table></figure><h3 id="10k-结果"><a class="header-anchor" href="#10k-结果">🌊</a>&quot;10k&quot;结果</h3><figure class="highlight stylus">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>      </td>      <td class="code">        <pre><span class="line">useList:  <span class="number">1590</span></span><br><span class="line">useSet:  <span class="number">23819</span></span><br><span class="line">useLoop:  <span class="number">1526</span></span><br><span class="line">useArrayBinary:  <span class="number">12</span></span><br></pre>      </td>    </tr>  </table></figure><h2 id="结论"><a class="header-anchor" href="#结论">🌊</a>结论</h2><p>通过以上结果，我们可以发现二分搜索确实很高效，而且当数据量变大时，其时间增长幅度还比较小。</p><p>以后，我们就可以使用<code>Arrays.binarySearch()</code>来高效查找某元素了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
  &lt;p&gt;查找是比较常见的工作，今天我通过对比几种在数组中查找一个确定的值的例子来向大家展示二分查找的魅力。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;数组查找元素的几种方法&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#数
      
    
    </summary>
    
      <category term="Java开发Tips" scheme="http://meng.uno/categories/Java%E5%BC%80%E5%8F%91Tips/"/>
    
      <category term="Search" scheme="http://meng.uno/categories/Java%E5%BC%80%E5%8F%91Tips/Search/"/>
    
    
      <category term="Java" scheme="http://meng.uno/tags/Java/"/>
    
      <category term="算法复杂性" scheme="http://meng.uno/tags/%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E6%80%A7/"/>
    
      <category term="二分查找" scheme="http://meng.uno/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
  </entry>
  
  <entry>
    <title>Java Substring() 的实现</title>
    <link href="http://meng.uno/posts/f3057e6c/"/>
    <id>http://meng.uno/posts/f3057e6c/</id>
    <published>2018-02-08T07:43:08.000Z</published>
    <updated>2018-02-09T10:46:20.937Z</updated>
    
    <content type="html"><![CDATA[<p>写过Java的人应该都用过<code>substring(int bedinIndex, int endIndex)</code>方法。我发现这个简单的方法在实现上居然经过了一次大的变革。</p><h2 id="substring-的用途"><a class="header-anchor" href="#substring-的用途">🌊</a>substring()的用途</h2><p>代码:</p><figure class="highlight">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>      </td>      <td class="code">        <pre><span class="line">String origin = "asdfg"; </span><br><span class="line">origin = origin.substring(1,3);</span><br><span class="line">System.out.println(origin);</span><br></pre>      </td>    </tr>  </table></figure><p>输出:</p><figure class="highlight stylus">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br></pre>      </td>      <td class="code">        <pre><span class="line">sd</span><br></pre>      </td>    </tr>  </table></figure><p>我们发现它能将原始字符串中从下标为beginIndex到endIndex-1之间的子串取出。那它是怎么实现的呢？</p><h2 id="substring-的实现"><a class="header-anchor" href="#substring-的实现">🌊</a>substring()的实现</h2><blockquote>  <p>Java中的字符串有三个域：char value[], int offset以及int count，它们分别存储字符串的值，起始下标与长度。</p></blockquote><h3 id="jdk6版本"><a class="header-anchor" href="#jdk6版本">🌊</a>JDK6版本</h3><p>在这个版本中，每次执行substring()方法时并不会新建新的string，仅仅只是将上述三个域中的offset，count做必要的修改。返回对象仍指向原来的数据。</p><p><img src="http://www.meng.uno/images/substring_jdk.png" alt="Substring()实现版本一"></p><p>这样一来，<strong><em>缺点</em></strong>就比较明显：当原始字符串比较长，而截取的子串比较短时，在后续的使用中就会浪费大量的空间。</p><h3 id="jdk7-版本"><a class="header-anchor" href="#jdk7-版本">🌊</a>JDK7+版本</h3><p>在上一个版本基础上，这个方法进行了改进，每次使用这个方法都会新建一个string对象，并将其返回。</p><p><img src="http://www.meng.uno/images/substring_jdk7.png" alt="Substring()实现版本二"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;写过Java的人应该都用过&lt;code&gt;substring(int bedinIndex, int endIndex)&lt;/code&gt;方法。我发现这个简单的方法在实现上居然经过了一次大的变革。&lt;/p&gt;
&lt;h2 id=&quot;substring-的用途&quot;&gt;&lt;a class=&quot;heade
      
    
    </summary>
    
      <category term="Java开发Tips" scheme="http://meng.uno/categories/Java%E5%BC%80%E5%8F%91Tips/"/>
    
    
      <category term="Java" scheme="http://meng.uno/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java异常处理</title>
    <link href="http://meng.uno/posts/7526d370/"/>
    <id>http://meng.uno/posts/7526d370/</id>
    <published>2018-02-01T14:21:52.000Z</published>
    <updated>2018-02-10T14:51:35.019Z</updated>
    
    <content type="html"><![CDATA[<p>在Java中，调用某方法，就必须处理被调用方法抛出的异常，同时超类也可以用来捕获或者处理子类异常。</p><h2 id="调用方法必须处理被调用方法抛出的异常"><a class="header-anchor" href="#调用方法必须处理被调用方法抛出的异常">🌊</a>调用方法必须处理被调用方法抛出的异常</h2><p>下面是一个处理异常的程序。我们可以测试一下，如果在一个方法中抛出一个异常，不仅是该方法，而且所有调用该方法的方法都必须声明或抛出异常。</p><figure class="highlight java">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">exceptionTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Exception exception;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            callDoOne(); </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doOne</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> exception;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">callDoOne</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        doOne();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><h2 id="超类可以用来捕获或处理子类异常"><a class="header-anchor" href="#超类可以用来捕获或处理子类异常">🌊</a>超类可以用来捕获或处理子类异常</h2><p>可以使用如下代码验证。</p><figure class="highlight java">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">exceptionTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Exception exception;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> myException myexception;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            callDoOne(); </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doOne</span><span class="params">()</span> <span class="keyword">throws</span> myException </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> myexception;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">callDoOne</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        doOne();</span><br><span class="line">        <span class="keyword">throw</span> exception;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>这也就是为什么catch子句只有一个父类在语法上安全的原因。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在Java中，调用某方法，就必须处理被调用方法抛出的异常，同时超类也可以用来捕获或者处理子类异常。&lt;/p&gt;
&lt;h2 id=&quot;调用方法必须处理被调用方法抛出的异常&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#调用方法必须处理被调用方法抛出的异常&quot;&gt;🌊&lt;
      
    
    </summary>
    
      <category term="Java开发Tips" scheme="http://meng.uno/categories/Java%E5%BC%80%E5%8F%91Tips/"/>
    
      <category term="Exception" scheme="http://meng.uno/categories/Java%E5%BC%80%E5%8F%91Tips/Exception/"/>
    
    
      <category term="Java" scheme="http://meng.uno/tags/Java/"/>
    
      <category term="Exception" scheme="http://meng.uno/tags/Exception/"/>
    
  </entry>
  
  <entry>
    <title>Analysis For Hyperkernel</title>
    <link href="http://meng.uno/posts/55c9299d/"/>
    <id>http://meng.uno/posts/55c9299d/</id>
    <published>2018-01-29T13:43:03.000Z</published>
    <updated>2018-02-10T14:56:55.140Z</updated>
    
    <content type="html"><![CDATA[<blockquote>  <p>Homepage: <a href="https://locore.cs.washington.edu/hyperkernel/" target="_blank" rel="noopener">https://locore.cs.washington.edu/hyperkernel/</a><br> Code: <a href="https://github.com/locore/hv6" target="_blank" rel="noopener">https://github.com/locore/hv6</a></p></blockquote><h2 id="state-machine-specification"><a class="header-anchor" href="#state-machine-specification">🌊</a>State-machine Specification</h2><p>State-machine specification means the system function will first verify the old procedure until the procedure is runnable and then return a new procedure and write to the system image. All of these must run in the user level. This specification consists  of two parts: a definition of abstract kernel state, and a definition of trap handlers (e.g., system calls) in terms of abstract state transitions. They use fully automated technique to find bugs and this method is full functional verification if program  is free of loops and state is finite.</p><p>The “hv6/hv6/spec/kernel/spec/specs.py” file contains the system calls which use this kind of specification. From the picture, we can see that they use Z3 to prove the correction of the “old” procedure and if it can transfer to a new state or it is runnable,  it will return the new procedure so that it can be proved true.</p><h2 id="declarative-specification"><a class="header-anchor" href="#declarative-specification">🌊</a>Declarative Specification</h2><p>The authors also provide a declarative specification of the high level properties that the state-machine specification should satisfy. The verifier will check that these high level properties are indeed satisfied, helping increase the programmer’s confidence  in the correctness of the state-machine specification. To improve confidence in its correctness, there is a higher-level declarative specification to better capture programmer intuition about kernel behavior, in the form of a conjunction of crosscutting  properties that hold across all trap handlers.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
  &lt;p&gt;Homepage: &lt;a href=&quot;https://locore.cs.washington.edu/hyperkernel/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://locore.cs.washing
      
    
    </summary>
    
      <category term="操作系统" scheme="http://meng.uno/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="系统验证" scheme="http://meng.uno/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E9%AA%8C%E8%AF%81/"/>
    
    
      <category term="System" scheme="http://meng.uno/tags/System/"/>
    
      <category term="Verification" scheme="http://meng.uno/tags/Verification/"/>
    
  </entry>
  
  <entry>
    <title>怎么处理噪声</title>
    <link href="http://meng.uno/posts/a12d1477/"/>
    <id>http://meng.uno/posts/a12d1477/</id>
    <published>2018-01-27T14:35:33.000Z</published>
    <updated>2018-02-10T14:51:35.018Z</updated>
    
    <content type="html"><![CDATA[<p>处理噪声是一个在机器学习学习过程中，总会被问到的问题。噪声可以出现在输入<code>X</code>，亦可以出现在输出<code>Y</code>中。</p><h2 id="x中缺失值"><a class="header-anchor" href="#x中缺失值">🌊</a><code>X</code>中缺失值</h2><ol>  <li>使用来自所有可用数据的特征的平均值</li>  <li>忽略实例</li>  <li>使用来自类似项目的平均值</li>  <li>使用另一个机器学习算法来预测值</li></ol><ul>  <li>Bagging 或者 Boosting</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;处理噪声是一个在机器学习学习过程中，总会被问到的问题。噪声可以出现在输入&lt;code&gt;X&lt;/code&gt;，亦可以出现在输出&lt;code&gt;Y&lt;/code&gt;中。&lt;/p&gt;
&lt;h2 id=&quot;x中缺失值&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#x中缺失值&quot;&gt;🌊&lt;
      
    
    </summary>
    
      <category term="AI（人工智能）" scheme="http://meng.uno/categories/AI%EF%BC%88%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%EF%BC%89/"/>
    
      <category term="机器学习" scheme="http://meng.uno/categories/AI%EF%BC%88%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%EF%BC%89/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="http://meng.uno/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="噪声" scheme="http://meng.uno/tags/%E5%99%AA%E5%A3%B0/"/>
    
  </entry>
  
  <entry>
    <title>Analysis for DynamoRIO</title>
    <link href="http://meng.uno/posts/a331aaad/"/>
    <id>http://meng.uno/posts/a331aaad/</id>
    <published>2018-01-13T13:57:16.000Z</published>
    <updated>2018-02-11T14:04:49.152Z</updated>
    
    <content type="html"><![CDATA[<p>DynamoRIO is a dynamic binary piling/translation platform. Through it, you can manipulate the running code of a program, that is, it can simulate running a program and allow you to transform and control any place of the running code. It is used for dynamic  analysis, optimization and translation of programs.</p><p>DynamoRIO is a cooperation project between HP and MIT. Dynamo comes from HP’s laboratory, RIO (Runtime Introspection and Optimization) comes from MIT’s computer science laboratory. The history is shown as follows.</p><p><img src="http://www.meng.uno/images/rio/1.png" alt="RIO"></p><h2 id="architecture"><a class="header-anchor" href="#architecture">🌊</a>Architecture</h2><p>DynamoRIO’s architecture is like this. It is between the operating system and the application so that it can get the system calls and the applications’ code easily.</p><p><img src="http://www.meng.uno/images/rio/2.png" alt="RIO"></p><p>This picture is the Toolchain Control Points.</p><p><img src="http://www.meng.uno/images/rio/3.png" alt="RIO"></p><p>The process flow is as follows. The original program goes through the “basic block builder”, “trace selector”, “basic block cache” and “trace cache” to get the emulation propose.</p><p><img src="http://www.meng.uno/images/rio/4.png" alt="RIO"></p><h2 id="efficiency"><a class="header-anchor" href="#efficiency">🌊</a>Efficiency</h2><p>DynamoRIO is separated from the code of applications by the “context switch” as shown in the picture above. The applications’ code is copied to the instruction cache. The code in these caches will execute as native code. Until a jump instruction is encountered,  the applications’ “machine state” will be saved, and the control will turn back to DynamoRIO to find the basic block where the jump instruction is located. DynamoRIO is much faster than pure emulations by “code cache”.</p><p><img src="http://www.meng.uno/images/rio/5.png" alt="RIO"></p><p>There are several improvements in this project. The picture above is the first one — Basic Block Cache. If you copy each basic block into a code cache and run it natively, it greatly reduces the overhead of interpreting, however, we still need to explain  each jump instruction, and then return to DynamoRIO to find the target instruction. If a target instruction already exists in the code cache and is referred to by a direct jump instruction, DynamoRIO can directly jump to the target instruction in the  code cache to avoid the overhead of the context switch, which is called “Linking Direct Branches”.</p><p><img src="http://www.meng.uno/images/rio/6.png" alt="RIO"></p><p>The next improvement is “Linking Indirect Branches” since a conditional branch instruction can not be linked like a direct jump instruction because it has more than one goal and needs to make decisions and find the list’s jump target.</p><p><img src="http://www.meng.uno/images/rio/7.png" alt="RIO"></p><p>Some basic blocks, which are often executed sequentially, are combined into one execution stream to reduce the number of branches and increase the locality of the program. It reduces some overhead of indirect branch search, because it has put indirect  brach in this trace as well. This is also the last improvement — Trace Building.</p><p><img src="http://www.meng.uno/images/rio/8.png" alt="RIO"></p><h2 id="transparency"><a class="header-anchor" href="#transparency">🌊</a>Transparency</h2><p>It has three transparency principles which are “As few changes as possible”, “Hide necessary changes” and “Separate resources”. Changes in these areas are few: application code, stored addresses, threads and application data. Changes in these fields are  hidden: application addresses, address space, error transparency and code cache consistency. This picture shows the principle 3 well. DynamoRIO’s own code also uses share libraries when loading applications, which may cause some conflicts if the application  also uses the same library. The solution is that, DynamoRIO doesn’t use the library directly, calling system call on Linux and calling system call via windows win32 API profile.</p><p><img src="http://www.meng.uno/images/rio/9.png" alt="RIO"></p><p>The heap memory allocated by DynamoRIO itself is distinguished from the heap memory requested by the application. In addition, DynamoRIO uses its own I/O routines for input and output to avoid conflicts with the applications’ I/O buffers. What’s more,  since the use of shared locks can also cause conflicts between DynamoRIO and applications, it also has synchronization transparency.</p><p>To avoid conflicts with applications, DynamoRIO doesn’t create its own thread, instead spawns threads in the application process to distinguish between its own status and applications’ status via a “Context Switch” as the first picture shows. Further  more, it chooses to leave the stack of application processes intact, creating a private stack of each thread.</p><h2 id="comprehensive"><a class="header-anchor" href="#comprehensive">🌊</a>Comprehensive</h2><p>All data streams must go through handlers generated by the dispatcher. The data flow is like this.</p><p><img src="http://www.meng.uno/images/rio/10.png" alt="RIO"></p><h2 id="customization"><a class="header-anchor" href="#customization">🌊</a>Customization</h2><p>DynamoRIO has developed some event driven APIs that allow developers to customize instrument instructions. Using it, you can achieve some proposes such as: memory checking, performance testing, system call tracking, code coverage calculation.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;DynamoRIO is a dynamic binary piling/translation platform. Through it, you can manipulate the running code of a program, that is, it can 
      
    
    </summary>
    
      <category term="RIO" scheme="http://meng.uno/categories/RIO/"/>
    
      <category term="DynamoRIO" scheme="http://meng.uno/categories/RIO/DynamoRIO/"/>
    
    
      <category term="DynamoRIO" scheme="http://meng.uno/tags/DynamoRIO/"/>
    
      <category term="RIO" scheme="http://meng.uno/tags/RIO/"/>
    
  </entry>
  
  <entry>
    <title>Zsh</title>
    <link href="http://meng.uno/posts/d911b12b/"/>
    <id>http://meng.uno/posts/d911b12b/</id>
    <published>2018-01-11T02:22:44.000Z</published>
    <updated>2018-02-11T03:08:26.198Z</updated>
    
    <content type="html"><![CDATA[<blockquote>  <p>不少程序员都觉得Mac的一大优势就是其Shell，也有很多人觉得Mac与Linux在Shell上很相似。不错，但是Mac还是略胜一筹或者说高一个量级。今天，我将向大家介绍一个Mac特有的Shell（Linux也可以安装，但是不是系统自带。）—— Zsh。</p></blockquote><h2 id="切换到zsh"><a class="header-anchor" href="#切换到zsh">🌊</a>切换到Zsh</h2><p>使用<code>cat /etc/shells</code>指令，我们可以看看自己的系统有哪些Shells，下面是我的Mac的结果：</p><figure class="highlight stylus">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre>      </td>      <td class="code">        <pre><span class="line">/bin/bash</span><br><span class="line">/bin/csh</span><br><span class="line">/bin/ksh</span><br><span class="line">/bin/sh</span><br><span class="line">/bin/tcsh</span><br><span class="line">/bin/zsh</span><br><span class="line">/usr/local/bin/fish</span><br></pre>      </td>    </tr>  </table></figure><p>使用这个指令切换到Zsh：<code>chsh -s /bin/zsh</code>。（想使用其他Shell也是同样的指令哦。）</p><p>这是，我们的Shell配置文件就为<code>.zshrc</code>了。</p><blockquote>  <p>我觉得从这里我们应该可以知道，为什么之前的Shell配置文件要以<code>.bash_profile</code>命名了吧。因为Mac默认Shell是Bash。</p></blockquote><h2 id="迁移bash配置"><a class="header-anchor" href="#迁移bash配置">🌊</a>迁移Bash配置</h2><p>我使用Bash有好几年了，那些配置都是一些环境变量啊什么的，如果在Zsh的配置里再写一遍，无疑是一件很费时又低效的事。那有没有什么快捷的方式呢？当然有！</p><p>通过如下指令：<code>source ~/.bash_profile</code>就可以将<code>.bash_profile</code>里的配置全部引入到<code>.zshrc</code>中了。同理，如果你想自己写配置，也可以通过这种方式引入。（后文你将看到一个第三方工具就是这么做的。）</p><h2 id="安装oh-my-zsh"><a class="header-anchor" href="#安装oh-my-zsh">🌊</a>安装oh my zsh</h2><p>通过<code>wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</code>指令安装。</p><p>这时我们发现在<code>.zshrc</code>文件中，多了两行：</p><figure class="highlight stylus">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br></pre>      </td>      <td class="code">        <pre><span class="line">export ZSH=/Users/NAME/.oh-my-zsh</span><br><span class="line">source <span class="variable">$ZSH</span>/oh-my-zsh.sh</span><br></pre>      </td>    </tr>  </table></figure><h2 id="自定义shell主题"><a class="header-anchor" href="#自定义shell主题">🌊</a>自定义Shell主题</h2><p>使用oh my zsh主要的原因是使用其提供的漂亮的主题，主题目录在<code>.oh-my-zsh/themes/</code>下，选择主题<code>ZSH_THEME=&quot;robbyrussell&quot;</code>。这时我的Shell主题就是robbyrussell了。</p><p>打开robbyrussell.zsh-theme文件，我们可以看见几条配置。</p><p>我将其中的<code>PROMPT</code>修改为：</p><p><code>PROMPT='${ret_status} %{$fg[cyan]%}%d %{$reset_color%} $(git_prompt_info)%{$fg_bold[red]%}&gt;%{$fg_bold[yellow]%}&gt;%{$fg_bold[green]%}&gt; '</code></p><p>这时我的Shell就变成了这样：</p><p><img src="http://www.meng.uno/images/zsh.png" alt="Zsh"></p><p>可以发现我的定制有：显示绝对路径，<code>&gt;&gt;&gt;</code>等。</p><p>还有很多主题与配置，大家可以自己尝试。</p><h2 id="定制shell"><a class="header-anchor" href="#定制shell">🌊</a>定制Shell</h2><p>Zsh还有个功能就是“别名”。不知道大家有没有这样的经历，需要打开<code>.plist</code>这样的文件，如果用普通编辑器打开会非常界面不友好，而用Xcode打开则完美可观。那怎么在控制台直接用Xcode打开文件呢？（其他软件同理）</p><p>我在<code>.zshrc</code>中添加：<code>alias xcode=&quot;/Applications/Xcode.app/Contents/MacOS/Xcode&quot;</code>，之后我就可以使用<code>xcode X</code>来用Xcode打开X文件了。</p><p>我们也可以为某种类型文件设置默认打开方式：<code>alias -s html=atom</code>（当我们键入<code>.html</code>文件时，会自动用Atom打开）。</p><h2 id="安装插件"><a class="header-anchor" href="#安装插件">🌊</a>安装插件</h2><p>oh my zsh为Zsh提供了100+插件，如果我们需要安装某插件，只需要在<code>.zshrc</code>文件中的<code>plugins=()</code>中添加，用空格隔开，只需要填插件名字，默认添加了<code>git</code>。</p><p>在这里我向大家介绍几种网上很常见的插件：</p><ol>  <li><code>git</code>当你处于一个 git 受控的目录下时，Shell 会明确显示 「git」和 branch，如上图所示，另外对 git 很多命令进行了简化，例如 gco=’git checkout’、gd=’git diff’、gst=’git status’、g=’git’等等，熟练使用可以大大减少 git 的命令长度，命令内容可以参考~/.oh-my-zsh/plugins/git/git.plugin.zsh。</li>  <li><code>osx</code>tab 增强，quick-look filename 可以直接预览文件，man-preview grep 可以生成 grep手册 的pdf 版本等。</li>  <li><code>autojump</code>像他的名字一样，提供自动补全等很多功能，大家自己去尝试吧。</li></ol><p><strong>注意：安装autojump建议使用Homebrew</strong></p><p><code>brew install autojump</code></p><p>然后按照提示将一句类似这个</p><p><code>[ -f /usr/local/etc/profile.d/autojump.sh ] &amp;&amp; . /usr/local/etc/profile.d/autojump.sh</code></p><p>的句子插入到<code>.zshrc</code>文件中即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
  &lt;p&gt;不少程序员都觉得Mac的一大优势就是其Shell，也有很多人觉得Mac与Linux在Shell上很相似。不错，但是Mac还是略胜一筹或者说高一个量级。今天，我将向大家介绍一个Mac特有的Shell（Linux也可以安装，但是不是系统自带。）——
      
    
    </summary>
    
      <category term="Shells" scheme="http://meng.uno/categories/Shells/"/>
    
    
      <category term="Zsh" scheme="http://meng.uno/tags/Zsh/"/>
    
  </entry>
  
  <entry>
    <title>Deep Learning上手工具</title>
    <link href="http://meng.uno/posts/99be2c50/"/>
    <id>http://meng.uno/posts/99be2c50/</id>
    <published>2018-01-10T14:43:43.000Z</published>
    <updated>2018-02-10T14:51:35.020Z</updated>
    
    <content type="html"><![CDATA[<p>现在Deep Learning太火了，以至于没有任何计算机基础的人都想使用它，那么对于新手，甚至连Python代码都写不好的DL爱好者，有什么上手工具么？选择合适的工具可以帮助学习更快，很巧的是，有很多不同的工具可供选择，下图列出了常用的工具。</p><p><img src="http://www.meng.uno/images/tools_dp.png" alt="DL"></p><p>谷歌开发的<code>Tensorflow</code>，微软的<code>CNTK</code>以及<code>Theano</code>都是为深度学习而开发的库，它们促进了使用<code>GPU</code>计算。他们并不难，但与<code>Keras</code>相比，他们仍然非常复杂。<code>Keras</code>只是使用底层深度学习库的界面。使用<code>Keras</code>就像玩乐高一样简单。我建议初学者从<code>Keras</code>开始，因为我们可以快速了解深度学习可以做些什么，并积极进行一些有趣的项目。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;现在Deep Learning太火了，以至于没有任何计算机基础的人都想使用它，那么对于新手，甚至连Python代码都写不好的DL爱好者，有什么上手工具么？选择合适的工具可以帮助学习更快，很巧的是，有很多不同的工具可供选择，下图列出了常用的工具。&lt;/p&gt;
&lt;p&gt;&lt;img sr
      
    
    </summary>
    
      <category term="AI（人工智能）" scheme="http://meng.uno/categories/AI%EF%BC%88%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%EF%BC%89/"/>
    
      <category term="Deep Learning" scheme="http://meng.uno/categories/AI%EF%BC%88%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%EF%BC%89/Deep-Learning/"/>
    
    
      <category term="Deep Learning" scheme="http://meng.uno/tags/Deep-Learning/"/>
    
  </entry>
  
  <entry>
    <title>CryptoMinisat</title>
    <link href="http://meng.uno/posts/7d26fe8/"/>
    <id>http://meng.uno/posts/7d26fe8/</id>
    <published>2018-01-10T13:50:36.000Z</published>
    <updated>2018-02-11T14:04:49.150Z</updated>
    
    <content type="html"><![CDATA[<p>Inspired by other verification system projects, I want to further explore the means of verification they used such as SMT solver, SAT solver, Coq and so on. I’ll start with this report from an advanced SAT solver — CryptoMinisat. (I have written a report  about STP which is a SMT solver.)</p><p>The Boolean Satisfiability Problem (SAT for short) is the problem of determining if there exists an interpretation that satisfies a given boolean formula. In other words, it asks whether the variables of a given boolean formula can be consistently replaced  by the values TRUE or FALSE in such a way that the formula evaluates to TRUE. If this is the case, the formula is called satisfiable. Otherwise, the formula is unsatisfiable.</p><p>SAT solvers have recently been enjoying a boom in the application front: more and more applications can and do make use of SAT solvers to accomplish tasks ranging from the fairly trivial to the very complex. The benefit of the incredible improvements  in the design of efficient SAT solvers those recent years is now reaching our lives: The Intel Core7 processor for instance has been designed with the help of SAT technology, while the device drivers of Windows 7 are being certified thanks to an SMT  solver (based on a SAT solver).</p><h2 id="build-and-test"><a class="header-anchor" href="#build-and-test">🌊</a>Build and Test</h2><p>This is the 5th version of CryptoMinisat which means the install instruction is very prefect now. To build and test this project, all we have to do is following the instruction. Firstly, we need to install many dependencies. Then, it is very simple to  build by “make”. The following is part of the output.</p><p><img src="http://www.meng.uno/images/cryptominisat/1.png" alt="CryptoMinisat"></p><p>Testing this project is very easy by the script written by the authors. Typing “make test” and waiting for a moment, we will get this output which means the tests are correct.</p><p><img src="http://www.meng.uno/images/cryptominisat/2.png" alt="CryptoMinisat"></p><h2 id="run-this-project"><a class="header-anchor" href="#run-this-project">🌊</a>Run This Project</h2><p>This is a very mature project which can be run from the terminal or used as a C++/Python library. In this report, I just choose the first way.</p><p>As I said before, this project is a SAT solver which means it could find out the situations which fulfill the input or return error. The grammar is very simple just like this.</p><p><img src="http://www.meng.uno/images/cryptominisat/3.png" alt="CryptoMinisat"></p><p>The first line means this input has 2 variables and 4 clauses. Every line is a clause which is ended by “0”. Using the third line as an example, it says that 2 is TRUE and 3 is FALSE. I use this file as an input and run it in the terminal. The result  is shown as follows. It means 1 is TRUE, 2 and 3 are FALSE is the only solution to this problem.</p><p><img src="http://www.meng.uno/images/cryptominisat/4.png" alt="CryptoMinisat"></p><p>This is another example and the result.</p><p><img src="http://www.meng.uno/images/cryptominisat/5.png" alt="CryptoMinisat"></p><p><img src="http://www.meng.uno/images/cryptominisat/6.png" alt="CryptoMinisat"></p><p>It means there isn’t a solution to this problem.</p><h2 id="how-it-works"><a class="header-anchor" href="#how-it-works">🌊</a>How It Works</h2><p>There are many improvements and techniques included in this project. It uses “Minisat” as its core and uses Gaussian Elimination on top-level. This is another part of its techniques.</p><ul>  <li>Variable elimination and replacement, strengthening and subsumption;</li>  <li>Gate-based clause shortening and removal;</li>  <li>No time or memory-outs on weird CNFs;</li>  <li>Variable renumbering and variable number hiding. due to this, XOR clauses are cut and the added variables are always consistently displayed;</li>  <li>Temporary results are stored in SQLite which supports high speed update;</li>  <li>XOR recovery.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Inspired by other verification system projects, I want to further explore the means of verification they used such as SMT solver, SAT sol
      
    
    </summary>
    
      <category term="solver" scheme="http://meng.uno/categories/solver/"/>
    
      <category term="SAT" scheme="http://meng.uno/categories/solver/SAT/"/>
    
    
      <category term="CryptoMinisat" scheme="http://meng.uno/tags/CryptoMinisat/"/>
    
      <category term="SAT" scheme="http://meng.uno/tags/SAT/"/>
    
      <category term="solver" scheme="http://meng.uno/tags/solver/"/>
    
  </entry>
  
  <entry>
    <title>Simple Theorem Prover SMT solver</title>
    <link href="http://meng.uno/posts/cd3afb7d/"/>
    <id>http://meng.uno/posts/cd3afb7d/</id>
    <published>2018-01-03T13:42:58.000Z</published>
    <updated>2018-02-11T14:04:49.153Z</updated>
    
    <content type="html"><![CDATA[<p>I found it could be generated as program analysis tools, theorem provers, automated bug finders and so on which means it is a very crucial research. STP is a constraint solver aimed at solving constraints of bit vectors and arrays. It can read CVC, SMT-LIB1  and SMT-LIB2 formats files. It also could be used by Python, SMT-LIBv2 and even C library. STP preprocesses the input through the application of mathematical and logical identities, and then eagerly translates constraints into a purely propositional  logic formula that it feeds to an off-the-shelf SAT solver.</p><p>STP views memory as untyped bytes. It provides only three data types: booleans, bitvectors, and arrays of bitvectors. A bitvector is an unsigned, fixed-length sequence of bits. For example, “0010” is a constant, 4-bit bitvector representing the constant  2.</p><h2 id="build-and-run"><a class="header-anchor" href="#build-and-run">🌊</a>Build and Run</h2><p>We can build this project on Linux or Docker, however, you know, Google isn’t well supported in China, so I can’t use “repo” execution which needed by Docker. In this document, I will use a quick install.</p><p>Firstly, we need to install many dependencies. Then, since STP uses “minisat” as its SAT solver by default, we need to install it first. It is very simple to do this by “cmake”. The following is part of the output.</p><p><img src="http://www.meng.uno/images/stp/1.png" alt="STP"></p><p>Then we could start to install STP (To get the code, we need to use “git clone” but not download it directly).</p><p><img src="http://www.meng.uno/images/stp/2.png" alt="STP"></p><p>This project depends on various external tools to do testing. Here we install “lit” and do some individual tests and use “GoogleTest” to write some unit tests.</p><h2 id="analyze-individual-test"><a class="header-anchor" href="#analyze-individual-test">🌊</a>Analyze Individual Test</h2><p>An individual test is like this.</p><p><img src="http://www.meng.uno/images/stp/3.png" alt="STP"></p><p>In this screenshot, we can see that this file is judging “b = (c || b)” and “((c || b) = b) &lt; c &lt; b”. We could find that an individual test file may contain these components:</p><ul>  <li>“; line”: comments;</li>  <li>“set-info”: set some configuration information for running this file;</li>  <li>“declare-fun”: definite some functions and their return types;</li>  <li>“assert”: like C lang, do some judgement;</li>  <li>“exit”: return.</li></ul><h2 id="analyze-unit-test"><a class="header-anchor" href="#analyze-unit-test">🌊</a>Analyze Unit Test</h2><p>We can simply run unit test by giving “lit” the individual tests directory or run “make C-api-tests” to build the C-api tests as unit tests. The Cpp file is like this.</p><p><img src="http://www.meng.uno/images/stp/4.png" alt="STP"></p><p>From this picture, we can see that a C-api test contains many simple verifications.</p><h2 id="analyze-the-code-structure"><a class="header-anchor" href="#analyze-the-code-structure">🌊</a>Analyze the Code Structure</h2><p><img src="http://www.meng.uno/images/stp/5.png" alt="STP"></p><p>From the above picture, I give the following simple understandings to this project.</p><ul>  <li>“Interface”: Define a C interface to achieve the file ins and outs;</li>  <li>“Sat”: Copy from “minisat” to call SAT solver.</li>  <li>“AST”: Implement the abstract syntax tree for parsed solver inputs;</li>  <li>“Util”: Store some header files for small tasks;</li>  <li>“Printer”: Appoint some output formats;</li>  <li>“Simplifier”: Simplify algorithms for AST;</li>  <li>“Parser”: Store some parsers for the CVC, SMT-LIB1, SMT-LIB2 inputs;</li>  <li>“STPManager”: Hold all components together.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I found it could be generated as program analysis tools, theorem provers, automated bug finders and so on which means it is a very crucia
      
    
    </summary>
    
      <category term="solver" scheme="http://meng.uno/categories/solver/"/>
    
      <category term="SMT" scheme="http://meng.uno/categories/solver/SMT/"/>
    
    
      <category term="solver" scheme="http://meng.uno/tags/solver/"/>
    
      <category term="STP" scheme="http://meng.uno/tags/STP/"/>
    
      <category term="SMT" scheme="http://meng.uno/tags/SMT/"/>
    
  </entry>
  
  <entry>
    <title>Software Verification Approaches</title>
    <link href="http://meng.uno/posts/55e262ef/"/>
    <id>http://meng.uno/posts/55e262ef/</id>
    <published>2017-12-11T13:19:48.000Z</published>
    <updated>2018-02-11T14:04:49.152Z</updated>
    
    <content type="html"><![CDATA[<h2 id="network-function-virtualization-nfv"><a class="header-anchor" href="#network-function-virtualization-nfv">🌊</a>Network Function Virtualization (NFV)</h2><p>In the beginning, we need to know NFV which through the establishment of VNF (Virtualized Network Function) to achieve some network functions on a common server, switches, memory and other hardware devices, making these network functions on a common hardware  device run, do not need to configure a new dedicated network elements, can greatly enhance the flexibility of the network deployment, and lower investment costs.</p><p>In the process of realization of network functionality through NFV technology, VNF in the form of software running on the hardware, by way of example and to achieve termination VNF allocation and deallocation of resources.</p><p>In order to avoid VNF packet forgery in transit and in storage and tampering, increasing the signature files in the software package VNF, the receiving end after receiving the VNF software package by verifying signature files for VNF package for secure  authentication to ensure VNF packet during transmission security; in addition, the receiving end before VNF instantiated need for storage VNF package for secure authentication to ensure VNF package in the store security, which increased VNF instantiation  delay, reduce the VNF instantiated performance.</p><h2 id="systems-theoretic-process-analysis-stpa"><a class="header-anchor" href="#systems-theoretic-process-analysis-stpa">🌊</a>Systems-Theoretic Process Analysis (STPA)</h2><p>STPA is for identifying harmful circumstances which could lead to accidents and generating detailed safety requirements which must be implemented in the design to prevent the occurrence of these unsafe scenarios in the system. STPA is a top-down process  and it addresses many types of hazards of components and their interactions like design errors, software flaws and component interaction failures. One of the advantages of STPA is that it can be applied at any stage of the system development process.  STPA is performed by four main steps:</p><ol>  <li>Before conducting an STPA analysis, the safety analysts should establish fundamentals of the analysis (e.g. accidents, the associated hazards) and construct the control structure diagram.</li>  <li>For each control action in the control diagram, the safety analysts must identify the potentially unsafe control actions of the system that could lead to a hazardous state. A unsafe control action is a control action that violates system safety constraints.</li>  <li>Use the identified hazardous control actions to create safety requirements and constraints.</li>  <li>Determine how each potentially hazardous control action, identified in step 2., could occur by augmenting the control structure diagram with a process model.</li></ol><h2 id="software-model-checking-smc"><a class="header-anchor" href="#software-model-checking-smc">🌊</a>Software Model Checking (SMC)</h2><p>SMC is an automatic technique based on a verification model which explore all possible software states in a brute-force manner to prove properties of their execution. The model checking process involves the target software to be formally modeled in the  input language of a model checker and specifications (properties) to be formalized in a temporal logic. Many safety-critical software systems are being written in ANSI-C. Therefore, there exist a number of software model checker tools which are used  to verify code conducted a comparison and evaluation of existing model checking tools for C code. This comparison showed that the SPIN model checker, a general-purpose model checker, uses an efficient algorithm to reduce the state explosion problem.</p><h2 id="safety-analysis-combining-stpa-and-smc"><a class="header-anchor" href="#safety-analysis-combining-stpa-and-smc">🌊</a>Safety Analysis Combining STPA and SMC</h2><p>This method can derive software safety requirements at the system level and to verify them at the code level. This approach is divided into three kinds of activities:</p><ol>  <li>Deriving software safety requirements using STPA;</li>  <li>Formalizing of safety requirements and</li>  <li>Verifying software against its safety requirements at the code level.</li></ol><p>The structure is like this:</p><p><img src="http://www.meng.uno/images/software_verification.png" alt="Software Verification"></p><h2 id="fault-tree-analysis-fta"><a class="header-anchor" href="#fault-tree-analysis-fta">🌊</a>Fault Tree Analysis (FTA)</h2><p>FTA is a top-down, deductive failure analysis in which an undesired state of a system is analyzed using Boolean logic to combine a series of lower-level events. The propose is to understand how systems can fail, to identify the best ways to reduce risk  or to determine event rates of a safety accident or a particular system level failure.</p><p>This method can divide into 5 steps:</p><ol>  <li>Define the undesired event to study;</li>  <li>Obtain an understanding of the system;</li>  <li>Construct the fault tree;</li>  <li>Evaluate the fault tree;</li>  <li>Control the hazards identified.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;network-function-virtualization-nfv&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#network-function-virtualization-nfv&quot;&gt;🌊&lt;/a&gt;Network Function Vir
      
    
    </summary>
    
      <category term="Software Verification" scheme="http://meng.uno/categories/Software-Verification/"/>
    
    
      <category term="Software Verification" scheme="http://meng.uno/tags/Software-Verification/"/>
    
  </entry>
  
  <entry>
    <title>Some Throughts on Big Graphs Research</title>
    <link href="http://meng.uno/posts/52d6fa6b/"/>
    <id>http://meng.uno/posts/52d6fa6b/</id>
    <published>2017-12-08T13:26:46.000Z</published>
    <updated>2018-02-11T14:04:49.149Z</updated>
    
    <content type="html"><![CDATA[<h2 id="redesign-the-frameworks-used-for-big-graphs-mining"><a class="header-anchor" href="#redesign-the-frameworks-used-for-big-graphs-mining">🌊</a>Redesign the Frameworks Used for Big-Graphs Mining.</h2><p>Nowadays, researches on Big-graphs are only using those open source distributed systems such as Hadoop, Spark and so on. I don’t mean they are bad, but I think we could redesign some new frameworks based on they. If I do this research, I will first redesign  some data structure such as Inverted files for those distributed systems.</p><h2 id="mine-frequent-subgraphs-by-adding-some-parameters"><a class="header-anchor" href="#mine-frequent-subgraphs-by-adding-some-parameters">🌊</a>Mine Frequent Subgraphs by Adding Some Parameters.</h2><p>Mining frequent subgraphs is very crucial to SNS network graphs. In these networks, a user is often associated with location information (e.g., positions of her hometown and check-ins). These networks are collectively known as spatial graphs. However,  it isn’t mean those who are in a same location are in the same subgraph. For example, if I am in Singapore, I may also care China more Singapore, so I belong to the subgraph of China instead of others. In this circumstance, we need add more parameters  to our mining methods to get the right mining result.</p><h2 id="temporal-and-streaming-systems-for-dynamic-graphs"><a class="header-anchor" href="#temporal-and-streaming-systems-for-dynamic-graphs">🌊</a>Temporal and Streaming Systems for Dynamic Graphs</h2><p>Despite the plurality of graph systems, majority of them support processing static graphs only. In reality, however, many graph applications today need to handle changes to the graphs over time. Many challenges remain in this sub-field. For example, most  temporal and streaming graph systems cannot efficiently handle frequent vertex and edge deletions, as deletions often break the nice properties that enable incremental computation in these systems. Certainly, maybe I will do some research in this area  to support efficient analysis of dynamic graphs.</p><h2 id="data-structure-for-storing-the-big-graphs"><a class="header-anchor" href="#data-structure-for-storing-the-big-graphs">🌊</a>Data Structure for Storing the Big-Graphs</h2><p>Most graph analysis systems assume that the graph is already generated in the requisite format for ingesting into the system. In practice, however, usually the graphs must first be extracted from non-graph data stores using a pre-processing step that  generates the lists of nodes and edges. In many cases, graph analysis may form one component of a deep analysis pipeline, that also involves non-graph analytics operations; in such cases also, we may need to convert the data among different representations.  The costs of such pre-processing or conversion steps can be significant, and in some cases, the cost of extracting graphs may dominate the actual computation that follows (e.g., if edges are generated by computing similarities between node attributes).</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;redesign-the-frameworks-used-for-big-graphs-mining&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#redesign-the-frameworks-used-for-big-graphs-mini
      
    
    </summary>
    
      <category term="Big Graphs" scheme="http://meng.uno/categories/Big-Graphs/"/>
    
    
      <category term="Big Graphs" scheme="http://meng.uno/tags/Big-Graphs/"/>
    
  </entry>
  
  <entry>
    <title>浅析</title>
    <link href="http://meng.uno/posts/c1dd0093/"/>
    <id>http://meng.uno/posts/c1dd0093/</id>
    <published>2017-11-18T13:07:15.000Z</published>
    <updated>2018-02-11T13:17:54.393Z</updated>
    
    <content type="html"><![CDATA[<h1>VR/AR介绍</h1><p>虚拟现实技术（VR）是一种可以创建和体验虚拟世界的计算机仿真系统，它利用计算机生成一种模拟环境，是一种多源信息融合的、交互式的三维动态视景和实体行为的系统仿真使用户沉浸到该环境中。</p><p>VR是仿真技术的一个重要方向，是仿真技术与计算机图形学人机接口技术多媒体技术传感技术网络技术等多种技术的集合，是一门富有挑战性的交叉技术前沿学科和研究领域。VR主要包括模拟环境、感知、自然技能和传感设备等方面。模拟环境是由计算机生成的、实时动态的三维立体逼真图像。感知是指理想的VR应该具有一切人所具有的感知。除计算机图形技术所生成的视觉感知外，还有听觉、触觉、力觉、运动等感知，甚至还包括嗅觉和味觉等，也称为多感知。自然技能是指人的头部转动，眼睛、手势、或其他人体行为动作，由计算机来处理与参与者的动作相适应的数据，并对用户的输入作出实时响应，并分别反馈到用户的五官。传感设备是指三维交互设备。</p><p>而增强现实技术（AR）是一种实时地计算摄影机影像的位置及角度并加上相应图像、视频、3D模型的技术，这种技术的目标是在屏幕上把虚拟世界套在现实世界并进行互动。AR最早是于1990年提出的，之后随着电子产品运算能力的提升，其应用也是用途愈广。尤其是近两年来AR技术可谓是备受关注！现在的市场中由于可穿戴设备的出现，以及手机性能的进一步提升，AR技术也是持续升温。</p><p>AR是一种将真实世界信息和虚拟世界信息“无缝”集成的新技术，是把原本在现实世界的一定时间空间范围内很难体验到的实体信息（视觉信息,声音,味道,触觉等），通过电脑等科学技术，模拟仿真后再叠加，将虚拟的信息应用到真实世界，被人类感官所感知，从而达到超越现实的感官体验。真实的环境和虚拟的物体实时地叠加到了同一个画面或空间同时存在。不仅展现了真实世界的信息,而且将虚拟的信息同时显示出来，两种信息相互补充、叠加。在视觉化的AR实现中，用户利用头盔显示器，把真实世界与电脑图形多重合成在一起，便可以看到真实的世界围绕着它。</p><p>在接下来的叙述中，我将在第二部分分析VR/AR对于医生角度的应用，第三部分分析在病人角度的应用，第四部分是在医疗教育方面的应用，其他相关的研究我将在第五部分陈述，现阶段研究的不足将在第六部分分析，最后两部分是一点我的个人感想和本文结论。</p><h1>对于医生的应用</h1><h2 id="模拟手术"><a class="header-anchor" href="#模拟手术">🌊</a>模拟手术</h2><p>虚拟手术作为一个虚拟现实领域的重要研究方向，正成为科学家们的关注焦点。它是集现代医学、计算机图形学、计算机视觉、生物力学、材料学、机器人等诸多学科为一体的新型交叉研究领域。医生可以通过虚拟现实技术来模拟、指导医学手术所涉及的各种过程，包括手术计划制定、手术排练演习、手术教学、手术技能训练、术中引导手术、术后康复等。</p><p>80%的手术失误是人为因素引起的，因此手术训练极其重要。以前医生手术训练都只能在病人身上做，所以经常说有名的医生都是踏过多少人的血液才走过来的，这样付出的代价实在太大。在VR/AR技术飞速发展并广泛应用的今天，模拟手术在医生训练过程中非常重要的应用就是，医生可以在不接触实际病人的前提下模拟各种手术场景，模拟的场景可能比真实遇到的情况还要多，这样模拟训练的效果实际上就超过了真实的练刀。一方面，模拟训练可以在任何地方、任何时间反复模拟，深化印象，这个优点在实际病人身上是不可能也不允许做的，因为病人的资源是有限的。模拟手术就是把每个可能的手术场景都呈现在你的面前，每个人得到的机会都是无穷次的，医生可以反复看、反复练，并且对病人没有伤害。如果从这点来讲，一个经过模拟训练的医生再给病人做手术时，他的学习周期就会很短很短，这个实际上是对病人利益的极大保护。当前模拟手术在中国也已经有了，像强生公司、科汇公司的外科培训中心已经有腹腔镜的模拟，也有介入手术的模拟，当然还有达芬奇手术的模拟，但这种模拟还不是真实场景的，也就是说未来在VR技术里面，可以完全进入到手术室，然后在真实的场景里面进行模拟手术，那就更加接近于现实。</p><p>大家应该知道在体育运动里，比如足球、体操，都有慢动作回放，有动作捕捉去分析运动员动作是否做到位了，失误的原因是什么。这个技术同样可以用到外科手术里。通过运动捕捉或者手势识别和VR技术，在外科大夫进行学习或尝试以后，可以复原手术，看到手术的过程，如果有失误，原因是什么。这种回放能极大的帮助医生改进他们的技术。</p><h2 id="远程干预-指导"><a class="header-anchor" href="#远程干预-指导">🌊</a>远程干预/指导</h2><p>世界上首例实验性远程手术已经在1999年成功地进行。虚拟手术与远程干预将能够使在手术室中的外科医生能实时地获得远程专家的交互式会诊。交互工具可以使顾问医生把靶点投影于患者身上来帮助指导主刀外科医生的操作，甚或通过遥控帮助操纵仪器。这能使专家们技能的发挥不受空间距离的限制。如果VR技术在这一方面继续发展的话，可能会出现以后医生不用到医院上班，无论在任何地方都可以实施手术。缓解了当今医院基础设施不足的现状。同时，有些相同的手术，某专家可以通过VR技术远程指导，这样就打破了一个时间段只能进行一项手术的限制，大大提高医疗的效率。</p><h2 id="精确操作"><a class="header-anchor" href="#精确操作">🌊</a>精确操作</h2><p>如上文已经提到的达芬奇机器人，还有很多像这种医生能够远程控制其操作的手术设备，通过使用这些设备，能够在实际的手术中，避免因为医生长时间工作造成的身体情况变化而带来的手术质量参差不起的问题（例如某医生一天手术过多，太过劳累，这样后来的手术必然会质量下降）。如果使用了VR技术，远程控制诸如达芬奇机器人一样的手术设备，不管医生自己身体状况如何，只要控制到位，那些手术设备是不会因为工作时间长就产生不适的，这样也能保证手术质量优秀。同时，一个医生只有两只手，所以有些手术需要助手，而使用那些设备之后，一个医生可以控制很多只手，这样就能够协调统一，对手术质量有百利而无一害。</p><h2 id="协助执行日常任务"><a class="header-anchor" href="#协助执行日常任务">🌊</a>协助执行日常任务</h2><p>医生需要经常查看病人的病情，而在现在的医疗设施情况下，对于一个医生，可能得通过“查房”一间一间地去病房里与病人交流，而且交流记录难免会记忆不清或者甚至搞混了。有了VR技术虚拟医生协助真实医生实现这些复杂的工作，效率必然会大大提高。医生甚至都不用出办公室，只需要观察相应的VR反馈就可以基本实现之前的“查房”任务。这样一来就可以大大减轻医生的负担，必然会对医生的日常工作效率产生积极的影响。这些虚拟医生与病人交流的数据可以保存用来对之后的反馈对比，当然可以用其他机器学习的方法来进行一些预测之类的计算。并且基于大数据，可能这些虚拟医生对单个病人情况的分析会比真实的医生更专业，因为医生也不是能对每个症状都了如指掌的。</p><p>有些病人（例如老人和小孩等）可能在认识自己病情上有欠缺，例如忘记吃药，每次吃多少药等，在传统的方案中，要么有专人提醒，要么在显眼的地方做上标记提醒，总之效率不高或者费时费人力。当我们在某种小的设备上加上VR/AR提醒，以一个三维立体的形象的形式来提醒病人，既省时又省人力，效率相对还比较高。</p><h2 id="获得医药信息"><a class="header-anchor" href="#获得医药信息">🌊</a>获得医药信息</h2><p>医生可能不能记住每种药物的作用，以及每种药物的使用方式，假如能通过VR技术将每种药的使用信息都记录下来，通过相关的设备，让医生在给病人开药的时候头脑里能对这种药的所有情况都回顾一遍，同时还可以与几种相似的药做对比，找出最好的组合，避免偶尔的误用药。</p><h2 id="获取用户机体信息"><a class="header-anchor" href="#获取用户机体信息">🌊</a>获取用户机体信息</h2><p>在现在正常的医学治疗步骤中，医生想要检查病人某部位的病变情况，只能使用诸如CT、CTA等基于切片的二维人体部位图像，这种图像相对来讲专业要求度较高，对人体伤害较大，同时准确性也不能得到保障。将VR应用于此种工作，我们可以得到人体某部位的三维立体真实大小的模型，这样一来医生的判断会更加准确而且这种图识别起来相对不需要那么复杂的专业知识。</p><h2 id="血管照明-辅助手术"><a class="header-anchor" href="#血管照明-辅助手术">🌊</a>血管照明（辅助手术）</h2><p>这算是一种比较专业地说法，和辅助手术概念比较类似，简而言之就是通过PC应用软件帮助医务人员在手术中能够查看隐藏的血管。此前，心脏病专家借助谷歌眼镜疏通了一位49岁男患者阻塞的右冠状动脉。冠状动脉成像（CTA）和三维数据呈现在智能眼镜的显示器上，根据这些实时放大图像，医生可以方便地将血液导流到动脉。不同于传统手术，AR的介入就像一个”AR放大镜”，直接放大手术创口，患者的彩超、MRI、CT图像等将直接映在手术部位，让医生能够看到肉眼难以分辨的细微情况，获得“透视”功能，大大提高手术操作的效率和舒适度。</p><h2 id="损伤评估"><a class="header-anchor" href="#损伤评估">🌊</a>损伤评估</h2><p>在传统的医疗实践中，如果病人就诊，医生为了确定病人病情只能通过明显的外表特征或者患者的口头表述来确定，而这样的手法往往会带来误判或者病情程度判断不清等问题，特别是那种很难表述清楚的内科疾病。运用虚拟现实技术，我们可以针对不同的疾病设定不同的诊断场景，让用户在特定场景中将应该表现出来的病症全部表现出来，这样一来有利于增大诊断的准确性。</p><h1>对于病人的应用</h1><h2 id="智能康复系统"><a class="header-anchor" href="#智能康复系统">🌊</a>智能康复系统</h2><p>基于Kinnect等运动捕捉设备所设计出的很多结合VR/AR技术的智能康复系统，这些系统能够很好的帮助病人进行相应的康复训练。在之前我所看到的一个例子中， 病人只需要带上相应的可穿戴传感器就可以将自己的动作传到相应的计算机进而在计算机显示屏上显示用户的动作以及在显示屏中出现的影像之间的交互。在我所看到的实例中，他们只是能做到在场景中增加一些物体（例如长方体等），让病人在虚拟的环境中模拟各种体力锻炼。这样一来，我们就不需要实际花费很多的金钱来布置训练场景，而且VR所形成的场景还可以很轻易得更换，不用为维护实际的场景而花费很多精力。</p><p>调查显示，以色列的研究人员开发出一套“电脑辅助康复环境系统”，通过模拟划船、打球、慢跑等各种情景，来帮助残障人士改善平衡能力，恢复身体的运动机能。足部神经受损的博罗夫斯基就在接受“电脑辅助康复环境系统”的治疗。现在系统模拟的是“海上冲浪”，大屏幕上显示的是冲浪的场景，博罗夫斯基脚下的踏板会根据设置好的程序相应的摇动，他必须通过调节身体的姿势来保持平衡。同时，连接在他身上的传感器还能把各种身体体征数据传回电脑，以便医生调整训练强度和难度。丰富的影像和新颖的训练方式，让患者像在做游戏一样，更能提高患者本身的主动性和积极性，加强训练效果，缩短住院时间，加快康复过程。无论从时间、人力还是金钱上讲，VR/AR技术的使用必然会在康复系统上带来一场新的革命。</p><h2 id="帮助治疗某些疾病"><a class="header-anchor" href="#帮助治疗某些疾病">🌊</a>帮助治疗某些疾病</h2><p>有些疾病（例如某种危险情况恐惧症），需要病人在再临其境时才可能克服，但如果让患者在现实中的危险环境再次体验，可能会有安全性问题，而且相同的场景很难真实地完美还原。如果使用VR技术，就可以在基本不耗费后期资源的情况下反复体验相同的场景，在现实中，用户也不会有任何的伤害，而且可调节范围比较广，毕竟是电脑虚拟程序，恐怖程度、危险指数等都可以随心所欲地变化，与现实相比真的是有巨大的优势。</p><p>截肢者中最常见的烦恼就是幻肢痛——患者感到被切断的肢体仍在，且在该处发生疼痛。疼痛多在断肢的远端出现，疼痛性质有多种，如电击、切割、撕裂或烧伤等。对幻肢痛的发生原理，目前尚无统一意见，西医亦乏有效疗法。很有可能大脑对肢体仍然存有意识，即使它已经不存在了。尽管这样的问题发生存在一定的频率，但至今没有一种有效地方法适用于所有的截肢者。在使用VR技术治疗过程中研究人员使用头戴式耳机和一个传感器将患者带入虚拟的世界，患者可以感受到自己的肢体还在，并可以控制虚拟肢体从事某项工作或游戏。这样就能很好的解决这一疾病，有研究表明对这种疾病VR治疗作用十分显著。</p><p>VR对创伤后应激障碍也同样有很好的治疗作用。在对从伊拉克和阿富汗返回患有创伤后应激障碍的士兵所进行的VR治疗过程中，VR设备会将会把士兵带回中东的一个小镇，让他们再次“经历”战争和死亡，使其在适当的压力下逐渐学会处理，控制自己的情绪。虽然很多人对于这种治疗方式存在争议，支持者说使用虚拟现实技术与其他的治疗方式相结合会达到非常很理想的治疗效果。</p><p>VR可以帮助治疗的心理障碍并不仅仅局限于创伤后应激障碍。还有些心理问题（例如自闭症、害羞等），是一个杀人于无形的凶手，目前呈现向低龄化蔓延的趋势。虚拟现实可能也会成为这个问题的解决方案之一。如果有人能既为患者保守秘密有能很好的与用户交流，对治疗这些疾病肯定是有很大的好处的，但是现实中不可能存在这样的一个完美的“倾听者”，即使有，价钱也是不菲的。如果VR/AR能够起到这样的作用那必然会是又一大医学进展。</p><p>很多心理治疗师和精神专家常用的方式是通过在治疗过程中去引导患者回忆或者想象场景，以此来达到治疗的目的。VR的好处在于它能够让这种环境场景变得可视化和标准化。因此在心理治疗领域，比如说创伤应急、障碍症、恐惧症、自闭症、恐高症、幽闭症、公开演讲恐惧症、密集恐惧症等都可以通过VR技术的环境再现以达到治疗的目的。再比如说，焦虑症、注意力缺陷以及精神分裂症也可以通过VR来虚拟特定的人或是特效来改善相关的一些症状。</p><h2 id="虚拟问诊"><a class="header-anchor" href="#虚拟问诊">🌊</a>虚拟问诊</h2><p>在国内外，好的医生都是十分欠缺的，然而相同的疾病缺屡见不鲜，可以说很多小病完全可以在还是在早期的时候就通过及时就诊可以避免出现的，在之前的这么多年，很多搜索引擎也都在做相关的疾病问答系统，可悲的是大多受金钱诱惑，为金钱奴役，不干正事反而虚假宣传。VR技术的出现，必然在医疗问答方面带来很大的革新，患者可以通过VR设备与虚拟的医生直接进行交谈，不仅避免了文字表述不清的问题，而且也避免受网页上那么多的虚假广告的诱惑，更是给人一种如见真实医生的舒适的感觉，而且VR医生会比现实中医生更有耐心，更专职为你一人服务。</p><h2 id="缓解疼痛"><a class="header-anchor" href="#缓解疼痛">🌊</a>缓解疼痛</h2><p>读到这样一个故事，“2017年年初，美国的一位脂肪瘤患者开刀时，因为平时血压过高，医生只为她注射了少量镇静剂。医生为她戴上了VR设备，在手术过程中患者一直在玩一个埃及探险的游戏。手术过程中，监测仪器显示患者的一切生命体征参数，都非常平稳。在整个手术过程中，患者的血压不仅没有提升，反而下降了。手术完成后，患者表示她几乎没有感到疼痛。”我觉得有了这个实例，我不需要过多的解释，已经能够很好的说明VR在缓解病人疼痛上的作用了吧。无独有偶，接受重度烧伤治疗是一段痛苦的经历。伤口清理和绷带变化都会引发疼痛，即便使用吗啡等麻醉药物，仍有86%的病人会感到或多或少的疼痛，并且大量使用还会对身体造成一定伤害。1996年，华盛顿大学人机界面技术实验室（HITLab）研究人员发现孩子们在玩游戏时是越来越全神贯注后，想出了为治疗烧伤提供VR游戏，假设沉浸在游戏中会为病人带来积极疗效，他们会更专注于游戏，而减轻对疼痛的注意力。据调查，社会行为医学2011年发布的调查展示了浸入式游戏作为止痛剂的强大作用。并且现在这项技术已经被美国军方使用，帮助受伤的士兵接受治疗。</p><p>当然在平时的生活中，VR也是能够起到很好的。当我们沉浸在一个虚拟的美好的游戏环境中时，我们可以忘记暂时的伤痛，这是一个常识，也是VR能在这一方面得到巨大应用的一个原因。</p><h2 id="戒瘾"><a class="header-anchor" href="#戒瘾">🌊</a>戒瘾</h2><p>当今社会的另一大“疾病”，不是身体上的，更大多数是心理上的，例如网瘾、烟瘾甚至毒瘾。在以前的戒瘾所，采取的唯一方式就是物理上的隔离，在VR技术快速发展的今天，我们完全可以通过VR将患者的精力集中到正确的角度上，不仅可以将效果提高，而且省时省力。查阅资料发现，我国相关法律已经开始涉足使用VR进行戒毒活动了。</p><p>当然，其实在这里VR可能成为一把双刃剑，可能能将用户的注意力从其他那些及其不正常的生活习惯中解救出来，但是可能又会让用户陷入“VR瘾”中，现在我们还无法证明这个“VR瘾”和其他的“网瘾”、“烟瘾”等孰轻孰重，所以此法需要慎重使用。</p><h2 id="vr-ar与视觉结合"><a class="header-anchor" href="#vr-ar与视觉结合">🌊</a>VR/AR与视觉结合</h2><p>VR本身就是可以直接作用于人的视觉，视觉治疗方案与VR技术很容易匹配。现在升学、工作压力，导致大部分人都有眼部疾病或视觉障碍。VR在治疗眼部的疾病，比如儿童的斜视、近视以及立体视力的缺陷上有很好的效果。虽然在不久之前就有对近视等疾病的物理治疗方案，但是大多费时费力，而且没有听说有什么可观的进展。但是VR/AR的到来就完全不同了，大大提高了效率而且效果明显提高。同时可以制作一种VR设备用来缓解疲劳的眼球，当我们工作或者学习很长时间之后，可以用它来对眼球“做做操”。虽然我们都明白久看之后需要远眺一会，或者看看绿色的动西，但是迫于现实，我们可能很难做到（例如哈尔滨的冬天没有绿树。），但是这一切都可以用VR设备来实现。</p><h2 id="缓解术前压力"><a class="header-anchor" href="#缓解术前压力">🌊</a>缓解术前压力</h2><p>接受手术的患者到了陌生环境，难免会有应激反应。他们可能觉得在手术室外等候，麻药还没有生效的时候，他们有强烈的紧张感和恐惧感，甚至有了濒临死亡的体验。现在想一想，这种体验对每个人来说都是非常不好的。虽然术前医生和患者有充足时间做沟通，但是单纯靠用嘴讲、用图、甚至手画示意图，都是一件非常累的事情，因为手术的复杂性和专业性，包括一些专有名词，对患者来说真的是选择性记忆，他们有可能听了上半句，就忘了下半句，甚至把最主要的东西漏掉，支离破碎地理会医生的意思，即使再出色的现场描述也比不过真实环境的真实还原。如果运用VR技术，在手术开始前给患者放一段容易让他放松的内容，让他在进手术室之前，大致了解手术室和手术过程是什么样子的，就能消除他对未知环境的恐惧。我相信这对患者来说是人文的关怀，这在提高医学服务水平里面可以得到有效的应用。</p><h2 id="隐私保护"><a class="header-anchor" href="#隐私保护">🌊</a>隐私保护</h2><p>现在我国的搜索引擎在医疗上很不受人看好的一个主要原因就是其泄露用户隐私的现象太严重，所以很少有人真正愿意相信搜出来的东西。加入VR/AR元素进入我们的生活，我们可以与虚拟形象进行完全不用担心泄露隐私的情况下的交流。</p><h1>医疗教育的应用</h1><h2 id="手术教学"><a class="header-anchor" href="#手术教学">🌊</a>手术教学</h2><p>伴随互联网的继续发展，如果医学手术教育能够通过VR/AR技术实现，至少在解剖学课程上可以实现意想不到的效果。在相关的设计中，例如心脏的VR模型可以做的特别逼真，让学生可以把心脏托在手里面，随时都可以转圈、打开肌肉看，血流都可以看，这就可以大大缩短医学生的学习周期（而且可以打破时间、地点的限制来学习）。尤其对于外科医生来讲，外科医生很重要的工作就是解剖。局部解剖以前医学生只能通过书本来学习，看到的都是平面的东西，脑子里很少有立体的概念，无法产生互动，进而需要很长的时间来消化知识，甚至很多时候大多数医学生并不能形成很好的立体的模型在脑子中，所以这就是很多庸医出现的根源。VR/AR技术的出现使得医学生在真正操刀做手术之前，就能获得局部解剖的经验，能够有效提高手术的安全性和成功率。而如果医学生通过VR/AR技术实现解剖模拟，学习速度会大大加快，同时降低学习的成本。当然AR在医学教育的应用并不仅仅是在解剖学上面，在生理生化方面都是可以通过VR技术模拟场景的。如果我们可以获得很形象的信息的话，对医生的知识拓展和学习速度都会急剧加快。</p><p>据早在1993年的统计里，全球市场上出现的805个虚拟现实应用系统中就有49个应用于医学，主要应用在虚拟人体、医学图像学、药物分子研究等方面。大家都知道，在传统的医学教育中，如人体标本解剖和各种手术实训，大都受到标本、场地等限制，实训费用高昂。而且医学生不能通过反复在病人身上进行操作来提高临床实践能力、临床实践具有较大风险。而VR的直观和体验特性却可以很好地解决以上问题。目前在医学教育上应用较多的有虚拟人体解剖学、手术训练教学、虚拟实验室、虚拟医院等。类别也从内容、软件到硬件，甚至还有从事交叉研发的，比如，Oculus涉足了内容、硬件和软件等方面，微软HoloLens则是软硬件结合等。</p><p>利用VR技术来做外科手术培训另一个重要的特点是，大大节约了成本。在外科领域，医疗知识每隔6~8年就要翻一番，所以外科大夫在专业教育上尤其是在继续教育上需要不断追求对新技术的学习，这种新技术的学习成本是高昂的，方法是复杂的。而VR技术可以在某种程度上帮助大家学习或者熟悉这种新技术。</p><h2 id="教学用具改革"><a class="header-anchor" href="#教学用具改革">🌊</a>教学用具改革</h2><p>传统解剖学挂图和大部分多媒体课件上应用的教学图片都是二维模式，缺少直观的、立体的体验，造成了解剖学习的困难。模型、标本虽具有立体结构，但形式单一、僵硬，不能满足多角度、多层次的教学和实训需求。而虚拟人体解剖图，可在显示人体组织器官解剖结构的同时，显示其断面解剖结构，并可以任意旋转，提供器官或结构在人体空间中的准确定位、三维测量数据和立体图像。此前，美国加州健康科学西部大学（波莫纳）开设了一个虚拟现实学习中心，该中心拥有四种VR技术、zSpace显示屏、Anatomage虚拟解剖台、Oculus Rift和iPad上的斯坦福大学解剖模型，旨在帮助学生利用VR学习牙科、骨科、兽医、物理治疗和护理等知识。</p><h1>相关研究进展</h1><p>尽管业内不少人将2016/2017年称之为“VR发展元年”，若追溯VR发展的历史，早在1932年，Aldous Huxley在其推出的科幻小说《美丽新世界》中即对虚拟现实概念进行了描述。而直到1968年计算机科学家Ivan Sutherland开发了“达摩克利斯之剑”，使得VR设备具备了基本的雏形。随后，VR设备开始应用在一些专精领域，如宇航员的训练活动中。直到1987年，任天堂推出了Famicom3D System眼镜之后，Virtual Boy等设备将VR概念正式带入民用领域。而随着近些年来，视频技术以及移动硬件领域的不断发展，民用VR平台也根据使用者的不同呈现出了分化的状态，包括以游戏平台作为计算平台的专属VR平台、以PC作为计算平台的综合体感VR平台、以及以移动设备作为计算与显示窗口的VR眼镜。</p><p>硬件厂商方面，在对各类VR设备的研发加大投入力度，VR头盔，眼镜，以及附属的传感器设备在过去的一年中纷纷涌现。</p><p>视频平台方面，除了传统视频上传方式外，各大视频平台均开放了“全景视频”的上传接口，用于鼓励视频制作团队为平台增加全景类视频的内容量。但由于目前全景视频的制作与存储成本非常高，能够完成全景视频录制与制作的团队并不多，所以目前多数存留在VR平台端的视频实际为3D的“沉浸式”的视频内容。除此之外，部分平台采取聚合方式，将目前市面上鲜见的VR视频内容加以收集整理，集中呈现在用户面前。而技术方案提供方虽然距离用户较远，却是目前推进整个VR行业发展的最为重要的一方，技术方案将成型的算法，图像引擎等输出给视频平台或硬件厂商，以增强用户在两方的使用体感。</p><h1>存在的问题</h1><p>VR在医疗应用方面，相比用作练习、模拟来讲还是很欠缺的。AR in China 最近期的统计，如今国内从事AR应用开发的企业有200多家，其中80%倾向和已开发游戏类应用，剩余的也多偏向影视、购物等生活类应用。而专注在医健领域的应用，根据公开信息推测目前不超过10家。而在海外，据 CBInsights、CrunchBase、AngelList 网站的综合数据查询，目前有30家左右初创公司正专注在AR医疗应用领域。其中9家初创公司获得融资，总融资额达5.52亿美元，获投率达到了30%。AR在医健领域的应用还处于蓝海探索期。</p><p>纯粹的VR在医疗领域还是有很大欠缺的。在现在的VR辅助手术中，医生只能利用AR技术的一些优势，并不能完全交给VR来做，还需要加上传统方法，一边做手术一边对着电脑屏幕比对着看。</p><p>VR用于治疗方式的缺点是患者的想象和回忆难于把控，所以效果很难评估。</p><p>而且现在的VR在显示和精确度方面还是有很大的提升空间的。特别实在医疗领域，准确度至关重要。</p><p>对于医生而言，还有适应问题，这些新技术对于有经验的外科医生及其他专业医护人员来讲，“适应”是最大的挑战。</p><p>虽然VR技术在医学上应用后能够减少现实中的直接的隐私泄露，但是如果VR数据泄露将导致比现在信息泄露更严重的后果，毕竟VR可以记录整个人的信息而不仅仅是文字信息。</p><p>VR的一个很大的问题就是基础硬件设备的体验问题。如果要让医生或者被治疗者长时间呆在虚拟环境中，很容易产生一些生理不适的症状。</p><p>虽然说VR在医学上的应用很丰富，尤其是在心理治疗方面颇有成效。但是考虑到治疗的针对性和VR内容制作难度等各种问题，这种辅助治疗方法在现阶段很难进行大规模的应用。</p><p>医疗行业需要的是严谨的专业知识和态度，所以对于内容的要求也就相应的提高。如果要开发出一套模拟的人体用来交互培训，需要的是具备医学加上合理内容开发的复合型人才。而且考虑到医学诊断的高精度要求，许多器官或者组织的建模都要非常精细，不能有一丝的马虎，而现在的VR医疗应用更多的还是停留在头戴式VR视频方面。</p><p>其他要面临的困难还有：治疗和评估标准没有相关的评估标准、应用系统的交互性和易用性还不够完美。虚拟现实系统设备及其外设性价比例失衡，设备相对比较昂贵,致使大规模应用的时机还不够成熟。</p><h1>个人感想</h1><p>虽然最近VR/AR技术越来越火，相关研究也相当多，涉及的行业也是相当全面，但是在现在的情况下，绝大多数成就集中在仿真、游戏上，在医疗领域还是存在很多问题，还有很长的路要走。但希望不要又只能火两年而已。</p><p>在医疗工作的各个领域推广VR技术的应用，可以节省大量的时间与资源，从而更快捷、更安全的挽救生命。国际上由于虚拟现实技术的发展而发展起来的医疗电子设备正以每年10%的速度增长。随着计算机、多媒体技术、传感技术、通讯技术的发展以及各国对虚拟现实技术的日益重视，相信这一技术在医学上的应用在将来会取得更大的发展，它的发展前景非常诱人。可以预言，虚拟现实技术在医学中更广泛、更深入的应用将会给传统医疗带来革命性的变化。</p><p>在我们国家，新一轮的医疗体制改革如火如荼，传统的医疗体系已经岌岌可危，惟有引入新的信息技术才能适应时代要求。而且，新的医疗体制改革凸现了“社区医疗”的概念。“社区医疗”在全球医疗信息化中对应其第三个阶段，区域医疗信息网络（GMIS），是继医院管理系统（HMIS）、临床医疗信息系统（CIS）之后的阶段。美国所有医疗机构均实现了信息化管理，而中国尚处在初级阶段。将来中国的趋势必然是走向医疗信息化（e-Health）。为了实现这一战略目标，虚拟现实技术就是最佳的操作工具。因此，虚拟现实技术将在中国的“医改”过程中以及今后医疗事业的发展中扮演更加积极、重要的角色。</p><p>医疗VR是一个给人无限遐想的领域，它不再只存在于科幻小说爱好者的想象中，而是已经走进了临床研究者和现实生活中的医疗工作者的视野。虽然这是一个全新的领域，还不为大众所知，但是医疗VR技术是对患者的生活和医生的工作都可以产生积极影响的应用。我相信VR必将为医学领域带来一场大变革。</p><h1>结论</h1><p>VR/AR作为目前比较新潮的技术，在医学领域作用空前。其在医疗上无论从医生角度、患者角度还是医学教育角度都有着十分巨大的作用。现在相关的科学研究也发展迅速，当然也是存在很多的不足，尤其是我们国家在这方面的研究还很欠缺。在今后的一段时间内，我国的VR开发者还是应该多学习和借鉴国外的先进经验，同时保持在这方面的热情，相信在不久的将来，VR/AR定会在医学领域大大地大放异彩。</p><h1>参考文献</h1><ol>  <li>刘建武, 叶志前, 陆金芳. 虚拟现实在医学中的应用进展[J]. 国际生物医学工程杂志, 2000(6):321-324.</li>  <li>王海舜, 潘利庆. 虚拟现实技术在医学中的应用[J]. 计算机应用, 1998, 22(6):49-54.</li>  <li>刘聚卑, 庄天戈. 虚拟现实在医学上的应用[J]. 北京生物医学工程, 2000, 19(1):47-54.</li>  <li>谭珂, 郭光友, 王勇军,等. 虚拟现实技术在医学手术仿真训练中的应用[J]. 解放军医学院学报, 2002, 23(1):77-79.</li>  <li>范立冬, 李曙光, 张治刚. 虚拟现实技术在医学训练中的应用[J]. 创伤外科杂志, 2008, 10(6):568-570.</li>  <li>谭海珠, 杨棉华, 陈丹芸,等. 虚拟现实技术在医学中的发展与应用[J]. 中华医学教育探索杂志, 2005, 4(6):410-412.</li>  <li>张晗 虚拟现实技术在医学教育中的应用探讨[J]. 西北医学教育, 2010, 18(1):48-51.</li>  <li>孙秀伟, 阎丽, 李彦锋. 虚拟现实技术(VR)在医疗中的应用展望[J]. 临床医学工程, 2007(5):17-20.</li>  <li>吴奇, 程薇曦. 虚拟现实技术在医学手术中的实现与应用[J]. 重庆医学, 2008, 37(21):2489-2491.</li>  <li>李舫, 宋志坚. HMD式光学穿透技术在医学增强现实中的研究进展[J]. 中国数字医学, 2012, 07(1):14-20.</li>  <li>孙国臣, 余新光, 陈晓雷,等. 基于多模态功能神经导航的虚拟现实及增强现实技术在神经外科教学中的应用[J]. 中国医学教育技术, 2015(1):66-69.</li>  <li>李潜. 增强现实技术为医学教育开拓无限未来[J]. 电脑知识与技术, 2012, 08(2):481-482.</li>  <li>张军毅. 医学增强现实建模及可视化研究[D]. 首都医科大学, 2008.</li>  <li>赵娜, 杨谊平. 增强现实技术与手术模拟[J]. 中华医学丛刊, 2004(4):58-59.</li>  <li>Wang S, Parsons M, Stonemclean J, et al. Augmented Reality as a Telemedicine Platform for Remote Procedural Training.[J]. Sensors, 2017, 17(10):2294.</li>  <li>Noll C, Jan U V, Raap U, et al. Mobile Augmented Reality as a Feature for Self-Oriented, Blended Learning in Medicine: Randomized Controlled Trial[J]. Jmir Mhealth &amp; Uhealth, 2017, 5(9):e139.</li>  <li>Mero M, Susin A, Aplicada D M. Deformable 3D Objects for a VR medical application[J]. 2007.</li>  <li>Crossan A, Brewster S, Reid S, et al. Multi-session VR Medical Training: The HOPS Simulator[J]. People and Computers XVI - Memorable Yet Invisible, 2002:213–226.</li>  <li>Bezerra A. Evaluation of VR medical training applications under the focus of professionals of the health area[C]// ACM Symposium on Applied Computing. ACM, 2009:821-825.</li>  <li>JLM Vazquez, BK Wiederhold, I Miller, et al. Virtual Reality Assisted Anesthesia (VRAA) during Upper Gastrointestinal Endoscopy: Report of 115 Cases— Analysis of Physiological Responses, 2017</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;VR/AR介绍&lt;/h1&gt;
&lt;p&gt;虚拟现实技术（VR）是一种可以创建和体验虚拟世界的计算机仿真系统，它利用计算机生成一种模拟环境，是一种多源信息融合的、交互式的三维动态视景和实体行为的系统仿真使用户沉浸到该环境中。&lt;/p&gt;
&lt;p&gt;VR是仿真技术的一个重要方向，是仿真技术与计
      
    
    </summary>
    
      <category term="人机交互" scheme="http://meng.uno/categories/%E4%BA%BA%E6%9C%BA%E4%BA%A4%E4%BA%92/"/>
    
      <category term="AR" scheme="http://meng.uno/categories/%E4%BA%BA%E6%9C%BA%E4%BA%A4%E4%BA%92/AR/"/>
    
      <category term="VR" scheme="http://meng.uno/categories/%E4%BA%BA%E6%9C%BA%E4%BA%A4%E4%BA%92/AR/VR/"/>
    
    
      <category term="VR" scheme="http://meng.uno/tags/VR/"/>
    
      <category term="AR" scheme="http://meng.uno/tags/AR/"/>
    
      <category term="医疗" scheme="http://meng.uno/tags/%E5%8C%BB%E7%96%97/"/>
    
  </entry>
  
  <entry>
    <title>中文分词小赛数据</title>
    <link href="http://meng.uno/posts/649482ba/"/>
    <id>http://meng.uno/posts/649482ba/</id>
    <published>2017-10-30T08:02:41.000Z</published>
    <updated>2018-02-10T13:30:35.799Z</updated>
    
    <content type="html"><![CDATA[<blockquote>  <p>纪念一下大四组织的一次中文分词小比赛。</p></blockquote><h2 id="分项数据"><a class="header-anchor" href="#分项数据">🌊</a>分项数据</h2><ul>  <li>训练数据： 链接: <a href="https://pan.baidu.com/s/1sl9JLqX" target="_blank" rel="noopener">https://pan.baidu.com/s/1sl9JLqX</a> 密码: 8am6</li>  <li>测试数据： 链接: <a href="https://pan.baidu.com/s/1eSeYhfO" target="_blank" rel="noopener">https://pan.baidu.com/s/1eSeYhfO</a> 密码: cnw2</li>  <li>相关参考答案： 链接: <a href="https://pan.baidu.com/s/1c2tVto0" target="_blank" rel="noopener">https://pan.baidu.com/s/1c2tVto0</a> 密码: 3rpt</li>  <li>有切分歧义的100个句子：链接: <a href="https://pan.baidu.com/s/1gfJ7Duz" target="_blank" rel="noopener">https://pan.baidu.com/s/1gfJ7Duz</a> 密码: 8mmx</li></ul><h2 id="所有数据"><a class="header-anchor" href="#所有数据">🌊</a>所有数据</h2><p>所有文件下载：链接: <a href="https://pan.baidu.com/s/1gfJ7Duz" target="_blank" rel="noopener">https://pan.baidu.com/s/1gfJ7Duz</a> 密码: 8mmx</p><h2 id="测试结果"><a class="header-anchor" href="#测试结果">🌊</a>测试结果</h2><p>相关PPT：<a href="http://www.meng.uno/nlpc.pdf" target="_blank" rel="noopener">http://www.meng.uno/nlpc.pdf</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
  &lt;p&gt;纪念一下大四组织的一次中文分词小比赛。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;分项数据&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#分项数据&quot;&gt;🌊&lt;/a&gt;分项数据&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;训练数据：
      
    
    </summary>
    
      <category term="AI（人工智能）" scheme="http://meng.uno/categories/AI%EF%BC%88%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%EF%BC%89/"/>
    
      <category term="NLP" scheme="http://meng.uno/categories/AI%EF%BC%88%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%EF%BC%89/NLP/"/>
    
    
      <category term="NLP" scheme="http://meng.uno/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript操作DOM</title>
    <link href="http://meng.uno/posts/2c47a986/"/>
    <id>http://meng.uno/posts/2c47a986/</id>
    <published>2017-03-05T08:03:01.000Z</published>
    <updated>2018-02-09T10:46:20.926Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建节点"><a class="header-anchor" href="#创建节点">🌊</a>创建节点</h2><p>除了可以使用<code>createElement</code>创建元素，也可以使用<code>createTextNode</code>创建文本节点。<code>document.body</code>指向的是<code>&lt;body&gt;</code>元素，<code>document.documentElement</code>则指向<code>&lt;html&gt;</code>元素。</p><figure class="highlight javascript">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="comment">//创建节点</span></span><br><span class="line">   <span class="keyword">var</span> createNode = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">   <span class="keyword">var</span> createTextNode = <span class="built_in">document</span>.createTextNode(<span class="string">"hello world"</span>);</span><br><span class="line">   createNode.appendChild(createTextNode);</span><br><span class="line">   <span class="built_in">document</span>.body.appendChild(createNode);</span><br><span class="line">   <span class="built_in">document</span>.documentElement.appendChild(createNode);</span><br></pre>      </td>    </tr>  </table></figure><h2 id="插入节点"><a class="header-anchor" href="#插入节点">🌊</a>插入节点</h2><p>可以使用appendChild，insertBefore，insertBefore接收两个参数，第一个是插入的节点，第二个是参照节点，如insertBefore(a,b)，则a会插入在b的前面</p><figure class="highlight javascript">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="comment">//插入节点</span></span><br><span class="line"> <span class="keyword">var</span> createNode = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line"><span class="keyword">var</span> createTextNode = <span class="built_in">document</span>.createTextNode(<span class="string">"hello world"</span>);</span><br><span class="line">createNode.appendChild(createTextNode);</span><br><span class="line"><span class="keyword">var</span> div1 = <span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>);</span><br><span class="line"><span class="built_in">document</span>.body.insertBefore(createNode,div1);</span><br></pre>      </td>    </tr>  </table></figure><h2 id="替换和删除元素"><a class="header-anchor" href="#替换和删除元素">🌊</a>替换和删除元素</h2><p>从replaceChild和removeChild的字面意思看，就是删除子节点，因此调用者，需要包含子节点div1，不然调用会报错。返回的节点是替换的或删除的元素，被替换/删除的元素仍然存在，但document中已经没有他们的位置了。</p><figure class="highlight javascript">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="comment">//替换元素</span></span><br><span class="line">   <span class="keyword">var</span> replaceChild = <span class="built_in">document</span>.body.replaceChild(createNode,div1);</span><br><span class="line"><span class="comment">//删除元素</span></span><br><span class="line">    <span class="keyword">var</span> removeChild = <span class="built_in">document</span>.body.removeChild(div1);</span><br></pre>      </td>    </tr>  </table></figure><h2 id="节点的属性"><a class="header-anchor" href="#节点的属性">🌊</a>节点的属性</h2><ul>  <li>firstChild:第一个子节点</li>  <li>lastChild:最后一个子节点</li>  <li>childNodes:子节点集合，获取其中子节点可</li>  <li>someNode.childNodes[index]或</li>  <li>someNode.childNodes.item(index)</li>  <li>nextSibling:下一个兄弟节点</li>  <li>previousSibling：上一个兄弟节点</li>  <li>parentNode：父节点</li></ul><figure class="highlight vbscript-html">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&lt;ul id="ul"&gt;</span><br><span class="line">&lt;li&gt;sdsssssss&lt;/li&gt;</span><br><span class="line">&lt;li&gt;qqqq&lt;/li&gt;</span><br><span class="line">&lt;li&gt;wwww&lt;/li&gt;</span><br><span class="line">&lt;li&gt;eeee&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre>      </td>    </tr>  </table></figure><figure class="highlight javascript">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="comment">//节点属性</span></span><br><span class="line">  <span class="keyword">var</span> ul = <span class="built_in">document</span>.getElementById(<span class="string">"ul"</span>);</span><br><span class="line">  <span class="keyword">var</span> firstChild = ul.firstChild;</span><br><span class="line">  <span class="built_in">console</span>.log(firstChild.innerHTML);</span><br><span class="line">  <span class="keyword">var</span> lastChild = ul.lastChild;</span><br><span class="line">  <span class="built_in">console</span>.log(lastChild.innerHTML);</span><br><span class="line">  <span class="keyword">var</span> length = ul.childNodes.length;</span><br><span class="line">  <span class="built_in">console</span>.log(length);</span><br><span class="line">  <span class="keyword">var</span> secondChild = ul.childNodes.item(<span class="number">1</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(secondChild.innerHTML);</span><br><span class="line">  <span class="keyword">var</span> forthChild = ul.childNodes.item(<span class="number">2</span>).nextSibling;</span><br><span class="line">  <span class="built_in">console</span>.log(forthChild.innerHTML);</span><br><span class="line">  <span class="keyword">var</span> thridChild = forthChild.previousSibling;</span><br><span class="line">  <span class="built_in">console</span>.log(thridChild.innerHTML);</span><br><span class="line">  <span class="keyword">var</span> parentNode = forthChild.parentNode;</span><br><span class="line">  <span class="built_in">console</span>.log(parentNode.innerHTML);</span><br></pre>      </td>    </tr>  </table></figure><h2 id="文档片段"><a class="header-anchor" href="#文档片段">🌊</a>文档片段</h2><p>好处在于减少dom的渲染次数，可以优化性能。</p><figure class="highlight javascript">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="comment">//文本片段</span></span><br><span class="line">   <span class="keyword">var</span> fragment = <span class="built_in">document</span>.createDocumentFragment();</span><br><span class="line">   <span class="keyword">var</span> ul = <span class="built_in">document</span>.getElementById(<span class="string">"ul"</span>);</span><br><span class="line">   <span class="keyword">var</span> li = <span class="literal">null</span>;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">4</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">       li = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>);</span><br><span class="line">       li.appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">"item "</span>+i));</span><br><span class="line">       fragment.appendChild(li);</span><br><span class="line">   &#125;</span><br><span class="line">   ul.appendChild(fragment);</span><br></pre>      </td>    </tr>  </table></figure><h2 id="克隆元素"><a class="header-anchor" href="#克隆元素">🌊</a>克隆元素</h2><ul>  <li>someNode.cloneNode(true):深度克隆，会复制节点及整个子节点</li>  <li>someNode.cloneNode(false):浅克隆，会复制节点，但不复制子节点</li></ul><figure class="highlight php">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="comment">//克隆</span></span><br><span class="line"><span class="keyword">var</span> <span class="keyword">clone</span> = ul.cloneNode(<span class="keyword">true</span>);</span><br><span class="line">document.body.appendChild(<span class="keyword">clone</span>);</span><br></pre>      </td>    </tr>  </table></figure><h2 id="注意："><a class="header-anchor" href="#注意：">🌊</a>注意：</h2><h3 id="childnodes-length存在跨浏览器的问题"><a class="header-anchor" href="#childnodes-length存在跨浏览器的问题">🌊</a>childNodes.length存在跨浏览器的问题</h3><p>可以看到有关列表的html片段没有用</p><figure class="highlight vbscript-html">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&lt;ul id="ul"&gt;</span><br><span class="line">&lt;li&gt;sdsssssss&lt;/li&gt;</span><br><span class="line">&lt;li&gt;qqqq&lt;/li&gt;</span><br><span class="line">&lt;li&gt;wwww&lt;/li&gt;</span><br><span class="line">&lt;li&gt;eeee&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre>      </td>    </tr>  </table></figure><p>这种书写格式而是使用没有换行的格式书写，是因为在不同的浏览器中，获取<code>ul.childNodes.length</code>的结果有差异：</p><ul>  <li>在ie中，ul.childNodes.length不会计算li之间的换行空格，从而得到数值为4</li>  <li>在ff、chrome,safari中，会有包含li之间的空白符的5个文本节点，因此ul.childNodes.length为9<br> 若要解决跨浏览器问题，可以将li之间的换行去掉，改成一行书写格式。  </li></ul><h3 id="clonenode存在跨浏览器的问题"><a class="header-anchor" href="#clonenode存在跨浏览器的问题">🌊</a>cloneNode存在跨浏览器的问题</h3><ul>  <li>在IE中，通过cloneNode方法复制的元素，会复制事件处理程序，比如，var b = a.cloneNode(true).若a存在click,mouseover等事件监听，则b也会拥有这些事件监听。</li>  <li>在ff,chrome,safari中，通过cloneNode方法复制的元素，只会复制特性，其他一切都不会复制<br> 因此，若要解决跨浏览器问题，在复制前，最好先移除事件处理程序。  </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;创建节点&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#创建节点&quot;&gt;🌊&lt;/a&gt;创建节点&lt;/h2&gt;
&lt;p&gt;除了可以使用&lt;code&gt;createElement&lt;/code&gt;创建元素，也可以使用&lt;code&gt;createTextNode&lt;/code&gt;
      
    
    </summary>
    
      <category term="前端" scheme="http://meng.uno/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://meng.uno/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>HIT操作系统实验总结</title>
    <link href="http://meng.uno/posts/86743755/"/>
    <id>http://meng.uno/posts/86743755/</id>
    <published>2017-01-04T12:50:26.000Z</published>
    <updated>2018-02-09T10:46:20.931Z</updated>
    
    <content type="html"><![CDATA[<blockquote>  <p>哈工大《操作系统》六次实验每次需要修改的文件见：<a href="http://www.meng.uno/os.html" target="_blank" rel="noopener">修改文件列表</a><br> 本实验总结源自github项目：    <a href="https://github.com/HITAmigos/MIC" target="_blank" rel="noopener">MIC</a></p></blockquote><h2 id="操作系统引导"><a class="header-anchor" href="#操作系统引导">🌊</a>操作系统引导</h2><h3 id="bootsect-s"><a class="header-anchor" href="#bootsect-s">🌊</a>bootsect.s</h3><ul>  <li>实现屏幕输出</li>  <li>修改打印的字符串（空白也算作一个字符）</li>  <li>读入setup.s代码（包括：设置驱动器、磁头，读取setup.s的磁道和扇区，并跳到相应位置开始执行）</li></ul><h3 id="setup-s"><a class="header-anchor" href="#setup-s">🌊</a>setup.s</h3><ul>  <li>（和bootsect.s中部分代码相同）打印相关信息</li>  <li>（原代码已经可以部分打印硬件信息）需要在相关位置嵌入msg实现打印提示信息功能</li></ul><h3 id="build-c"><a class="header-anchor" href="#build-c">🌊</a>build.c</h3><ul>  <li>将bootsect.s、setup.s、system.s编译、链接生成Image文件</li></ul><h2 id="系统调用"><a class="header-anchor" href="#系统调用">🌊</a>系统调用</h2><ul>  <li>unistd.h文件：添加系统调用功能号</li>  <li>sys.h声明新的系统调用处理函数；添加系统调用处理程序索引值到指针数组表中</li>  <li>system_call.s中增加系统调用总数</li>  <li>makefile添加新的系统调用所在文件的编译链接规则（依赖关系）</li></ul><h2 id="进程运行轨迹的跟踪与统计"><a class="header-anchor" href="#进程运行轨迹的跟踪与统计">🌊</a>进程运行轨迹的跟踪与统计</h2><h3 id="process-c"><a class="header-anchor" href="#process-c">🌊</a>process.c</h3><ul>  <li>涉及到fork()和wait()系统调用</li>  <li>主要实现了一个函数——cpuio_bound()</li>  <li>用fork()建立若干个同时运行的子程序</li>  <li>父P等待所有子P退出后才退出，每个子P性质通过cpuio_bound()控制性质</li></ul><h3 id="fork-c"><a class="header-anchor" href="#fork-c">🌊</a>fork.c</h3><ul>  <li>fork系统调用函数</li></ul><h3 id="main-c"><a class="header-anchor" href="#main-c">🌊</a>main.c</h3><ul>  <li>内核的入口函数main()，对它的修改是增加日志创建语句，并将log文件关联到文件描述符log文件记录进程状态转换轨迹</li></ul><h3 id="kernel"><a class="header-anchor" href="#kernel">🌊</a>kernel</h3><p>主要寻找进程状态转换点：</p><ul>  <li>printk.c</li>  <li>sched.c</li>  <li>exit.c</li></ul><h2 id="信号量的实现和应用"><a class="header-anchor" href="#信号量的实现和应用">🌊</a>信号量的实现和应用</h2><h3 id="sem-open"><a class="header-anchor" href="#sem-open">🌊</a>sem_open</h3><ul>  <li>打开信号量</li></ul><h3 id="sem-wait"><a class="header-anchor" href="#sem-wait">🌊</a>sem_wait</h3><ul>  <li>信号量P操作——value–</li></ul><h3 id="sem-post"><a class="header-anchor" href="#sem-post">🌊</a>sem_post</h3><ul>  <li>信号量V操作——value++</li></ul><h3 id="sem-unlink"><a class="header-anchor" href="#sem-unlink">🌊</a>sem_unlink</h3><ul>  <li>释放信号量</li></ul><h2 id="地址映射与共享"><a class="header-anchor" href="#地址映射与共享">🌊</a>地址映射与共享</h2><h3 id="shm-c"><a class="header-anchor" href="#shm-c">🌊</a>shm.c</h3><ul>  <li>shmget()：得到一个共享内存标识符或创建一个共享内存对象并返回共享内存标识符</li>  <li>shmat()：连接共享内存标识符为shmid的共享内存，连接成功后把共享内存区对象映射到调用进程的地址空间，随后可像本地空间一样访问</li></ul><h3 id="sem-c"><a class="header-anchor" href="#sem-c">🌊</a>sem.c</h3><p>实现信号量的四种操作，与实验四相同</p><h2 id="字符显示的控制"><a class="header-anchor" href="#字符显示的控制">🌊</a>字符显示的控制</h2><h3 id="keyboard-s"><a class="header-anchor" href="#keyboard-s">🌊</a>keyboard.S</h3><ul>  <li>添加对字符F12的输入判断</li></ul><h3 id="console-c"><a class="header-anchor" href="#console-c">🌊</a>console.c</h3><ul>  <li>添加输出到控制台的字符控制</li></ul><h3 id="file-dev-c"><a class="header-anchor" href="#file-dev-c">🌊</a>file_dev.c</h3><ul>  <li>添加输出到文件的字符控制</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
  &lt;p&gt;哈工大《操作系统》六次实验每次需要修改的文件见：&lt;a href=&quot;http://www.meng.uno/os.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;修改文件列表&lt;/a&gt;&lt;br&gt; 本实验总结源自github项
      
    
    </summary>
    
      <category term="操作系统" scheme="http://meng.uno/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统" scheme="http://meng.uno/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
</feed>
