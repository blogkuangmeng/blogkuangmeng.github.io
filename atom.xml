<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>欢迎来到匡盟盟的博客！</title>
  
  <subtitle>Colyn 崛起正当时！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://meng.uno/"/>
  <updated>2018-02-12T13:50:11.648Z</updated>
  <id>http://meng.uno/</id>
  
  <author>
    <name>匡盟盟</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>简单的Python3爬虫</title>
    <link href="http://meng.uno/posts/51d32f19/"/>
    <id>http://meng.uno/posts/51d32f19/</id>
    <published>2018-02-12T12:18:15.000Z</published>
    <updated>2018-02-12T13:50:11.648Z</updated>
    
    <content type="html"><![CDATA[<blockquote>  <p>我们先从分析原理入手，然后再使用Python提供的基本的库urllib。</p>  <p>注意，我全程使用的是Python3，如果你必须使用不同版本，请自行百度某些库及函数的转换，需要使用的库不一定你的电脑上预装了，所以请自行百度安装。</p></blockquote><h1>原理</h1><p>网络爬虫，也叫网络蜘蛛(Web Spider)，如果把互联网比喻成一个蜘蛛网，Spider就是一只在网上爬来爬去的蜘蛛。网络爬虫就是根据网页的地址来寻找网页的，也就是URL。</p><h2 id="url"><a class="header-anchor" href="#url">🌊</a>URL</h2><p>URL就是同意资源定位符(Uniform Resource Locator)，它的一般格式如下(带方括号[]的为可选项)：</p><p><code>protocol ://hostname[:port]/path/[;parameters][?query]#fragment</code></p><p>可见，一个URL包含三个部分：</p><ol>  <li>protocol：协议，例如https，http等；</li>  <li>hostname[:port]：主机名(端口号为可选参数)，一般网站默认的端口号为80，例如我的博客域名www.meng.uno，可以作为主机名使用;</li>  <li>path：第三部分就是主机资源的具体地址，如目录和文件名等。</li></ol><p>爬虫就是向URL发送请求，然后得到响应，基本就实现了爬取网页的功能。</p><p><strong>URI可以分为URL,URN或同时具备locators 和names特性的一个东西。URN作用就好像一个人的名字，URL就像一个人的地址。换句话说：URN确定了东西的身份，URL提供了找到它的方式。</strong></p><h2 id="从浏览器发送和接收数据看起"><a class="header-anchor" href="#从浏览器发送和接收数据看起">🌊</a>从浏览器发送和接收数据看起</h2><p>进入我的首页<code>www.meng.uno</code>，打开浏览器的“检查”功能，选项卡选到“Network”，然后点击所有文章，随便选择一条，我们可以发现如下截图的&quot;Headers&quot;</p><p><img src="http://meng.uno/images/crawl/1.png" alt="Headers"></p><p>我们可以发现最明显的有两个区域（我已经圈出来了）：“request”和“response”。从字面意思上来看，我们就知道分别是（发送的）请求和（收到的）回复。</p><p>接收的信息是我们请求的网页给的，不用我们管，但是“请求的网页”是我们需要提前设定的，当然最简单的方式就是什么都不设置。爬虫会增加网站的负荷，所以很多网站希望大家通过API的方式使用其开放的资源而禁止爬虫，其中的一个做法就是判断你的请求内容（不全的基本都是爬虫）。于是，为了做到一个完整的可用的爬虫，我们需要模拟真实用户的请求，这就要求我们伪造“User Agent”。</p><p>常见的“User Agent”列举如下：</p><ol>  <li>    <p>Android</p>    <ul>      <li>Mozilla/5.0 (Linux; Android 4.1.1; Nexus 7 Build/JRO03D) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.166 Safari/535.19</li>      <li>Mozilla/5.0 (Linux; U; Android 4.0.4; en-gb; GT-I9300 Build/IMM76D) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30</li>      <li>Mozilla/5.0 (Linux; U; Android 2.2; en-gb; GT-P1000 Build/FROYO) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1</li>    </ul>  </li>  <li>    <p>Firefox</p>    <ul>      <li>Mozilla/5.0 (Windows NT 6.2; WOW64; rv:21.0) Gecko/20100101 Firefox/21.0</li>      <li>Mozilla/5.0 (Android; Mobile; rv:14.0) Gecko/14.0 Firefox/14.0</li>    </ul>  </li>  <li>    <p>Google Chrome</p>    <ul>      <li>Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</li>      <li>Mozilla/5.0 (Linux; Android 4.0.4; Galaxy Nexus Build/IMM76B) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.133 Mobile Safari/535.19</li>    </ul>  </li>  <li>    <p>iOS</p>    <ul>      <li>Mozilla/5.0 (iPad; CPU OS 5_0 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9A334 Safari/7534.48.3</li>      <li>Mozilla/5.0 (iPod; U; CPU like Mac OS X; en) AppleWebKit/420.1 (KHTML, like Gecko) Version/3.0 Mobile/3A101a Safari/419.3</li>    </ul>  </li></ol><p>User Agent已经设置好了，但是还应该考虑一个问题，程序的运行速度是很快的，如果我们利用一个爬虫程序在网站爬取东西，一个固定IP的访问频率就会很高，这不符合人为操作的标准，因为人操作不可能在几ms内，进行如此频繁的访问。所以一些网站会设置一个IP访问频率的阈值，如果一个IP访问频率超过这个阈值，说明这个不是人在访问，而是一个爬虫程序。</p><p>一个很简单的解决办法就是设置延时，但是这显然不符合爬虫快速爬取信息的目的，所以另一种更好的方法就是使用IP代理。使用代理的步骤：</p><ul>  <li>调用urlib.request.ProxyHandler()，proxies参数为一个字典；</li>  <li>创建Opener(类似于urlopen，这个代开方式是我们自己定制的)；</li>  <li>安装Opener；</li></ul><p><strong>这个网站提供了很多代理主机：<a href="http://www.xicidaili.com/" target="_blank" rel="noopener">http://www.xicidaili.com/</a></strong></p><h2 id="正则表达式"><a class="header-anchor" href="#正则表达式">🌊</a>正则表达式</h2><p>我直接以表格的形式呈现好了：</p><table>  <thead>    <tr>      <th style="text-align:center">元字符</th>      <th style="text-align:right">说明</th>    </tr>  </thead>  <tbody>    <tr>      <td style="text-align:center">.</td>      <td style="text-align:right">代表任意字符</td>    </tr>    <tr>      <td style="text-align:center"></td>      <td style="text-align:right"></td>    </tr>    <tr>      <td style="text-align:center">[ ]</td>      <td style="text-align:right">匹配内部的任一字符或子表达式</td>    </tr>    <tr>      <td style="text-align:center">[^]</td>      <td style="text-align:right">对字符集和取非</td>    </tr>    <tr>      <td style="text-align:center">-</td>      <td style="text-align:right">定义一个区间</td>    </tr>    <tr>      <td style="text-align:center">\</td>      <td style="text-align:right">对下一字符取非（通常是普通变特殊，特殊变普通）</td>    </tr>    <tr>      <td style="text-align:center">*</td>      <td style="text-align:right">匹配前面的字符或者子表达式0次或多次</td>    </tr>    <tr>      <td style="text-align:center">*?</td>      <td style="text-align:right">惰性匹配上一个</td>    </tr>    <tr>      <td style="text-align:center">+</td>      <td style="text-align:right">匹配前一个字符或子表达式一次或多次</td>    </tr>    <tr>      <td style="text-align:center">+?</td>      <td style="text-align:right">惰性匹配上一个</td>    </tr>    <tr>      <td style="text-align:center">?</td>      <td style="text-align:right">匹配前一个字符或子表达式0次或1次重复</td>    </tr>    <tr>      <td style="text-align:center">{n}</td>      <td style="text-align:right">匹配前一个字符或子表达式</td>    </tr>    <tr>      <td style="text-align:center">{m,n}</td>      <td style="text-align:right">匹配前一个字符或子表达式至少m次至多n次</td>    </tr>    <tr>      <td style="text-align:center">{n,}</td>      <td style="text-align:right">匹配前一个字符或者子表达式至少n次</td>    </tr>    <tr>      <td style="text-align:center">{n,}?</td>      <td style="text-align:right">前一个的惰性匹配</td>    </tr>    <tr>      <td style="text-align:center">^</td>      <td style="text-align:right">匹配字符串的开头</td>    </tr>    <tr>      <td style="text-align:center">\A</td>      <td style="text-align:right">匹配字符串开头</td>    </tr>    <tr>      <td style="text-align:center">$</td>      <td style="text-align:right">匹配字符串结束</td>    </tr>    <tr>      <td style="text-align:center">[\b]</td>      <td style="text-align:right">退格字符</td>    </tr>    <tr>      <td style="text-align:center">\c</td>      <td style="text-align:right">匹配一个控制字符</td>    </tr>    <tr>      <td style="text-align:center">\d</td>      <td style="text-align:right">匹配任意数字</td>    </tr>    <tr>      <td style="text-align:center">\D</td>      <td style="text-align:right">匹配数字以外的字符</td>    </tr>    <tr>      <td style="text-align:center">\t</td>      <td style="text-align:right">匹配制表符</td>    </tr>    <tr>      <td style="text-align:center">\w</td>      <td style="text-align:right">匹配任意数字字母下划线</td>    </tr>    <tr>      <td style="text-align:center">\W</td>      <td style="text-align:right">不匹配数字字母下划线</td>    </tr>  </tbody></table><h1>代码</h1><h2 id="简单带错误信息的获取网页内所有url的爬虫"><a class="header-anchor" href="#简单带错误信息的获取网页内所有url的爬虫">🌊</a>简单带错误信息的获取网页内所有URL的爬虫</h2><figure class="highlight python">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="comment">#获取URL的包</span></span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="comment">#获取字符集编码方式</span></span><br><span class="line"><span class="keyword">import</span> chardet</span><br><span class="line"><span class="comment">#正则表达式</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment">#Request 对象</span></span><br><span class="line">req = urllib.request.Request(<span class="string">"http://meng.uno/"</span>)</span><br><span class="line">data = <span class="keyword">None</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment">#得到Response</span></span><br><span class="line">    response = urllib.request.urlopen(req,data)</span><br><span class="line">    <span class="comment">#读出response == 请求文件的全部字符</span></span><br><span class="line">    html = response.read()</span><br><span class="line">    <span class="comment">#获取这个response的编码方式</span></span><br><span class="line">    charset = chardet.detect(html)</span><br><span class="line">    print(<span class="string">"编码方式："</span>,charset)</span><br><span class="line">    <span class="comment">#以这种编码方式解码打印</span></span><br><span class="line">    html = html.decode(charset.get(<span class="string">"encoding"</span>))</span><br><span class="line">    print(html)</span><br><span class="line">    urls = re.findall(<span class="string">'href=\"https*://w*\.*meng\.uno/.*?\"'</span>, html,re.S)</span><br><span class="line">    uris = re.findall(<span class="string">'href=\"/[^/].*?[^\.]\"'</span>,html, re.S)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> urls:</span><br><span class="line">        print(item[<span class="number">6</span>:<span class="number">-1</span>])</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> uris:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">".html"</span> <span class="keyword">in</span> item:</span><br><span class="line">            print(<span class="string">"http://www.meng.uno"</span>+item[<span class="number">6</span>:<span class="number">-1</span>])</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">'.'</span> <span class="keyword">in</span> item:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"http://www.meng.uno"</span>+item[<span class="number">6</span>:<span class="number">-1</span>])</span><br><span class="line"><span class="keyword">except</span> urllib.error.HTTPError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">if</span> hasattr(e, <span class="string">'code'</span>):</span><br><span class="line">        print(<span class="string">"HTTPError"</span>)</span><br><span class="line">        print(e.code)</span><br><span class="line">    <span class="keyword">elif</span> hasattr(e, <span class="string">'reason'</span>):</span><br><span class="line">        print(<span class="string">"URLError"</span>)</span><br><span class="line">        print(e.reason)</span><br></pre>      </td>    </tr>  </table></figure><h2 id="模拟真实环境的爬虫"><a class="header-anchor" href="#模拟真实环境的爬虫">🌊</a>模拟真实环境的爬虫</h2><figure class="highlight python">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"> <span class="comment">#访问网址</span></span><br><span class="line">url = <span class="string">'http://www.whatismyip.com.tw/'</span></span><br><span class="line"><span class="comment">#这是代理IP</span></span><br><span class="line">proxy = &#123;<span class="string">'https'</span>:<span class="string">'110.73.48.189:8123'</span>&#125;</span><br><span class="line"><span class="comment">#创建ProxyHandler</span></span><br><span class="line">proxy_support = urllib.request.ProxyHandler(proxy)</span><br><span class="line"><span class="comment">#创建Opener</span></span><br><span class="line">opener = urllib.request.build_opener(proxy_support)</span><br><span class="line"><span class="comment">#添加User Angent</span></span><br><span class="line">opener.addheaders = [(<span class="string">'User-Agent'</span>,<span class="string">'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36'</span>)]</span><br><span class="line"><span class="comment">#安装OPener</span></span><br><span class="line">urllib.request.install_opener(opener)</span><br><span class="line"><span class="comment">#使用自己安装好的Opener</span></span><br><span class="line">response = urllib.request.urlopen(url)</span><br><span class="line"><span class="comment">#读取相应信息并解码</span></span><br><span class="line">html = response.read().decode(<span class="string">"utf-8"</span>)</span><br><span class="line"><span class="comment">#打印信息</span></span><br><span class="line">print(html)</span><br></pre>      </td>    </tr>  </table></figure><h2 id="通过队列获取网站所有url的爬虫"><a class="header-anchor" href="#通过队列获取网站所有url的爬虫">🌊</a>通过队列获取网站所有URL的爬虫</h2><figure class="highlight python">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="comment">#python系统关于队列的包</span></span><br><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"><span class="comment">#获取URL的包</span></span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="comment">#获取字符集编码方式</span></span><br><span class="line"><span class="keyword">import</span> chardet</span><br><span class="line"><span class="comment">#正则表达式</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">initial_page = <span class="string">"http://www.meng.uno"</span></span><br><span class="line"></span><br><span class="line">url_queue = queue.Queue()</span><br><span class="line">seen = set()</span><br><span class="line"></span><br><span class="line">seen.add(initial_page)</span><br><span class="line">url_queue.put(initial_page)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extract_urls</span><span class="params">(url)</span>:</span></span><br><span class="line">    req = urllib.request.Request(url)</span><br><span class="line">    <span class="comment">#得到Response</span></span><br><span class="line">    response = urllib.request.urlopen(req)</span><br><span class="line">    <span class="comment">#读出response == 请求文件的全部字符</span></span><br><span class="line">    html = response.read()</span><br><span class="line">    <span class="comment">#获取这个response的编码方式</span></span><br><span class="line">    charset = chardet.detect(html)</span><br><span class="line">    <span class="comment">#以这种编码方式解码打印</span></span><br><span class="line">    html = html.decode(charset.get(<span class="string">"encoding"</span>))</span><br><span class="line">    urls = re.findall(<span class="string">'href=\"https*://w*\.*meng\.uno/.*?\"'</span>, html,re.S)</span><br><span class="line">    uris = re.findall(<span class="string">'href=\"/[^/].*?[^\.]\"'</span>,html, re.S)</span><br><span class="line">    tempseen = set()</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> urls:</span><br><span class="line">        tempseen.add(item[<span class="number">6</span>:<span class="number">-1</span>])</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> uris:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">".html"</span> <span class="keyword">in</span> item:</span><br><span class="line">            tempseen.add(<span class="string">"http://www.meng.uno"</span>+item[<span class="number">6</span>:<span class="number">-1</span>])</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">'.'</span> <span class="keyword">in</span> item:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tempseen.add(<span class="string">"http://www.meng.uno"</span>+item[<span class="number">6</span>:<span class="number">-1</span>])</span><br><span class="line">    <span class="keyword">return</span> tempseen</span><br><span class="line">            </span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">True</span>): <span class="comment">#一直进行直到海枯石烂</span></span><br><span class="line">    <span class="keyword">if</span> url_queue.qsize()&gt;<span class="number">0</span>:</span><br><span class="line">        current_url = url_queue.get()    <span class="comment">#拿出队例中第一个的url</span></span><br><span class="line">        print(current_url)               <span class="comment">#把这个url代表的网页存储好</span></span><br><span class="line">        <span class="keyword">for</span> next_url <span class="keyword">in</span> extract_urls(current_url): <span class="comment">#提取把这个url里链向的url</span></span><br><span class="line">            <span class="keyword">if</span> next_url <span class="keyword">not</span> <span class="keyword">in</span> seen:      </span><br><span class="line">                seen.add(next_url)</span><br><span class="line">                url_queue.put(next_url)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre>      </td>    </tr>  </table></figure><p><strong><em>这里先简单解释，以后有实际项目会再补充！</em></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
  &lt;p&gt;我们先从分析原理入手，然后再使用Python提供的基本的库urllib。&lt;/p&gt;
  &lt;p&gt;注意，我全程使用的是Python3，如果你必须使用不同版本，请自行百度某些库及函数的转换，需要使用的库不一定你的电脑上预装了，所以请自行百度安装。&lt;/p
      
    
    </summary>
    
      <category term="Python" scheme="http://meng.uno/categories/Python/"/>
    
      <category term="爬虫" scheme="http://meng.uno/categories/Python/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="Python" scheme="http://meng.uno/tags/Python/"/>
    
      <category term="爬虫" scheme="http://meng.uno/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>CPAchecker</title>
    <link href="http://meng.uno/posts/c5d9877c/"/>
    <id>http://meng.uno/posts/c5d9877c/</id>
    <published>2018-02-11T14:08:59.000Z</published>
    <updated>2018-02-11T14:15:48.025Z</updated>
    
    <content type="html"><![CDATA[<p>CPAchecker is a tool for configurable software verification which means expressing different program analysis and model checking approaches in one single formalism. The main algorithm is configurable to perform a reachability analysis on arbitrary combinations  of existing configurable program analysis (CPA). One application of CPAchecker is the verification of Linux device drivers.</p><p>CPA provides a conceptual basis for expressing different verification approaches in the same formal setting. The CPA formalism provides an interface for the definition of program analyses, which includes the abstract domain, the post operator, the merge  operator, and the stop operator. Consequently, the corresponding tool implementation CPAchecker provides an implementation framework that allows the seamless integration of program analyses that are expressed in the CPA framework. The comparison of  different approaches in the same experimental setting becomes easy and the experimental results will be more meaningful.</p><h2 id="architecture"><a class="header-anchor" href="#architecture">🌊</a>Architecture</h2><p><img src="http://www.meng.uno/images/cpa/1.png" alt="CPAchecker"></p><p>The above picture is the overview of CPAchecker’s architecture. The central data structure is a set of control-flow automata (CFA), which consist of control-flow locations and control-flow edges. A location represents a program-counter value, and an edge  represents a program operation, which is either an assume operation, an assignment block, a function call, or a function return. Before a program analysis starts, the input program is transformed into a syntax tree, and further into CFAs. The framework  provides interfaces to SMT solvers and interpolation procedures, such that the CPA operators can be written in a concise and convenient way. From the picture, we know that they use MathSAT as an SMT solver, and CSIsat and MathSAT as interpolation procedures.  They also use JavaBDD as a BDD package, and provide an interface to an Octagon Library as well. The CPA Algorithm is the center of this project and the detailed design is shown as follows.</p><p><img src="http://www.meng.uno/images/cpa/2.png" alt="CPAchecker"></p><p>The CPA algorithm (shown at the top in the above figure) takes as input a set of control-flow automata (CFA) representing the program, and a CPA, which is in most cases a Composite CPA. The interfaces correspond one-to-one to the formal framework. The  elements in the gray box (top right) represent the abstract interfaces of the CPA and the CPA operations. The two gray boxes at the bottom of the figure show two implementations of the interface CPA, one is a Composite CPA that can combine several other  CPAs, and the other is a Leaf CPA.</p><h2 id="build-and-test"><a class="header-anchor" href="#build-and-test">🌊</a>Build and Test</h2><p>Owing to the long development history, this project is very prefect which means you could use its binary directly, build from the source and even use their jar-ball in Java applications. To experience it, I will build it from the source and use it in  the command-line.</p><p>We need to install “jdk”, “ant”, “svn” and “subversion” before we build it. Then enter the root directory and run “ant”. Wait a moment and this is the result.</p><p>To test this project, we need to write a C/C++ code without “#include  <headers>”. I choose a simple one (QuickSort) shown in the attachment.</headers></p><p>The result contains a log file, a statistics file and a report which is in “html” format.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;CPAchecker is a tool for configurable software verification which means expressing different program analysis and model checking approach
      
    
    </summary>
    
      <category term="Software Verification" scheme="http://meng.uno/categories/Software-Verification/"/>
    
      <category term="CPA" scheme="http://meng.uno/categories/Software-Verification/CPA/"/>
    
      <category term="CPAchecker" scheme="http://meng.uno/categories/Software-Verification/CPA/CPAchecker/"/>
    
    
      <category term="CPA" scheme="http://meng.uno/tags/CPA/"/>
    
      <category term="CPAchecker" scheme="http://meng.uno/tags/CPAchecker/"/>
    
  </entry>
  
  <entry>
    <title>Linux Test Project</title>
    <link href="http://meng.uno/posts/bfb74f68/"/>
    <id>http://meng.uno/posts/bfb74f68/</id>
    <published>2018-02-11T13:29:33.000Z</published>
    <updated>2018-02-11T14:04:49.151Z</updated>
    
    <content type="html"><![CDATA[<p>I found this project from the references of other papers, and I thought it was good, so I plan to run it. As we can see from its name, Linux Test Project (LTP) has a goal to deliver test suites to the open source community that validate the reliability,  robustness, and stability of Linux. This project wants to support Linux development by making unit testing more complete and minimizing user impact by building a barrier to keep bugs from making it to the user. There are two important testing techniques  which are supported by giving developers an ever growing set of tools to help identify any operational problems in their code: Design and Code Inspections. I knew that Yggdrasil and Hyperkernel which I have run successfully belong to the last category.  LTP doesn’t have a benchmark which means they don’t compare different kernel of Linux.</p><p>In LTP, we need to know:</p><ul>  <li>Test case: A single action and verification which has a result PASS/FAIL.</li>  <li>Test suite: Containing one or more test cases.</li>  <li>Test tags: Pairing a unique identifier with a test program and a set of command line options.</li></ul><p>We also need to know the ways of reporting the results of a test case. There are two main ways which are contained in LTP:</p><ul>  <li>Exit status: If a test program encounters unexpected or incorrect results, exit the test program with a non-zero exit status, i.e. exit(1). Conversely, if a program completes as expected, return a zero exit status, i.e. exit(0).</li>  <li>Standard output: Tools can be used to analyze the results, if they are written in a standard way.</li></ul><h2 id="build-and-run"><a class="header-anchor" href="#build-and-run">🌊</a>Build and Run</h2><p>To build this project, we need to run the following executions:</p><figure class="highlight stylus">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>      </td>      <td class="code">        <pre><span class="line">$ git clone https:<span class="comment">//github.com/linux-test-project/ltp.git</span></span><br><span class="line">$ cd ltp</span><br><span class="line">$ make autotools</span><br><span class="line">$ ./configure</span><br><span class="line">$ make</span><br><span class="line">$ make install</span><br></pre>      </td>    </tr>  </table></figure><p>Before these, we need to ensure “git, autoconf, automake, m4” are installed. If not, we can use “apt-get” to get them. The output of “make” is shown as following.</p><p><img src="http://www.meng.uno/images/ltp/1.png" alt="LTP"></p><p>After building this project, let’s run it personally. If we want to run all the test suites, we just need run “./runltp” in the “opt/ltp/” directory. However, I will run a single test suite to verify this project only with “./runltp -f syscalls” execution.</p><p><img src="http://www.meng.uno/images/ltp/2.png" alt="LTP"></p><p>The picture above is the output of “abort01” test case. From it we can see that the test method is “Exit status test” and it passes all the situations.</p><p>If a test case needs datafiles to work, these would be put in a subdirectory named datafilesand installed in the testcases/data/$TCID directory</p><h2 id="analyze-test-cases"><a class="header-anchor" href="#analyze-test-cases">🌊</a>Analyze Test Cases</h2><p>We could find LTP in “/opt/ltp” and the test suites are installed in the “/opt/ltp/runtest/” directory. The following picture is a screenshot of it.</p><p><img src="http://www.meng.uno/images/ltp/3.png" alt="LTP"></p><p>In a single file, such as “syscalls” file, there exist many single test cases which are like the follows.</p><p><img src="http://www.meng.uno/images/ltp/4.png" alt="LTP"></p><p>From this picture, those words, like “abort01”, represent different test cases which are laid in “/opt/ltp/testcases/bin/” directory.</p><p><img src="http://www.meng.uno/images/ltp/5.png" alt="LTP"></p><p>Each test case is a binary written either in portable Shell or C such as “abort01” which is from “abort01.c” which lays in the “ltp/testcases/kernel/syscalls/abort” directory. The test gets a configuration via environment variables and/or command line  parameters, it prints additional information into the stdout and reports overall success/failure via the exit value.</p><p><img src="http://www.meng.uno/images/ltp/6.png" alt="LTP"></p><h2 id="write-a-test-suite"><a class="header-anchor" href="#write-a-test-suite">🌊</a>Write A Test Suite</h2><p>To make things simple, I will use LTP standard interface, not add custom reporting functions and use LTP build system. The following are my steps (These steps are very simple, so I didn’t list any screenshot):</p><ul>  <li>Add a new file “meng” to “ltp/runtest/” directory;</li>  <li>Write some test cases’ names, such as “abort01 accept01”;</li>  <li>Run “make” and “make install”;</li>  <li>Enter “/opt/ltp/” directory;</li>  <li>Run “./runltp -f meng”;</li>  <li>Get the result as the picture. (You can also find the full logs from “meng_output.txt” file in the attachment)</li></ul><p><img src="http://www.meng.uno/images/ltp/7.png" alt="LTP"></p><h2 id="write-a-test-case"><a class="header-anchor" href="#write-a-test-case">🌊</a>Write A Test Case</h2><p>As I said before, we can use C language or Shell to write a test case, however, in this section, I will just use C language to write a simple one which may make me have a deep understanding of this project.</p><p><strong>I used the “man-pages” to find the untested system calls, however, my linux version maybe a little old (2015 release, version 16.04), so that I can’t find a untested one which is excluded by the newest LTP.</strong></p><p>I will write a test for verifying system call “file rename”. First, I create a new file “meng.c” in the “ltp/testcases/kernel/syscalls/meng/” directory. Then I need to write the codes. The next thing I need to do is to include “tst_test.h” (There are  also another headers, however, this one is basic). We need to write “main(), setup(), clean()” functions and the detailed realizations are in the “meng.c” which is in the attachment (I give some notes of the code in the “meng.c” file as well). What’s  more, we need to create a “Makefile” in the same directory and write the compiling information. The compiled file is like this.</p><p><img src="http://www.meng.uno/images/ltp/8.png" alt="LTP"></p><p>Last, I will add this test case to the “meng” test suite and see the result (You can find the full output in “meng_syscall_output.txt” in the attachment).</p><p><img src="http://www.meng.uno/images/ltp/9.png" alt="LTP"></p><p>From the above picture, we can see that the verification is “pass” which means that not only the “rename” system call is correct, but also my code is right.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I found this project from the references of other papers, and I thought it was good, so I plan to run it. As we can see from its name, Li
      
    
    </summary>
    
      <category term="Linux" scheme="http://meng.uno/categories/Linux/"/>
    
      <category term="Linux Test" scheme="http://meng.uno/categories/Linux/Linux-Test/"/>
    
    
      <category term="Linux" scheme="http://meng.uno/tags/Linux/"/>
    
      <category term="Linux Test" scheme="http://meng.uno/tags/Linux-Test/"/>
    
  </entry>
  
  <entry>
    <title>A Melody Composer for both Tonal and Non-Tonal Languages</title>
    <link href="http://meng.uno/posts/2251dcee/"/>
    <id>http://meng.uno/posts/2251dcee/</id>
    <published>2018-02-11T04:03:24.000Z</published>
    <updated>2018-02-11T04:39:53.403Z</updated>
    
    <content type="html"><![CDATA[<h1>Summary</h1><h2 id="abstract"><a class="header-anchor" href="#abstract">🌊</a>Abstract</h2><p>This paper contains some improvements on an algorithmic melody composer called “T-music”. “T-music” is an algorithm which can compose a melody for users’ input lyrics by mining the relationship between the melodies and lyrics. These relationships are  known as frequent patterns (FPS) . The ameliorations are two ways to enhance the methods of mining frequent patterns form instrumental compositions and an optimal way of using FPS mined from songs in one language to compose a melody for the input things  in another language.</p><h2 id="propse"><a class="header-anchor" href="#propse">🌊</a>Propse</h2><p>The propose is to get an algorithm which take lyrics as input and a good melody as outcome in order to help those people who have little music background to compose songs. In view of the fact that there is already a pretty well method, T-music, the authors’  tasks are making some improvements on the basis of the original algorithm.</p><h2 id="deficiencies-of-original-algorithm"><a class="header-anchor" href="#deficiencies-of-original-algorithm">🌊</a>Deficiencies of original algorithm</h2><p>At the first place, I need to borrow a figure from the paper as follows to express my understanding of the original T-music method.</p><p><img src="http://www.meng.uno/images/t-music-arch.png" alt="t-musuc"></p><p>As the picture shows that the system architecture of T-music can be divided as two phases which are “Frequent Pattern Mining” and “Melody Composition”. I will report this method following the flow of the algorithm.</p><ul>  <li>    <p>Mining the FPS from “Song Database” and storing them in the “Frequent Pattern Database”:</p>    <ul>      <li>Obtaining tone sequences from “Song Database” by reading the “Language Dictionary”;</li>      <li>Generating s-sequence from a melody, a pitch sequence and a duration sequence;</li>      <li>Mining the FPS from s-sequence;</li>      <li>Storing the FPS to “Frequent Pattern Database”.</li>    </ul>  </li>  <li>    <p>Composing a melody for the “Lyrics” based on FPS in the “Frequent Pattern Database”:</p>    <ul>      <li>Obtaining the tone sequence of the lyrics by reading the “Language Dictionary”;</li>      <li>Adding some “Music Parameters” such as some music rules;</li>      <li>Generating “Melody” by the process “Melody Composition” using FPS.</li>    </ul>  </li></ul><p>There are some deficiencies of the original T-music algorithm as follows. It can only mine FPS from songs in which lyrics must be present. What’s more, the original one can’t use the FPS mined from a language to compose melody in another language. However,  we can’t always get the ideal songs data which have lyrics embedded easily. What we can get from the Internet are those instrumental compositions in which lyrics are absent. Also, we want to achieve that composing melody in a language with the FPS mined  from another language which can make the algorithm more efficient.</p><h2 id="improvements"><a class="header-anchor" href="#improvements">🌊</a>Improvements</h2><p>What the authors have done provided two ways to mine Frequent Patterns from instrumental compositions and an optimal mapping method for composing a melody using FPS in different language with the input lyrics.</p><p>The first way is “Method emphasizing the original FPS”. I will use the following picture to express my comprehension. Firstly, mining the FPS from songs and storing them in “FP database (General)”. Secondly, mining the frequent pitch trends from “Instrumental  compositions with style database” and storing them in “Frequent pitch trends (Style)” and then using it as a selector to select those FPS storing the matches in “FP database (Style)”.</p><p><img src="http://www.meng.uno/images/t-music-database.png" alt="t-musuc"></p><p>The second way is “Method emphasizing the newly mined frequent pitch trends”. I will also introduce it using the screenshot from the paper. The FPS based on those of the first way was subdivided. The frequent pitch trends are mined as usually. The most  difference is that one pitch trend may match a set of several tone trends.</p><p><img src="http://www.meng.uno/images/t-music-database2.png" alt="t-musuc"></p><p>The optimal mapping method is shown as follows. Firstly, using the same method gets a “FP database” in one language. Then, generating several tone sequences for each tone trend in this “FP database”. There are some lemmas proofed on the paper to decide  the specific number of the mapping.</p><h1>Improvements</h1><p>In this section, I will analysis some excellent algorithms, important thoughts or some key points. Some of them may look small or nothing special, but each has its function.</p><h2 id="using-the-trend-representation"><a class="header-anchor" href="#using-the-trend-representation">🌊</a>Using the “Trend” representation</h2><p>If I were doing this job, I could have chosen the simple “absolute” representation, just because this is the most intuitive frequent pattern we can get from songs. After careful consideration, just as the author explains that same melodies which start  at different pitches may sound similar to us. Then, I understand that it is a big wisdom to use the “trend” representation which uses a FP to extract the general rules of a set of FPS with different pitches, simplifying a large number of calculations  and making the result more obvious.</p><h2 id="using-frequent-pitch-trends-style-as-a-selector"><a class="header-anchor" href="#using-frequent-pitch-trends-style-as-a-selector">🌊</a>Using “Frequent pitch trends (Style)” as a selector</h2><p>Though we know that “T-music” uses “the FPS between the tone port and the pitch part” and agree the mining method used on mining the frequent pattern which contains a tone trend and a pitch trend, there must be some correlation between “Tone trend” and  “Pitch trend”. Since the instrumental compositions don’t contain lyrics, we couldn’t mine a whole frequent pattern from them. However, we can also mine part of the frequent pattern from them which is “Pitch trend”. For we have so much instrumental compositions  which means we can get enough “Pitch trend” and we already know the correlation between “Tone trend” and “Pitch trend”, we can estimate the frequency of the original frequent pattern and eliminate part of them which have a zero frequency.</p><h2 id="using-the-subsequences-of-original-frequent-pattern"><a class="header-anchor" href="#using-the-subsequences-of-original-frequent-pattern">🌊</a>Using the subsequences of original frequent pattern</h2><p>According to the Apriori property that all nonempty subsets of frequent item set must also be frequent, the authors artfully break the original FPS into smaller form and then making them combine more FPS which can be selected from the original FP database.  By doing this, we can get more frequent patterns from the identical data which means our mining algorithm is more efficient.</p><h2 id="using-multi-map-as-a-data-structure"><a class="header-anchor" href="#using-multi-map-as-a-data-structure">🌊</a>Using multi-map as a data structure</h2><p>This data structure allows the task of retrieving a value by a key quickly and returns more than one frequent pattern with a support. From it, we can get a tuple in top-k tuples with some selection strategies and ensure that a pattern with a very large  support isn’t always selected because it doesn’t mean that it is always the best choice.</p><h2 id="employing-the-divide-and-conquer-idea"><a class="header-anchor" href="#employing-the-divide-and-conquer-idea">🌊</a>Employing the divide and conquer idea</h2><p>Considering to compose a melody of a very long lyric, we may need to divide the original tone trend into several shorter tone trends, apply the same procedure on them and then return the concatenation of the results of the sub-problems. It is a simple  idea of solving such problem, but we can’t resist its correctness and effectiveness.</p><h1>Limitations</h1><p>I just list some areas that I think need improvements or I think it can be added slightly on the basis of the original research.</p><h2 id="applying-word-segmentation"><a class="header-anchor" href="#applying-word-segmentation">🌊</a>Applying word segmentation</h2><p>Though the paper has mentioned the use of word segmentation, there is just a word and no detailed explanation. I think I should express my own idea here. Firstly, the word segmentation here isn’t the same of those applied in the fields of natural language  processing (NLP). As we all known, the latter has so many strict norms to follow, however, in the lyrics, the norms aren’t very same. Why we do this in the input lyrics is because we want to determine the length of durations between every two words,  which is different from the propose in the NLP which just wants to add pause at the same length of time between words and words.</p><h2 id="handling-the-tone-trend-with-a-length-of-1"><a class="header-anchor" href="#handling-the-tone-trend-with-a-length-of-1">🌊</a>Handling the tone trend with a length of 1</h2><p>In this paper, the authors just simply set the pitch trend to be the input tone trend where, I think, may need improvement. Firstly, we all know that “the tone trend with a length of 1” couldn’t appear individually. It is usually because we matched the  tone sequences before it or after it. I think if we consider dividing the original sequence into overlapping parts using the similar idea of divide and conquer idea, the question may disappear.</p><h2 id="mining-the-relationship-between-tone-trend-and-pitch-trend"><a class="header-anchor" href="#mining-the-relationship-between-tone-trend-and-pitch-trend">🌊</a>Mining the relationship between “tone trend” and “pitch trend”</h2><p>The authors just determine the relationship based on statistics in whether the original T-music method or the improved edition, store the regulars on a multi-map and when using the frequent pattern, the method just randomly selects a tuple from top-k  tuples from the multi-map. Therefore, no matter which one we choose, it is just the original sequence in the FP-database. If there is a very large database which contains a large number of every frequent pattern, it may have a remarkable effect without  complex computations. However, we can’t ensure it or we just want to improve our algorithm with little support of so many records. Let’s look at the following samples which has the form as same as those in the multi-map and assume that the same tone  trend only has the three tuples.</p><figure class="highlight stylus">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&lt;<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&gt; —&gt; (&lt;<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,-<span class="number">1</span>,-<span class="number">2</span>&gt;, <span class="number">10</span>)</span><br><span class="line">&lt;<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&gt; —&gt; (&lt;<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,-<span class="number">2</span>,-<span class="number">1</span>&gt;, <span class="number">9</span>) </span><br><span class="line">&lt;<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&gt; —&gt; (&lt;<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>,-<span class="number">2</span>,-<span class="number">1</span>&gt;, <span class="number">5</span>)</span><br></pre>      </td>    </tr>  </table></figure><p>As we can see, they have the same tone trend and different pitch trends with different values of a support. If we just use the method described in the paper, we may get the result of the 1st, the 2nd, or the 3rd. However, is it the best one? Maybe not,  I think. I mean maybe <code>&lt;1,1,2,0,-2,-1&gt;</code> is better. I think we need to add some correlation analyses to the pitch trends which have the same tone trends.</p><h1>Expanding Research</h1><p>After reading this paper, I have some ideas for further research and some of them are listed as follows.</p><h2 id="adding-location-variables"><a class="header-anchor" href="#adding-location-variables">🌊</a>Adding location variables</h2><p>I mean, as we all known, a same lyric may have different melodies when it is at the beginning or at the end of a song. Of course, if we just want to use a simple sentence as its input, this consideration is rather superfluous. However, if the input lyric  is long enough, it is very important then.</p><h2 id="generating-a-melody-with-a-longer-note"><a class="header-anchor" href="#generating-a-melody-with-a-longer-note">🌊</a>Generating a melody with a longer note</h2><p>This thought is mentioned in the end of the paper as well. We may have noticed that the normal notes will be longer than the syllables of lyrics, at least at the end of each sentence. We may need to modify the match method to add the frequent pattern  which contains group of pitch trends sequences and its corresponding longer tone trends sequences.</p><h2 id="applying-syntactic-analysis"><a class="header-anchor" href="#applying-syntactic-analysis">🌊</a>Applying syntactic analysis</h2><p>The following is my exploratory opinion of the original T-music. If I have many songs with lyrics, I will mine the frequent patterns of syntactic analysis and add them to the “s-sequence” mentioned in this paper. Thus I will reform the original multi-map  as follows.</p><figure class="highlight stylus">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br></pre>      </td>      <td class="code">        <pre><span class="line">(&lt;pitch trend pattern&gt;, &lt;syntax pattern&gt;) —&gt; (&lt;tone trend pattern&gt;, support)</span><br></pre>      </td>    </tr>  </table></figure><p>When we match the input lyrics, we need to not only match the “pitch trend pattern” from the FP-database but also contrast the “syntax pattern” and then make the best decision.</p><h2 id="expanding-to-speech-recognization"><a class="header-anchor" href="#expanding-to-speech-recognization">🌊</a>Expanding to speech recognization</h2><p>I have a simple idea of speech recognization using the same method mentioned in this paper. If I could collect enough voice information spoken by the same person, I would mine the frequent patterns of his intonation habit from the voice data and then  using them to judge whether another voice is his or not.</p><h2 id="expanding-to-password-security"><a class="header-anchor" href="#expanding-to-password-security">🌊</a>Expanding to password security</h2><p>In order to prevent the password being stolen, all websites are making efforts on password diversity. I think the method of mining frequent pattern can be applied to protect users’ password as well. For the same string of ciphers, different people may  type it out in different speeds with different intermission on every two letters. I, for example, usually use the combination of my name and birthday as a password and when I type it out there is a longer break between the last letter of my name and  the first number of my birthday. If we use the same way to mine the frequent patterns form enough times records of someone, we may use the frequent patterns to judge whether it is the right person or not who is typing the password.</p><h2 id="generating-good-problems"><a class="header-anchor" href="#generating-good-problems">🌊</a>Generating “good problems”</h2><p>I often encounter some tricky programming problems and as we all known, “StackOverflow” is the biggest website which can offer you relevant solutions when you ask a question on it. However, we all want to get the best answer as soon as possible so we  may need to put forward “good questions”. I think the thought of this paper can be applied to this question. We can first collect enough “good questions” from the website and then mine the syntactic frequent patterns of each question by categories.  Finally, we can generate such “good questions” by adding the knowledge of sentence construction and providing some keywords needed.</p><h1>Related Research</h1><p>This paper is about mining frequent patterns which is a subfield of data mining. I will express my understanding mixing information retrieved from the Internet in this field.</p><p>With the rise of big data, so many research topics about data is more and more frequent such as forecasting passenger flow and passenger flow directions during the Spring Festival and predicting the composition of Chinese college entrance examination  this year. Data mining means the process of extracting valuable information and patterns from large amounts of data and these new discovery rules, patterns, information and concepts have potential value. It usually contains the association rules, classification,  estimation, clustering and so on.</p><p>As for association analysis, its propose is to discover interesting links hidden in large data sets and the patterns discovered are usually represented in association rules or frequent item sets just as this paper shown. There are several efficient and  scalable frequent item set mining methods such as Apriori algorithm and FP-growth which needs to construct FP-tree.</p><p>As for classification and prediction, I think it is a more stirring area. Think of this, a marketing manager needs data analysis to help guess whether or not a customer with a given profile will buy a new computer and then the marketing manager would  like to predict how much a given customer will spend during a sale, what an attractive job!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;Summary&lt;/h1&gt;
&lt;h2 id=&quot;abstract&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#abstract&quot;&gt;🌊&lt;/a&gt;Abstract&lt;/h2&gt;
&lt;p&gt;This paper contains some improvements on
      
    
    </summary>
    
      <category term="Paper Report" scheme="http://meng.uno/categories/Paper-Report/"/>
    
      <category term="Data mining" scheme="http://meng.uno/categories/Paper-Report/Data-mining/"/>
    
    
      <category term="Paper Report" scheme="http://meng.uno/tags/Paper-Report/"/>
    
      <category term="Data Mining" scheme="http://meng.uno/tags/Data-Mining/"/>
    
  </entry>
  
  <entry>
    <title>.length与length()的区别</title>
    <link href="http://meng.uno/posts/61c2f1f1/"/>
    <id>http://meng.uno/posts/61c2f1f1/</id>
    <published>2018-02-10T13:58:04.000Z</published>
    <updated>2018-02-10T14:52:50.489Z</updated>
    
    <content type="html"><![CDATA[<blockquote>  <p>当我们需要使用数组或者字符串长度时，习惯了使用IDE自动补全的我们是否知道<code>.length</code>与<code>length()</code>的区别喻原因呢？</p></blockquote><p>上面问题的答案是：</p><ul>  <li>数组使用<code>.length</code>属性</li>  <li>字符串使用<code>length()</code>方法</li></ul><p>下面我来回答原因。</p><h2 id="为什么数组有-length属性？"><a class="header-anchor" href="#为什么数组有-length属性？">🌊</a>为什么数组有<code>.length</code>属性？</h2><p>在Java中，数组是容器对象，其中包含了固定数量的同一类型的值，一旦数组创建，其长度就是固定的了，于是，其长度可以作为一个属性。</p><h2 id="为什么字符串需要length-方法？"><a class="header-anchor" href="#为什么字符串需要length-方法？">🌊</a>为什么字符串需要<code>length()</code>方法？</h2><p>Java中的String，实际上是一个char类型数组，而char[]已经有了<code>.length</code>属性，所以在实现String时就没必要再定义重复的属性了，于是需要定义一个方法来返回其长度。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
  &lt;p&gt;当我们需要使用数组或者字符串长度时，习惯了使用IDE自动补全的我们是否知道&lt;code&gt;.length&lt;/code&gt;与&lt;code&gt;length()&lt;/code&gt;的区别喻原因呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上面问题的答案是：&lt;/p&gt;
      
    
    </summary>
    
      <category term="Java开发Tips" scheme="http://meng.uno/categories/Java%E5%BC%80%E5%8F%91Tips/"/>
    
      <category term="String" scheme="http://meng.uno/categories/Java%E5%BC%80%E5%8F%91Tips/String/"/>
    
      <category term="Object" scheme="http://meng.uno/categories/Java%E5%BC%80%E5%8F%91Tips/String/Object/"/>
    
    
      <category term="Java" scheme="http://meng.uno/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java异常结构层次图</title>
    <link href="http://meng.uno/posts/1164dab2/"/>
    <id>http://meng.uno/posts/1164dab2/</id>
    <published>2018-02-09T14:11:15.000Z</published>
    <updated>2018-02-10T14:51:35.021Z</updated>
    
    <content type="html"><![CDATA[<p>在Java中，异常分为<code>checked</code>与<code>unchecked</code>，他们都在一个分类层次中，如下图。</p><p><img src="http://www.meng.uno/images/ehd.jpeg" alt="DEH"></p><p>其中，红色的异常是<code>checked</code>异常，意味着在一个方法中，他们<code>throw</code>后必须<code>catch</code>或者<code>declare</code>。</p><p>另一种颜色的为<code>unchecked</code>异常，他们的异常不需要被<code>recover</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在Java中，异常分为&lt;code&gt;checked&lt;/code&gt;与&lt;code&gt;unchecked&lt;/code&gt;，他们都在一个分类层次中，如下图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.meng.uno/images/ehd.jpeg&quot; alt=&quot;DEH&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="Java开发Tips" scheme="http://meng.uno/categories/Java%E5%BC%80%E5%8F%91Tips/"/>
    
      <category term="Exception" scheme="http://meng.uno/categories/Java%E5%BC%80%E5%8F%91Tips/Exception/"/>
    
    
      <category term="Java" scheme="http://meng.uno/tags/Java/"/>
    
      <category term="Exception" scheme="http://meng.uno/tags/Exception/"/>
    
  </entry>
  
  <entry>
    <title>二分查找的效率</title>
    <link href="http://meng.uno/posts/fff444e8/"/>
    <id>http://meng.uno/posts/fff444e8/</id>
    <published>2018-02-08T09:20:00.000Z</published>
    <updated>2018-02-10T13:05:27.172Z</updated>
    
    <content type="html"><![CDATA[<blockquote>  <p>查找是比较常见的工作，今天我通过对比几种在数组中查找一个确定的值的例子来向大家展示二分查找的魅力。</p></blockquote><h2 id="数组查找元素的几种方法"><a class="header-anchor" href="#数组查找元素的几种方法">🌊</a>数组查找元素的几种方法</h2><h3 id="使用list"><a class="header-anchor" href="#使用list">🌊</a>使用List</h3><figure class="highlight java">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">useList</span><span class="params">(String[] arr, String targetValue)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Arrays.asList(arr).contains(targetValue);</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><h3 id="使用set"><a class="header-anchor" href="#使用set">🌊</a>使用Set</h3><figure class="highlight java">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">useSet</span><span class="params">(String[] arr, String targetValue)</span> </span>&#123;</span><br><span class="line">Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;String&gt;(Arrays.asList(arr));</span><br><span class="line"><span class="keyword">return</span> set.contains(targetValue);</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><h3 id="使用for-loop"><a class="header-anchor" href="#使用for-loop">🌊</a>使用for-loop</h3><figure class="highlight java">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">useLoop</span><span class="params">(String[] arr, String targetValue)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(String s: arr)&#123;</span><br><span class="line"><span class="keyword">if</span>(s.equals(targetValue))</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><h3 id="使用二分"><a class="header-anchor" href="#使用二分">🌊</a>使用二分</h3><figure class="highlight java">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">useArraysBinarySearch</span><span class="params">(String[] arr, String targetValue)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a =  Arrays.binarySearch(arr, targetValue);</span><br><span class="line"><span class="keyword">if</span>(a &gt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><h2 id="时间复杂性"><a class="header-anchor" href="#时间复杂性">🌊</a>时间复杂性</h2><h3 id="代码"><a class="header-anchor" href="#代码">🌊</a>代码</h3><blockquote>  <p>使用如下代码来验证不同数据规模（5，1k，10k）的查找任务下四种方法的时间复杂性。（二分查找需要对数据排序，排序时间未计算在内。）</p></blockquote><figure class="highlight java">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String[] arr = <span class="keyword">new</span> String[] &#123;  <span class="string">"CD"</span>,  <span class="string">"BC"</span>, <span class="string">"EF"</span>, <span class="string">"DE"</span>, <span class="string">"AB"</span>&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//use list</span></span><br><span class="line"><span class="keyword">long</span> startTime = System.nanoTime();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">useList(arr, <span class="string">"A"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> endTime = System.nanoTime();</span><br><span class="line"><span class="keyword">long</span> duration = endTime - startTime;</span><br><span class="line">System.out.println(<span class="string">"useList:  "</span> + duration / <span class="number">1000000</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//use set</span></span><br><span class="line">startTime = System.nanoTime();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">useSet(arr, <span class="string">"A"</span>);</span><br><span class="line">&#125;</span><br><span class="line">endTime = System.nanoTime();</span><br><span class="line">duration = endTime - startTime;</span><br><span class="line">System.out.println(<span class="string">"useSet:  "</span> + duration / <span class="number">1000000</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//use loop</span></span><br><span class="line">startTime = System.nanoTime();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">useLoop(arr, <span class="string">"A"</span>);</span><br><span class="line">&#125;</span><br><span class="line">endTime = System.nanoTime();</span><br><span class="line">duration = endTime - startTime;</span><br><span class="line">System.out.println(<span class="string">"useLoop:  "</span> + duration / <span class="number">1000000</span>);</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><h3 id="5-结果"><a class="header-anchor" href="#5-结果">🌊</a>&quot;5&quot;结果</h3><figure class="highlight stylus">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>      </td>      <td class="code">        <pre><span class="line">useList:  <span class="number">13</span></span><br><span class="line">useSet:  <span class="number">72</span></span><br><span class="line">useLoop:  <span class="number">5</span></span><br></pre>      </td>    </tr>  </table></figure><h3 id="1k-结果"><a class="header-anchor" href="#1k-结果">🌊</a>&quot;1k&quot;结果</h3><h4 id="随机生成数据"><a class="header-anchor" href="#随机生成数据">🌊</a>随机生成数据</h4><figure class="highlight java">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>      </td>      <td class="code">        <pre><span class="line">String[] arr = <span class="keyword">new</span> String[<span class="number">1000</span>];</span><br><span class="line"> </span><br><span class="line">Random s = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt; <span class="number">1000</span>; i++)&#123;</span><br><span class="line">arr[i] = String.valueOf(s.nextInt());</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><h4 id="结果"><a class="header-anchor" href="#结果">🌊</a>结果</h4><figure class="highlight stylus">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>      </td>      <td class="code">        <pre><span class="line">useList:  <span class="number">112</span></span><br><span class="line">useSet:  <span class="number">2055</span></span><br><span class="line">useLoop:  <span class="number">99</span></span><br><span class="line">useArrayBinary:  <span class="number">12</span></span><br></pre>      </td>    </tr>  </table></figure><h3 id="10k-结果"><a class="header-anchor" href="#10k-结果">🌊</a>&quot;10k&quot;结果</h3><figure class="highlight stylus">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>      </td>      <td class="code">        <pre><span class="line">useList:  <span class="number">1590</span></span><br><span class="line">useSet:  <span class="number">23819</span></span><br><span class="line">useLoop:  <span class="number">1526</span></span><br><span class="line">useArrayBinary:  <span class="number">12</span></span><br></pre>      </td>    </tr>  </table></figure><h2 id="结论"><a class="header-anchor" href="#结论">🌊</a>结论</h2><p>通过以上结果，我们可以发现二分搜索确实很高效，而且当数据量变大时，其时间增长幅度还比较小。</p><p>以后，我们就可以使用<code>Arrays.binarySearch()</code>来高效查找某元素了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
  &lt;p&gt;查找是比较常见的工作，今天我通过对比几种在数组中查找一个确定的值的例子来向大家展示二分查找的魅力。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;数组查找元素的几种方法&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#数
      
    
    </summary>
    
      <category term="Java开发Tips" scheme="http://meng.uno/categories/Java%E5%BC%80%E5%8F%91Tips/"/>
    
      <category term="Search" scheme="http://meng.uno/categories/Java%E5%BC%80%E5%8F%91Tips/Search/"/>
    
    
      <category term="Java" scheme="http://meng.uno/tags/Java/"/>
    
      <category term="算法复杂性" scheme="http://meng.uno/tags/%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E6%80%A7/"/>
    
      <category term="二分查找" scheme="http://meng.uno/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
  </entry>
  
  <entry>
    <title>Java Substring() 的实现</title>
    <link href="http://meng.uno/posts/f3057e6c/"/>
    <id>http://meng.uno/posts/f3057e6c/</id>
    <published>2018-02-08T07:43:08.000Z</published>
    <updated>2018-02-09T10:46:20.937Z</updated>
    
    <content type="html"><![CDATA[<p>写过Java的人应该都用过<code>substring(int bedinIndex, int endIndex)</code>方法。我发现这个简单的方法在实现上居然经过了一次大的变革。</p><h2 id="substring-的用途"><a class="header-anchor" href="#substring-的用途">🌊</a>substring()的用途</h2><p>代码:</p><figure class="highlight">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>      </td>      <td class="code">        <pre><span class="line">String origin = "asdfg"; </span><br><span class="line">origin = origin.substring(1,3);</span><br><span class="line">System.out.println(origin);</span><br></pre>      </td>    </tr>  </table></figure><p>输出:</p><figure class="highlight stylus">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br></pre>      </td>      <td class="code">        <pre><span class="line">sd</span><br></pre>      </td>    </tr>  </table></figure><p>我们发现它能将原始字符串中从下标为beginIndex到endIndex-1之间的子串取出。那它是怎么实现的呢？</p><h2 id="substring-的实现"><a class="header-anchor" href="#substring-的实现">🌊</a>substring()的实现</h2><blockquote>  <p>Java中的字符串有三个域：char value[], int offset以及int count，它们分别存储字符串的值，起始下标与长度。</p></blockquote><h3 id="jdk6版本"><a class="header-anchor" href="#jdk6版本">🌊</a>JDK6版本</h3><p>在这个版本中，每次执行substring()方法时并不会新建新的string，仅仅只是将上述三个域中的offset，count做必要的修改。返回对象仍指向原来的数据。</p><p><img src="http://www.meng.uno/images/substring_jdk.png" alt="Substring()实现版本一"></p><p>这样一来，<strong><em>缺点</em></strong>就比较明显：当原始字符串比较长，而截取的子串比较短时，在后续的使用中就会浪费大量的空间。</p><h3 id="jdk7-版本"><a class="header-anchor" href="#jdk7-版本">🌊</a>JDK7+版本</h3><p>在上一个版本基础上，这个方法进行了改进，每次使用这个方法都会新建一个string对象，并将其返回。</p><p><img src="http://www.meng.uno/images/substring_jdk7.png" alt="Substring()实现版本二"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;写过Java的人应该都用过&lt;code&gt;substring(int bedinIndex, int endIndex)&lt;/code&gt;方法。我发现这个简单的方法在实现上居然经过了一次大的变革。&lt;/p&gt;
&lt;h2 id=&quot;substring-的用途&quot;&gt;&lt;a class=&quot;heade
      
    
    </summary>
    
      <category term="Java开发Tips" scheme="http://meng.uno/categories/Java%E5%BC%80%E5%8F%91Tips/"/>
    
    
      <category term="Java" scheme="http://meng.uno/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java异常处理</title>
    <link href="http://meng.uno/posts/7526d370/"/>
    <id>http://meng.uno/posts/7526d370/</id>
    <published>2018-02-01T14:21:52.000Z</published>
    <updated>2018-02-10T14:51:35.019Z</updated>
    
    <content type="html"><![CDATA[<p>在Java中，调用某方法，就必须处理被调用方法抛出的异常，同时超类也可以用来捕获或者处理子类异常。</p><h2 id="调用方法必须处理被调用方法抛出的异常"><a class="header-anchor" href="#调用方法必须处理被调用方法抛出的异常">🌊</a>调用方法必须处理被调用方法抛出的异常</h2><p>下面是一个处理异常的程序。我们可以测试一下，如果在一个方法中抛出一个异常，不仅是该方法，而且所有调用该方法的方法都必须声明或抛出异常。</p><figure class="highlight java">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">exceptionTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Exception exception;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            callDoOne(); </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doOne</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> exception;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">callDoOne</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        doOne();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><h2 id="超类可以用来捕获或处理子类异常"><a class="header-anchor" href="#超类可以用来捕获或处理子类异常">🌊</a>超类可以用来捕获或处理子类异常</h2><p>可以使用如下代码验证。</p><figure class="highlight java">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">exceptionTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Exception exception;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> myException myexception;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            callDoOne(); </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doOne</span><span class="params">()</span> <span class="keyword">throws</span> myException </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> myexception;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">callDoOne</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        doOne();</span><br><span class="line">        <span class="keyword">throw</span> exception;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>这也就是为什么catch子句只有一个父类在语法上安全的原因。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在Java中，调用某方法，就必须处理被调用方法抛出的异常，同时超类也可以用来捕获或者处理子类异常。&lt;/p&gt;
&lt;h2 id=&quot;调用方法必须处理被调用方法抛出的异常&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#调用方法必须处理被调用方法抛出的异常&quot;&gt;🌊&lt;
      
    
    </summary>
    
      <category term="Java开发Tips" scheme="http://meng.uno/categories/Java%E5%BC%80%E5%8F%91Tips/"/>
    
      <category term="Exception" scheme="http://meng.uno/categories/Java%E5%BC%80%E5%8F%91Tips/Exception/"/>
    
    
      <category term="Java" scheme="http://meng.uno/tags/Java/"/>
    
      <category term="Exception" scheme="http://meng.uno/tags/Exception/"/>
    
  </entry>
  
  <entry>
    <title>Analysis For Hyperkernel</title>
    <link href="http://meng.uno/posts/55c9299d/"/>
    <id>http://meng.uno/posts/55c9299d/</id>
    <published>2018-01-29T13:43:03.000Z</published>
    <updated>2018-02-10T14:56:55.140Z</updated>
    
    <content type="html"><![CDATA[<blockquote>  <p>Homepage: <a href="https://locore.cs.washington.edu/hyperkernel/" target="_blank" rel="noopener">https://locore.cs.washington.edu/hyperkernel/</a><br> Code: <a href="https://github.com/locore/hv6" target="_blank" rel="noopener">https://github.com/locore/hv6</a></p></blockquote><h2 id="state-machine-specification"><a class="header-anchor" href="#state-machine-specification">🌊</a>State-machine Specification</h2><p>State-machine specification means the system function will first verify the old procedure until the procedure is runnable and then return a new procedure and write to the system image. All of these must run in the user level. This specification consists  of two parts: a definition of abstract kernel state, and a definition of trap handlers (e.g., system calls) in terms of abstract state transitions. They use fully automated technique to find bugs and this method is full functional verification if program  is free of loops and state is finite.</p><p>The “hv6/hv6/spec/kernel/spec/specs.py” file contains the system calls which use this kind of specification. From the picture, we can see that they use Z3 to prove the correction of the “old” procedure and if it can transfer to a new state or it is runnable,  it will return the new procedure so that it can be proved true.</p><h2 id="declarative-specification"><a class="header-anchor" href="#declarative-specification">🌊</a>Declarative Specification</h2><p>The authors also provide a declarative specification of the high level properties that the state-machine specification should satisfy. The verifier will check that these high level properties are indeed satisfied, helping increase the programmer’s confidence  in the correctness of the state-machine specification. To improve confidence in its correctness, there is a higher-level declarative specification to better capture programmer intuition about kernel behavior, in the form of a conjunction of crosscutting  properties that hold across all trap handlers.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
  &lt;p&gt;Homepage: &lt;a href=&quot;https://locore.cs.washington.edu/hyperkernel/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://locore.cs.washing
      
    
    </summary>
    
      <category term="操作系统" scheme="http://meng.uno/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="系统验证" scheme="http://meng.uno/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E9%AA%8C%E8%AF%81/"/>
    
    
      <category term="System" scheme="http://meng.uno/tags/System/"/>
    
      <category term="Verification" scheme="http://meng.uno/tags/Verification/"/>
    
  </entry>
  
  <entry>
    <title>怎么处理噪声</title>
    <link href="http://meng.uno/posts/a12d1477/"/>
    <id>http://meng.uno/posts/a12d1477/</id>
    <published>2018-01-27T14:35:33.000Z</published>
    <updated>2018-02-10T14:51:35.018Z</updated>
    
    <content type="html"><![CDATA[<p>处理噪声是一个在机器学习学习过程中，总会被问到的问题。噪声可以出现在输入<code>X</code>，亦可以出现在输出<code>Y</code>中。</p><h2 id="x中缺失值"><a class="header-anchor" href="#x中缺失值">🌊</a><code>X</code>中缺失值</h2><ol>  <li>使用来自所有可用数据的特征的平均值</li>  <li>忽略实例</li>  <li>使用来自类似项目的平均值</li>  <li>使用另一个机器学习算法来预测值</li></ol><ul>  <li>Bagging 或者 Boosting</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;处理噪声是一个在机器学习学习过程中，总会被问到的问题。噪声可以出现在输入&lt;code&gt;X&lt;/code&gt;，亦可以出现在输出&lt;code&gt;Y&lt;/code&gt;中。&lt;/p&gt;
&lt;h2 id=&quot;x中缺失值&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#x中缺失值&quot;&gt;🌊&lt;
      
    
    </summary>
    
      <category term="AI（人工智能）" scheme="http://meng.uno/categories/AI%EF%BC%88%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%EF%BC%89/"/>
    
      <category term="机器学习" scheme="http://meng.uno/categories/AI%EF%BC%88%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%EF%BC%89/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="http://meng.uno/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="噪声" scheme="http://meng.uno/tags/%E5%99%AA%E5%A3%B0/"/>
    
  </entry>
  
  <entry>
    <title>Analysis for Yggdrasil</title>
    <link href="http://meng.uno/posts/5ed9f695/"/>
    <id>http://meng.uno/posts/5ed9f695/</id>
    <published>2018-01-16T14:31:00.000Z</published>
    <updated>2018-02-11T14:48:52.840Z</updated>
    
    <content type="html"><![CDATA[<p>Yggdrasil is a toolkit for verifying file system with push-button verification via crash refinement. As for push-button verification, it means that Yggdrasil needs no manual annotations or proofs. As for crash refinement, it is amenable to fully automated  SMT reasoning. The whole verification is something like the State-Machine Specification in the project “Hyperkernel”.</p><p>The whole system architecture is shown as follows.</p><p><img src="http://www.meng.uno/images/yggdrasil/1.png" alt="Yggdrasil"></p><p>From this picture, we know that Yggdrasil needs three inputs: a specification of the expected behavior, an implementation and consistency invariants which indicate whether a file system image is in a consistent state or not. For better run-time performance,  Yggdrasil optionally performs optimizations. If there is a bug, Yggdrasil produces a counterexample to help identify and fix the cause. It requires no manual annotations or proofs about the implementation code. Once the verification passes, Yggdrasil  emits C code, which is then compiled and linked using a C compiler to produce an executable file system, as well as a “fsck” checker.</p><p>The above is the entire overall content of this project. The authors also introduced every part of this project. I will analyze it by following the paper.</p><h2 id="single-level-file-system-yminlfs"><a class="header-anchor" href="#single-level-file-system-yminlfs">🌊</a>Single-level File System (YminLFS)</h2><p>In this project, every file system must contain three parts: an abstract data structure, a set of operations and a state equivalence predicate which defines whether a given implementation satisfies the specification. So the authors first defines a file  system which contains these features.</p><p><img src="http://www.meng.uno/images/yggdrasil/2.png" alt="Yggdrasil"></p><p><img src="http://www.meng.uno/images/yggdrasil/3.png" alt="Yggdrasil"></p><p><img src="http://www.meng.uno/images/yggdrasil/4.png" alt="Yggdrasil"></p><p><img src="http://www.meng.uno/images/yggdrasil/5.png" alt="Yggdrasil"></p><p>Then it runs the verification. Yggdrasil uses the Z3 solver to prove a two-part crash refinement.</p><p>The first part deals with crash-free executions which requires the implementation and specification are similar in the absence of crashes, which means if both YminLFS and FSSpec start in equivalent and consistent states, they end up in equivalent and  consistent states (just like state-machine). This project defines equivalence using the equivalent predicate and defines consistency using the consistency invariants as the above pictures show.</p><p>The second part deals with crash executions which requires the implementation to exist no more crash states than the specification, which means each possible state of the YminLFS implementation must be equivalent to some crash state of FSSpec. What’s  more, Yggdrasil provides a greedy optimizer that tries to remove every disk flush and re-verify the code.</p><h2 id="multi-level-file-system-yxv6"><a class="header-anchor" href="#multi-level-file-system-yxv6">🌊</a>Multi-level File System (Yxv6)</h2><p>We could directly prove crash refinement between the entire file system specification and implementation in a single-level file system, however, we couldn’t use the same method in a complex multi-level file system. First, let’s look at the structure of  Yxv6 journaling file system.</p><p><img src="http://www.meng.uno/images/yggdrasil/6.png" alt="Yggdrasil"></p><p>This is the 5 layers of abstraction and every layer contains a specification and a implementation. The authors use this project to prove crash refinement for each layer and upper layers then use the specifications of lower layers. The lowest layer of  the stack is a specification of an asynchronous disk. This specification comprises the asynchronous disk model which is to implement YminLFS.</p><h2 id="application-level-ycp"><a class="header-anchor" href="#application-level-ycp">🌊</a>Application-level (“Ycp”)</h2><p>Ycp has a formal specification which means if the copy operation succeeds, the result is the same as “cp”, however, if it fails, the file system is unchanged. To achieve this propose, the implementation of Ycp is something similar to Yxv6 file system  specification. There are 3 atomicity patterns which are “create a temporary file”, “write the source data to it” and “rename it to atomically create the target file”. After doing such an analogy, verifying this operation is similar to verify the single-level  file system.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Yggdrasil is a toolkit for verifying file system with push-button verification via crash refinement. As for push-button verification, it 
      
    
    </summary>
    
      <category term="System Verification" scheme="http://meng.uno/categories/System-Verification/"/>
    
      <category term="Yggdrasil" scheme="http://meng.uno/categories/System-Verification/Yggdrasil/"/>
    
    
      <category term="Yggdrasil" scheme="http://meng.uno/tags/Yggdrasil/"/>
    
      <category term="System Verification" scheme="http://meng.uno/tags/System-Verification/"/>
    
  </entry>
  
  <entry>
    <title>KVM Unit Tests</title>
    <link href="http://meng.uno/posts/50351d5d/"/>
    <id>http://meng.uno/posts/50351d5d/</id>
    <published>2018-01-15T14:19:40.000Z</published>
    <updated>2018-02-11T14:48:52.840Z</updated>
    
    <content type="html"><![CDATA[<p>Kernel-based Virtual Machine (KVM) is a virtualization infrastructure for the Linux kernel that turns it into a hypervisor. KVM requires a processor with hardware virtualization extensions.</p><p>This project, as its name suggests, is to provide unit tests for KVM. The unit tests are tiny guest operating systems that generally execute only tens of lines of C and assembler test code in order to obtain its PASS/FAIL/SKIP result. Unit tests provide  KVM and virtual hardware functional testing by targeting the features through minimal implementations of their use per the hardware specification. The simplicity of unit tests make them easy to verify they are correct, easy to maintain, and easy to  use in timing measurements. Unit tests are also often used for quick and dirty bug reproducers.</p><h2 id="build-and-run"><a class="header-anchor" href="#build-and-run">🌊</a>Build and Run</h2><p>Building this project is very easy, we just need to enter the directory and run “./configure; make”. If there isn’t any mistake, it means this project is successfully built. As can be seen from its name, it is a testing program so running it means running  some tests on KVM. In addition, as other verification systems, it also has some single test cases and a whole test suite. What has to be aware is we need to install “kvm” or “qemu-kvm” before testing, otherwise, the tests will just “SKIP” because it  is just for testing KVM.</p><p>First, I will run a single test case which is in the “x86/” directory named “syscall.flat”. The result is as follows.</p><p><img src="http://www.meng.uno/images/kvm/1.png" alt="KVM"></p><p>Then, I will run a test suite. The following picture is part of the result. I found that there are 3 status of the test results which are PASS, FAIL and SKIP.</p><p><img src="http://www.meng.uno/images/kvm/2.png" alt="KVM"></p><p>From the picture, we can see that not all tests are PASS, which means this version of KVM may have many points to be improved.</p><h2 id="analyze-the-test"><a class="header-anchor" href="#analyze-the-test">🌊</a>Analyze the Test</h2><p>To write a test case/suite, we first need to analyze an example. From the file “run_tests.sh”, we could find that it runs each test in “x86/unittests.cfg”. This is a section of this file. From it, we could know that when the test suite runs to here, it  will find test case “apic.flat” and run it in the x86_64 architecture within 30 seconds.</p><p><img src="http://www.meng.uno/images/kvm/3.png" alt="KVM"></p><p>The result of every test case is printed to the screen by the “runtime.bash” script.</p><p><img src="http://www.meng.uno/images/kvm/4.png" alt="KVM"></p><p>What’s more, we could find the detailed information of every test case from “logs/” directory.</p><p><img src="http://www.meng.uno/images/kvm/5.png" alt="KVM"></p><p>After analyzing a test suite, let’s look at a single test case. I will choose the “syscall.flat” as an example. Let’s see the main function. There are two subfunctions which is consistent with the first screenshot.</p><p><img src="http://www.meng.uno/images/kvm/6.png" alt="KVM"></p><p>Now I will focus on a single function as the following picture shows. It just tests some single function calls and report the results.</p><p><img src="http://www.meng.uno/images/kvm/7.png" alt="KVM"></p><h2 id="write-a-test"><a class="header-anchor" href="#write-a-test">🌊</a>Write A Test</h2><p>Because I can’t know about KVM clearly for such a short period of time, here I just write a simple test, in order to experience how to write a test case.</p><p><img src="http://www.meng.uno/images/kvm/8.png" alt="KVM"></p><p>After compiling and running it, we could get this expected output.</p><p><img src="http://www.meng.uno/images/kvm/9.png" alt="KVM"></p><p>Now I could put my test case to the test suite, adding such code to the “unittests.cfg” file.</p><p><img src="http://www.meng.uno/images/kvm/10.png" alt="KVM"></p><p>Also, it must be PASS as expected.</p><p><img src="http://www.meng.uno/images/kvm/11.png" alt="KVM"></p><h2 id="analyze-the-framework"><a class="header-anchor" href="#analyze-the-framework">🌊</a>Analyze the Framework</h2><p>In the beginning, let’s analyze the directory structure.</p><p><img src="http://www.meng.uno/images/kvm/12.png" alt="KVM"></p><ul>  <li>./api/: there are three API categories 1) libc, 2) functions typical of kernel code, and 3) kvm-unit-tests specific.</li>  <li>./lib/: general architecture neutral services for the tests.</li>  <li>./x86/: the sources of the tests and the created images of X86 architecture.</li>  <li>./logs/: the output information.</li>  <li>./scripts/: helper scripts for building and running tests.</li>  <li>others: configure script, top-level Makefile, and run_tests.sh.</li></ul><p>The framework has the following components:</p><ul>  <li>Test building support</li>  <li>Shared code for test setup and API</li>  <li>Test running support</li></ul><p>Test building is done through makefiles and some supporting bash scripts. Test setup code includes, for example, early system init, MMU enablement, and UART init. The API provides some common libc functions, as well as some low-level helper functions  commonly seen in kernel code and some kvm-unit-tests specific APIs. Test running is provided with a few bash scripts, using a unit tests configuration file as input. Generally tests are run from within the source root directory using the supporting  scripts, but tests may optionally be built as standalone tests as well.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Kernel-based Virtual Machine (KVM) is a virtualization infrastructure for the Linux kernel that turns it into a hypervisor. KVM requires 
      
    
    </summary>
    
      <category term="KVM" scheme="http://meng.uno/categories/KVM/"/>
    
    
      <category term="KVM" scheme="http://meng.uno/tags/KVM/"/>
    
  </entry>
  
  <entry>
    <title>Analysis for DynamoRIO</title>
    <link href="http://meng.uno/posts/a331aaad/"/>
    <id>http://meng.uno/posts/a331aaad/</id>
    <published>2018-01-13T13:57:16.000Z</published>
    <updated>2018-02-11T14:04:49.152Z</updated>
    
    <content type="html"><![CDATA[<p>DynamoRIO is a dynamic binary piling/translation platform. Through it, you can manipulate the running code of a program, that is, it can simulate running a program and allow you to transform and control any place of the running code. It is used for dynamic  analysis, optimization and translation of programs.</p><p>DynamoRIO is a cooperation project between HP and MIT. Dynamo comes from HP’s laboratory, RIO (Runtime Introspection and Optimization) comes from MIT’s computer science laboratory. The history is shown as follows.</p><p><img src="http://www.meng.uno/images/rio/1.png" alt="RIO"></p><h2 id="architecture"><a class="header-anchor" href="#architecture">🌊</a>Architecture</h2><p>DynamoRIO’s architecture is like this. It is between the operating system and the application so that it can get the system calls and the applications’ code easily.</p><p><img src="http://www.meng.uno/images/rio/2.png" alt="RIO"></p><p>This picture is the Toolchain Control Points.</p><p><img src="http://www.meng.uno/images/rio/3.png" alt="RIO"></p><p>The process flow is as follows. The original program goes through the “basic block builder”, “trace selector”, “basic block cache” and “trace cache” to get the emulation propose.</p><p><img src="http://www.meng.uno/images/rio/4.png" alt="RIO"></p><h2 id="efficiency"><a class="header-anchor" href="#efficiency">🌊</a>Efficiency</h2><p>DynamoRIO is separated from the code of applications by the “context switch” as shown in the picture above. The applications’ code is copied to the instruction cache. The code in these caches will execute as native code. Until a jump instruction is encountered,  the applications’ “machine state” will be saved, and the control will turn back to DynamoRIO to find the basic block where the jump instruction is located. DynamoRIO is much faster than pure emulations by “code cache”.</p><p><img src="http://www.meng.uno/images/rio/5.png" alt="RIO"></p><p>There are several improvements in this project. The picture above is the first one — Basic Block Cache. If you copy each basic block into a code cache and run it natively, it greatly reduces the overhead of interpreting, however, we still need to explain  each jump instruction, and then return to DynamoRIO to find the target instruction. If a target instruction already exists in the code cache and is referred to by a direct jump instruction, DynamoRIO can directly jump to the target instruction in the  code cache to avoid the overhead of the context switch, which is called “Linking Direct Branches”.</p><p><img src="http://www.meng.uno/images/rio/6.png" alt="RIO"></p><p>The next improvement is “Linking Indirect Branches” since a conditional branch instruction can not be linked like a direct jump instruction because it has more than one goal and needs to make decisions and find the list’s jump target.</p><p><img src="http://www.meng.uno/images/rio/7.png" alt="RIO"></p><p>Some basic blocks, which are often executed sequentially, are combined into one execution stream to reduce the number of branches and increase the locality of the program. It reduces some overhead of indirect branch search, because it has put indirect  brach in this trace as well. This is also the last improvement — Trace Building.</p><p><img src="http://www.meng.uno/images/rio/8.png" alt="RIO"></p><h2 id="transparency"><a class="header-anchor" href="#transparency">🌊</a>Transparency</h2><p>It has three transparency principles which are “As few changes as possible”, “Hide necessary changes” and “Separate resources”. Changes in these areas are few: application code, stored addresses, threads and application data. Changes in these fields are  hidden: application addresses, address space, error transparency and code cache consistency. This picture shows the principle 3 well. DynamoRIO’s own code also uses share libraries when loading applications, which may cause some conflicts if the application  also uses the same library. The solution is that, DynamoRIO doesn’t use the library directly, calling system call on Linux and calling system call via windows win32 API profile.</p><p><img src="http://www.meng.uno/images/rio/9.png" alt="RIO"></p><p>The heap memory allocated by DynamoRIO itself is distinguished from the heap memory requested by the application. In addition, DynamoRIO uses its own I/O routines for input and output to avoid conflicts with the applications’ I/O buffers. What’s more,  since the use of shared locks can also cause conflicts between DynamoRIO and applications, it also has synchronization transparency.</p><p>To avoid conflicts with applications, DynamoRIO doesn’t create its own thread, instead spawns threads in the application process to distinguish between its own status and applications’ status via a “Context Switch” as the first picture shows. Further  more, it chooses to leave the stack of application processes intact, creating a private stack of each thread.</p><h2 id="comprehensive"><a class="header-anchor" href="#comprehensive">🌊</a>Comprehensive</h2><p>All data streams must go through handlers generated by the dispatcher. The data flow is like this.</p><p><img src="http://www.meng.uno/images/rio/10.png" alt="RIO"></p><h2 id="customization"><a class="header-anchor" href="#customization">🌊</a>Customization</h2><p>DynamoRIO has developed some event driven APIs that allow developers to customize instrument instructions. Using it, you can achieve some proposes such as: memory checking, performance testing, system call tracking, code coverage calculation.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;DynamoRIO is a dynamic binary piling/translation platform. Through it, you can manipulate the running code of a program, that is, it can 
      
    
    </summary>
    
      <category term="RIO" scheme="http://meng.uno/categories/RIO/"/>
    
      <category term="DynamoRIO" scheme="http://meng.uno/categories/RIO/DynamoRIO/"/>
    
    
      <category term="DynamoRIO" scheme="http://meng.uno/tags/DynamoRIO/"/>
    
      <category term="RIO" scheme="http://meng.uno/tags/RIO/"/>
    
  </entry>
  
  <entry>
    <title>Zsh</title>
    <link href="http://meng.uno/posts/d911b12b/"/>
    <id>http://meng.uno/posts/d911b12b/</id>
    <published>2018-01-11T02:22:44.000Z</published>
    <updated>2018-02-11T03:08:26.198Z</updated>
    
    <content type="html"><![CDATA[<blockquote>  <p>不少程序员都觉得Mac的一大优势就是其Shell，也有很多人觉得Mac与Linux在Shell上很相似。不错，但是Mac还是略胜一筹或者说高一个量级。今天，我将向大家介绍一个Mac特有的Shell（Linux也可以安装，但是不是系统自带。）—— Zsh。</p></blockquote><h2 id="切换到zsh"><a class="header-anchor" href="#切换到zsh">🌊</a>切换到Zsh</h2><p>使用<code>cat /etc/shells</code>指令，我们可以看看自己的系统有哪些Shells，下面是我的Mac的结果：</p><figure class="highlight stylus">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre>      </td>      <td class="code">        <pre><span class="line">/bin/bash</span><br><span class="line">/bin/csh</span><br><span class="line">/bin/ksh</span><br><span class="line">/bin/sh</span><br><span class="line">/bin/tcsh</span><br><span class="line">/bin/zsh</span><br><span class="line">/usr/local/bin/fish</span><br></pre>      </td>    </tr>  </table></figure><p>使用这个指令切换到Zsh：<code>chsh -s /bin/zsh</code>。（想使用其他Shell也是同样的指令哦。）</p><p>这是，我们的Shell配置文件就为<code>.zshrc</code>了。</p><blockquote>  <p>我觉得从这里我们应该可以知道，为什么之前的Shell配置文件要以<code>.bash_profile</code>命名了吧。因为Mac默认Shell是Bash。</p></blockquote><h2 id="迁移bash配置"><a class="header-anchor" href="#迁移bash配置">🌊</a>迁移Bash配置</h2><p>我使用Bash有好几年了，那些配置都是一些环境变量啊什么的，如果在Zsh的配置里再写一遍，无疑是一件很费时又低效的事。那有没有什么快捷的方式呢？当然有！</p><p>通过如下指令：<code>source ~/.bash_profile</code>就可以将<code>.bash_profile</code>里的配置全部引入到<code>.zshrc</code>中了。同理，如果你想自己写配置，也可以通过这种方式引入。（后文你将看到一个第三方工具就是这么做的。）</p><h2 id="安装oh-my-zsh"><a class="header-anchor" href="#安装oh-my-zsh">🌊</a>安装oh my zsh</h2><p>通过<code>wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</code>指令安装。</p><p>这时我们发现在<code>.zshrc</code>文件中，多了两行：</p><figure class="highlight stylus">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br></pre>      </td>      <td class="code">        <pre><span class="line">export ZSH=/Users/NAME/.oh-my-zsh</span><br><span class="line">source <span class="variable">$ZSH</span>/oh-my-zsh.sh</span><br></pre>      </td>    </tr>  </table></figure><h2 id="自定义shell主题"><a class="header-anchor" href="#自定义shell主题">🌊</a>自定义Shell主题</h2><p>使用oh my zsh主要的原因是使用其提供的漂亮的主题，主题目录在<code>.oh-my-zsh/themes/</code>下，选择主题<code>ZSH_THEME=&quot;robbyrussell&quot;</code>。这时我的Shell主题就是robbyrussell了。</p><p>打开robbyrussell.zsh-theme文件，我们可以看见几条配置。</p><p>我将其中的<code>PROMPT</code>修改为：</p><p><code>PROMPT='${ret_status} %{$fg[cyan]%}%d %{$reset_color%} $(git_prompt_info)%{$fg_bold[red]%}&gt;%{$fg_bold[yellow]%}&gt;%{$fg_bold[green]%}&gt; '</code></p><p>这时我的Shell就变成了这样：</p><p><img src="http://www.meng.uno/images/zsh.png" alt="Zsh"></p><p>可以发现我的定制有：显示绝对路径，<code>&gt;&gt;&gt;</code>等。</p><p>还有很多主题与配置，大家可以自己尝试。</p><h2 id="定制shell"><a class="header-anchor" href="#定制shell">🌊</a>定制Shell</h2><p>Zsh还有个功能就是“别名”。不知道大家有没有这样的经历，需要打开<code>.plist</code>这样的文件，如果用普通编辑器打开会非常界面不友好，而用Xcode打开则完美可观。那怎么在控制台直接用Xcode打开文件呢？（其他软件同理）</p><p>我在<code>.zshrc</code>中添加：<code>alias xcode=&quot;/Applications/Xcode.app/Contents/MacOS/Xcode&quot;</code>，之后我就可以使用<code>xcode X</code>来用Xcode打开X文件了。</p><p>我们也可以为某种类型文件设置默认打开方式：<code>alias -s html=atom</code>（当我们键入<code>.html</code>文件时，会自动用Atom打开）。</p><h2 id="安装插件"><a class="header-anchor" href="#安装插件">🌊</a>安装插件</h2><p>oh my zsh为Zsh提供了100+插件，如果我们需要安装某插件，只需要在<code>.zshrc</code>文件中的<code>plugins=()</code>中添加，用空格隔开，只需要填插件名字，默认添加了<code>git</code>。</p><p>在这里我向大家介绍几种网上很常见的插件：</p><ol>  <li><code>git</code>当你处于一个 git 受控的目录下时，Shell 会明确显示 「git」和 branch，如上图所示，另外对 git 很多命令进行了简化，例如 gco=’git checkout’、gd=’git diff’、gst=’git status’、g=’git’等等，熟练使用可以大大减少 git 的命令长度，命令内容可以参考~/.oh-my-zsh/plugins/git/git.plugin.zsh。</li>  <li><code>osx</code>tab 增强，quick-look filename 可以直接预览文件，man-preview grep 可以生成 grep手册 的pdf 版本等。</li>  <li><code>autojump</code>像他的名字一样，提供自动补全等很多功能，大家自己去尝试吧。</li></ol><p><strong>注意：安装autojump建议使用Homebrew</strong></p><p><code>brew install autojump</code></p><p>然后按照提示将一句类似这个</p><p><code>[ -f /usr/local/etc/profile.d/autojump.sh ] &amp;&amp; . /usr/local/etc/profile.d/autojump.sh</code></p><p>的句子插入到<code>.zshrc</code>文件中即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
  &lt;p&gt;不少程序员都觉得Mac的一大优势就是其Shell，也有很多人觉得Mac与Linux在Shell上很相似。不错，但是Mac还是略胜一筹或者说高一个量级。今天，我将向大家介绍一个Mac特有的Shell（Linux也可以安装，但是不是系统自带。）——
      
    
    </summary>
    
      <category term="Shells" scheme="http://meng.uno/categories/Shells/"/>
    
    
      <category term="Zsh" scheme="http://meng.uno/tags/Zsh/"/>
    
  </entry>
  
  <entry>
    <title>Deep Learning上手工具</title>
    <link href="http://meng.uno/posts/99be2c50/"/>
    <id>http://meng.uno/posts/99be2c50/</id>
    <published>2018-01-10T14:43:43.000Z</published>
    <updated>2018-02-10T14:51:35.020Z</updated>
    
    <content type="html"><![CDATA[<p>现在Deep Learning太火了，以至于没有任何计算机基础的人都想使用它，那么对于新手，甚至连Python代码都写不好的DL爱好者，有什么上手工具么？选择合适的工具可以帮助学习更快，很巧的是，有很多不同的工具可供选择，下图列出了常用的工具。</p><p><img src="http://www.meng.uno/images/tools_dp.png" alt="DL"></p><p>谷歌开发的<code>Tensorflow</code>，微软的<code>CNTK</code>以及<code>Theano</code>都是为深度学习而开发的库，它们促进了使用<code>GPU</code>计算。他们并不难，但与<code>Keras</code>相比，他们仍然非常复杂。<code>Keras</code>只是使用底层深度学习库的界面。使用<code>Keras</code>就像玩乐高一样简单。我建议初学者从<code>Keras</code>开始，因为我们可以快速了解深度学习可以做些什么，并积极进行一些有趣的项目。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;现在Deep Learning太火了，以至于没有任何计算机基础的人都想使用它，那么对于新手，甚至连Python代码都写不好的DL爱好者，有什么上手工具么？选择合适的工具可以帮助学习更快，很巧的是，有很多不同的工具可供选择，下图列出了常用的工具。&lt;/p&gt;
&lt;p&gt;&lt;img sr
      
    
    </summary>
    
      <category term="AI（人工智能）" scheme="http://meng.uno/categories/AI%EF%BC%88%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%EF%BC%89/"/>
    
      <category term="Deep Learning" scheme="http://meng.uno/categories/AI%EF%BC%88%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%EF%BC%89/Deep-Learning/"/>
    
    
      <category term="Deep Learning" scheme="http://meng.uno/tags/Deep-Learning/"/>
    
  </entry>
  
  <entry>
    <title>CryptoMinisat</title>
    <link href="http://meng.uno/posts/7d26fe8/"/>
    <id>http://meng.uno/posts/7d26fe8/</id>
    <published>2018-01-10T13:50:36.000Z</published>
    <updated>2018-02-11T14:04:49.150Z</updated>
    
    <content type="html"><![CDATA[<p>Inspired by other verification system projects, I want to further explore the means of verification they used such as SMT solver, SAT solver, Coq and so on. I’ll start with this report from an advanced SAT solver — CryptoMinisat. (I have written a report  about STP which is a SMT solver.)</p><p>The Boolean Satisfiability Problem (SAT for short) is the problem of determining if there exists an interpretation that satisfies a given boolean formula. In other words, it asks whether the variables of a given boolean formula can be consistently replaced  by the values TRUE or FALSE in such a way that the formula evaluates to TRUE. If this is the case, the formula is called satisfiable. Otherwise, the formula is unsatisfiable.</p><p>SAT solvers have recently been enjoying a boom in the application front: more and more applications can and do make use of SAT solvers to accomplish tasks ranging from the fairly trivial to the very complex. The benefit of the incredible improvements  in the design of efficient SAT solvers those recent years is now reaching our lives: The Intel Core7 processor for instance has been designed with the help of SAT technology, while the device drivers of Windows 7 are being certified thanks to an SMT  solver (based on a SAT solver).</p><h2 id="build-and-test"><a class="header-anchor" href="#build-and-test">🌊</a>Build and Test</h2><p>This is the 5th version of CryptoMinisat which means the install instruction is very prefect now. To build and test this project, all we have to do is following the instruction. Firstly, we need to install many dependencies. Then, it is very simple to  build by “make”. The following is part of the output.</p><p><img src="http://www.meng.uno/images/cryptominisat/1.png" alt="CryptoMinisat"></p><p>Testing this project is very easy by the script written by the authors. Typing “make test” and waiting for a moment, we will get this output which means the tests are correct.</p><p><img src="http://www.meng.uno/images/cryptominisat/2.png" alt="CryptoMinisat"></p><h2 id="run-this-project"><a class="header-anchor" href="#run-this-project">🌊</a>Run This Project</h2><p>This is a very mature project which can be run from the terminal or used as a C++/Python library. In this report, I just choose the first way.</p><p>As I said before, this project is a SAT solver which means it could find out the situations which fulfill the input or return error. The grammar is very simple just like this.</p><p><img src="http://www.meng.uno/images/cryptominisat/3.png" alt="CryptoMinisat"></p><p>The first line means this input has 2 variables and 4 clauses. Every line is a clause which is ended by “0”. Using the third line as an example, it says that 2 is TRUE and 3 is FALSE. I use this file as an input and run it in the terminal. The result  is shown as follows. It means 1 is TRUE, 2 and 3 are FALSE is the only solution to this problem.</p><p><img src="http://www.meng.uno/images/cryptominisat/4.png" alt="CryptoMinisat"></p><p>This is another example and the result.</p><p><img src="http://www.meng.uno/images/cryptominisat/5.png" alt="CryptoMinisat"></p><p><img src="http://www.meng.uno/images/cryptominisat/6.png" alt="CryptoMinisat"></p><p>It means there isn’t a solution to this problem.</p><h2 id="how-it-works"><a class="header-anchor" href="#how-it-works">🌊</a>How It Works</h2><p>There are many improvements and techniques included in this project. It uses “Minisat” as its core and uses Gaussian Elimination on top-level. This is another part of its techniques.</p><ul>  <li>Variable elimination and replacement, strengthening and subsumption;</li>  <li>Gate-based clause shortening and removal;</li>  <li>No time or memory-outs on weird CNFs;</li>  <li>Variable renumbering and variable number hiding. due to this, XOR clauses are cut and the added variables are always consistently displayed;</li>  <li>Temporary results are stored in SQLite which supports high speed update;</li>  <li>XOR recovery.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Inspired by other verification system projects, I want to further explore the means of verification they used such as SMT solver, SAT sol
      
    
    </summary>
    
      <category term="solver" scheme="http://meng.uno/categories/solver/"/>
    
      <category term="SAT" scheme="http://meng.uno/categories/solver/SAT/"/>
    
    
      <category term="CryptoMinisat" scheme="http://meng.uno/tags/CryptoMinisat/"/>
    
      <category term="SAT" scheme="http://meng.uno/tags/SAT/"/>
    
      <category term="solver" scheme="http://meng.uno/tags/solver/"/>
    
  </entry>
  
  <entry>
    <title>Trinity</title>
    <link href="http://meng.uno/posts/664baed9/"/>
    <id>http://meng.uno/posts/664baed9/</id>
    <published>2018-01-05T14:37:53.000Z</published>
    <updated>2018-02-11T14:48:52.839Z</updated>
    
    <content type="html"><![CDATA[<p>As we all known, system call testing is very important to a system. System call fuzzers aren’t a particularly new idea. A few projects began from the mid-2000s with the aim of bringing more sophistication to the fuzz-testing process. One of them, Scrashme,  was started in 2006. Work on that project languished for a few years, and only picked up momentum starting in late 2010, when the authors began to devote significantly more time to its development. In December 2010, Scrashme was renamed to Trinity which  is this project.</p><p>Trinity is an intelligent system call fuzzer since it incorporates specific knowledge about each system call which is tested. Its thought is to reduce the time spent running “useless” tests, so reaching deeper into the tested code and increasing the chances  of testing a more interesting case that may result in an unexpected error.</p><h2 id="build-and-run"><a class="header-anchor" href="#build-and-run">🌊</a>Build and Run</h2><p>We can get the source code from GitHub, compile the code and invoke Trinity with a command line as simple as “./trinity”. Building this project is very simple, we just need to enter the directory and “./configure; make”. It’s so simple that the authors  didn’t write it out. The result of a successful “make” is like this:</p><p><img src="http://www.meng.uno/images/fuzzer/1.png" alt="Trinity"></p><p>Now let’s run it. I will test a system call “madvise” as an example.</p><p><img src="http://www.meng.uno/images/fuzzer/2.png" alt="Trinity"></p><p><img src="http://www.meng.uno/images/fuzzer/3.png" alt="Trinity"></p><p>From the above picture, we can see that there are 384 32 bits system calls and 333 64 bits system calls tested in this project (not all in this test case).</p><p>The log information of the main test process and its children processes are stored separately like this.</p><p><img src="http://www.meng.uno/images/fuzzer/4.png" alt="Trinity"></p><p>This project also has many other test modes which I didn’t test here. Trinity has been rather successful at finding bugs if we fully test it. It said that the authors of this project had sometimes left systems running for hours or days in order to discover  failures.</p><h2 id="analyze-the-test"><a class="header-anchor" href="#analyze-the-test">🌊</a>Analyze the Test</h2><p>Here is the segment of the code of system call “madvise”.</p><p><img src="http://www.meng.uno/images/fuzzer/5.png" alt="Trinity"></p><p>This is a structure definition, from which we can see Trinity has some understanding of the arguments for each system call. This is why it brings intelligence to its tests. The “.num_args” means that this system call need 3 parameters. These parameters  are “arg1, arg2, arg3” whose names and types are defined as the picture shows.</p><p>I found the architecture of Trinity from its website. From this picture, we know that the “trinity-main” process kicks off a number of child processes (It is 4 in this picture) that perform the system call tests. There is a shared memory region used to  record various pieces of global information, such as open file descriptor numbers, total system calls performed, and number of system calls that succeeded and failed. The shared memory region also records various information about each of the child  processes as the picture shown in the “Build and Run” section. The “trinity-watchdog” process ensures that the test system is still working correctly which is similar to the function of “Zookeeper” to “Hadoop”, I think.</p><p><img src="http://www.meng.uno/images/fuzzer/6.png" alt="Trinity"></p><h2 id="write-a-test"><a class="header-anchor" href="#write-a-test">🌊</a>Write A Test</h2><p>First, we need to select a system call for testing. I choose “getcpu” system call here from “syscalls.h” file. (We need to delete the original test file because all system call listed in “syscalls.h” are tested.) Then I write a new file to “/trinity/syscalls/”  directory named “meng.c” and the contents are as follows.</p><p><img src="http://www.meng.uno/images/fuzzer/7.png" alt="Trinity"></p><p>The type of parameters can be found at “syscall.h” as follows.</p><p><img src="http://www.meng.uno/images/fuzzer/8.png" alt="Trinity"></p><p>After compiling the file and running, here is part of the result.</p><p><img src="http://www.meng.uno/images/fuzzer/9.png" alt="Trinity"></p><p><img src="http://www.meng.uno/images/fuzzer/10.png" alt="Trinity"></p><p>In the future, I may add some system calls which it didn’t test till now to this project. However, you can see that it is very difficult for us to really test a system call which we used everyday using this project because Trinity randomly invokes system  calls currently and real programs demonstrate common patterns for making system calls.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;As we all known, system call testing is very important to a system. System call fuzzers aren’t a particularly new idea. A few projects be
      
    
    </summary>
    
      <category term="Fuzzer" scheme="http://meng.uno/categories/Fuzzer/"/>
    
    
      <category term="Trinity" scheme="http://meng.uno/tags/Trinity/"/>
    
      <category term="Fuzzer" scheme="http://meng.uno/tags/Fuzzer/"/>
    
  </entry>
  
  <entry>
    <title>Boogie</title>
    <link href="http://meng.uno/posts/4f0a9591/"/>
    <id>http://meng.uno/posts/4f0a9591/</id>
    <published>2018-01-03T14:43:12.000Z</published>
    <updated>2018-02-11T14:48:52.838Z</updated>
    
    <content type="html"><![CDATA[<p>Boogie is an intermediate verification language (IVL), intended as a layer on which to build program verifiers for other languages. It is also the name of the verification tool that takes Boogie programs as input. It can accept the input of a Boogie program  and generate verification conditions that are passed to an SMT solver such as Z3 used by my test.</p><h2 id="build-and-run"><a class="header-anchor" href="#build-and-run">🌊</a>Build and Run</h2><p>Building this project is very simple, however, we may need to install many other tools such as “Mono” (I use a MacBook to build this project) and “NuGet”. The information of successfully building is like this.</p><p><img src="http://www.meng.uno/images/boogie/1.png" alt="Boogie"></p><p>There are two kinds of verifications said by the authors: Driver tests and Unit tests, however, I couldn’t find the python script for the latter, so I just run the driver tests.</p><h2 id="driver-tests"><a class="header-anchor" href="#driver-tests">🌊</a>Driver Tests</h2><p>In this kind of tests, we need to use “lit” and “OutputCheck”. We could run all the tests by “lit .”. The result is shown as follows.</p><p><img src="http://www.meng.uno/images/boogie/2.png" alt="Boogie"></p><p>We also could run a single test by giving “lit” a specific folder or file. The picture is a test of a folder.</p><p><img src="http://www.meng.uno/images/boogie/3.png" alt="Boogie"></p><h2 id="analyze-the-test"><a class="header-anchor" href="#analyze-the-test">🌊</a>Analyze the Test</h2><p><img src="http://www.meng.uno/images/boogie/4.png" alt="Boogie"></p><p>The picture is a function written by Boogie, from which we can see that the Boogie language is something like C language. In addition, in every Boogie file, every function is separated.</p><p>If there are some errors occurred, there will be a “.expect” file outputted like this to tell us why they are wrong.</p><p><img src="http://www.meng.uno/images/boogie/5.png" alt="Boogie"></p><h2 id="write-a-test"><a class="header-anchor" href="#write-a-test">🌊</a>Write A Test</h2><p>We can write a new file or just add our function to a existed file. The following is my test:</p><p><img src="http://www.meng.uno/images/boogie/6.png" alt="Boogie"></p><p>This is the result:</p><p><img src="http://www.meng.uno/images/boogie/7.png" alt="Boogie"></p><p>I plan to analyze this project deeply, however, its code is very old so it maybe a little difficult for me to do this. I just do these tests on this projects now. Maybe I will analyze the whole project some day. From this project, I can learn what is  an intermediate verification language (IVL) and how it works. I found that there were many tools adapting this strategy, including the VCC and HAVOC verifiers for C and the verifiers for Dafny, Chalice, and Spec#.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Boogie is an intermediate verification language (IVL), intended as a layer on which to build program verifiers for other languages. It is
      
    
    </summary>
    
      <category term="Language" scheme="http://meng.uno/categories/Language/"/>
    
    
      <category term="Boogie" scheme="http://meng.uno/tags/Boogie/"/>
    
      <category term="Language" scheme="http://meng.uno/tags/Language/"/>
    
  </entry>
  
  <entry>
    <title>Simple Theorem Prover SMT solver</title>
    <link href="http://meng.uno/posts/cd3afb7d/"/>
    <id>http://meng.uno/posts/cd3afb7d/</id>
    <published>2018-01-03T13:42:58.000Z</published>
    <updated>2018-02-11T14:04:49.153Z</updated>
    
    <content type="html"><![CDATA[<p>I found it could be generated as program analysis tools, theorem provers, automated bug finders and so on which means it is a very crucial research. STP is a constraint solver aimed at solving constraints of bit vectors and arrays. It can read CVC, SMT-LIB1  and SMT-LIB2 formats files. It also could be used by Python, SMT-LIBv2 and even C library. STP preprocesses the input through the application of mathematical and logical identities, and then eagerly translates constraints into a purely propositional  logic formula that it feeds to an off-the-shelf SAT solver.</p><p>STP views memory as untyped bytes. It provides only three data types: booleans, bitvectors, and arrays of bitvectors. A bitvector is an unsigned, fixed-length sequence of bits. For example, “0010” is a constant, 4-bit bitvector representing the constant  2.</p><h2 id="build-and-run"><a class="header-anchor" href="#build-and-run">🌊</a>Build and Run</h2><p>We can build this project on Linux or Docker, however, you know, Google isn’t well supported in China, so I can’t use “repo” execution which needed by Docker. In this document, I will use a quick install.</p><p>Firstly, we need to install many dependencies. Then, since STP uses “minisat” as its SAT solver by default, we need to install it first. It is very simple to do this by “cmake”. The following is part of the output.</p><p><img src="http://www.meng.uno/images/stp/1.png" alt="STP"></p><p>Then we could start to install STP (To get the code, we need to use “git clone” but not download it directly).</p><p><img src="http://www.meng.uno/images/stp/2.png" alt="STP"></p><p>This project depends on various external tools to do testing. Here we install “lit” and do some individual tests and use “GoogleTest” to write some unit tests.</p><h2 id="analyze-individual-test"><a class="header-anchor" href="#analyze-individual-test">🌊</a>Analyze Individual Test</h2><p>An individual test is like this.</p><p><img src="http://www.meng.uno/images/stp/3.png" alt="STP"></p><p>In this screenshot, we can see that this file is judging “b = (c || b)” and “((c || b) = b) &lt; c &lt; b”. We could find that an individual test file may contain these components:</p><ul>  <li>“; line”: comments;</li>  <li>“set-info”: set some configuration information for running this file;</li>  <li>“declare-fun”: definite some functions and their return types;</li>  <li>“assert”: like C lang, do some judgement;</li>  <li>“exit”: return.</li></ul><h2 id="analyze-unit-test"><a class="header-anchor" href="#analyze-unit-test">🌊</a>Analyze Unit Test</h2><p>We can simply run unit test by giving “lit” the individual tests directory or run “make C-api-tests” to build the C-api tests as unit tests. The Cpp file is like this.</p><p><img src="http://www.meng.uno/images/stp/4.png" alt="STP"></p><p>From this picture, we can see that a C-api test contains many simple verifications.</p><h2 id="analyze-the-code-structure"><a class="header-anchor" href="#analyze-the-code-structure">🌊</a>Analyze the Code Structure</h2><p><img src="http://www.meng.uno/images/stp/5.png" alt="STP"></p><p>From the above picture, I give the following simple understandings to this project.</p><ul>  <li>“Interface”: Define a C interface to achieve the file ins and outs;</li>  <li>“Sat”: Copy from “minisat” to call SAT solver.</li>  <li>“AST”: Implement the abstract syntax tree for parsed solver inputs;</li>  <li>“Util”: Store some header files for small tasks;</li>  <li>“Printer”: Appoint some output formats;</li>  <li>“Simplifier”: Simplify algorithms for AST;</li>  <li>“Parser”: Store some parsers for the CVC, SMT-LIB1, SMT-LIB2 inputs;</li>  <li>“STPManager”: Hold all components together.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I found it could be generated as program analysis tools, theorem provers, automated bug finders and so on which means it is a very crucia
      
    
    </summary>
    
      <category term="solver" scheme="http://meng.uno/categories/solver/"/>
    
      <category term="SMT" scheme="http://meng.uno/categories/solver/SMT/"/>
    
    
      <category term="solver" scheme="http://meng.uno/tags/solver/"/>
    
      <category term="STP" scheme="http://meng.uno/tags/STP/"/>
    
      <category term="SMT" scheme="http://meng.uno/tags/SMT/"/>
    
  </entry>
  
</feed>
