<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>欢迎来到匡盟盟的博客！</title>
  
  <subtitle>Colyn 崛起正当时！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://meng.uno/"/>
  <updated>2018-02-18T13:25:50.293Z</updated>
  <id>http://meng.uno/</id>
  
  <author>
    <name>匡盟盟</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>What are Human Genome Project and ENCODE Project?</title>
    <link href="http://meng.uno/articles/32469d52/"/>
    <id>http://meng.uno/articles/32469d52/</id>
    <published>2018-02-18T11:54:31.000Z</published>
    <updated>2018-02-18T13:25:50.293Z</updated>
    
    <content type="html"><![CDATA[<h1>Human Genome Project</h1><h2 id="the-profile-of-the-project">The Profile of the Project</h2><p>人类基因组计划(Human Genome Project,简称HGP)是由美国科学家于1985年率先提出，又于1990年正式启动的。来自美国、英国、法国、德国、日本和中国科学家共同参与了这一预算达30亿美元的人类基因组计划。按照这个计划的设想，在2005年，要把人体内约10万个基因的密码全部解开，同时绘制出人类基因的谱图。换句话说，就是要揭开组成人体4万个基因的30亿个碱基对的秘密。</p><p>这一计划的最终目的是测定人类基因组30亿个基本化学组成（称为碱基对或核苷酸），进而揭开与人类的生老病死有关的数万个基因的相互关系。1984年，美国能源部开会，开始酝酿“人类基因组计划”。1989年，美国能源部和美国国家卫生研究所提出了人类基因图谱工程。美国在1990年10月1日率先启动人类基因组计划。美国人类基因组顾问委员会委员梅纳德•奥尔森是人类基因组计划最早的推动者之一，另外美国一个测序中心的主任罗伯特•沃特斯顿以及英国的人类基因组总负责人均表示支持。美国完成人类基因组计划近54%的工作量，为人类基因组计划最大的贡献国。英国是人类基因组计划的第二大贡献国，共34%的贡献都是由Wellcome基金会资助的Sanger中心完成的。日本、法国、德国对人类基因组计划的贡献分别为6.8%、2.8%与2.2%。中国承担了3号染色体区域短臂端粒侧约30  cM，约占人类整个基因组1% 的测序工作。中国的华大基因、国家自然科学基金会、中科院遗传所南方基因中心、北方人类基因组中心等单位及于军、杨焕明、汪建、刘斯奇、吴旻、强伯勤、陈竺等也给予人类基因组计划大力的推动。</p><h2 id="the-importance-of-the-project">The Importance of the Project</h2><h3 id="目的">目的</h3><p>人类是在“进化”历程上最高级的生物，对人类基因的研究有助于认识自身、掌握生老病死规律、疾病的诊断和治疗、了解生命的起源。 测出人类基因组DNA的30亿个碱基对的序列，发现所有人类基因，找出它们在染色体上的位置，破译人类全部遗传信息。</p><p>在人类基因组计划中，还包括对五种生物基因组的研究：大肠杆菌、酵母、线虫、果蝇和小鼠，称之为人类的五种“模式生物”。</p><p>HGP的目的是解码生命、了解生命的起源、了解生命体生长发育的规律、认识种属之间和个体之间存在差异的起因、认识疾病产生的机制以及长寿与衰老等生命现象、为疾病的诊治提供科学依据。</p><h3 id="意义">意义</h3><p>人类基因组计划是一项规模宏大，跨国跨学科的科学探索工程。其宗旨在于测定组成人类染色体(指单倍体)中所包含的30亿个碱基对组成的核苷酸序列，从而绘制人类基因组图谱，并且辨识其载有的基因及其序列，达到破译人类遗传信息的最终目的。基因组计划是人类为了探索自身的奥秘所迈出的重要一步。</p><p>“人类基因组计划”与”曼哈顿原子弹计划”和”阿波罗计划”并称为二十世纪三大科学计划。</p><h2 id="the-achievement-of-the-project">The Achievement of the Project</h2><p>2000年6月26日，美国总统克林顿与英国首相布莱尔共同宣布人类基因组计划工作草图完成；次年2月，工作草图的具体序列信息、测序所采用的方法以及序列的分析结果被国际人类基因组测序联盟和塞雷拉基因组的科学家分别公开发表于《自然》与《科学》杂志。这一工作草图覆盖了基因组序列的83％，包括常染色质区域的90％（带有150,000个空缺，且许多片断的顺序和方位并没有得到确定）。</p><p>2001年2月12日，美国Celera公司与人类基因组计划分别在《科学》和《自然》杂志上公布了人类基因组精细图谱及其初步分析结果。</p><p>2003年，发现了新的方法通过检测另外的库来关闭Gaps。使用FISH技术或其他方法来分析没有闭合的Gaps大小。22，21条染色体就是用这种方式。</p><p>1999年至2006年，完成了全部23条染色体的测序工作，具体如下：</p><p>1999年12月，22号染色体测序完成；</p><p>2000年5月，21号染色体测序完成；</p><p>2001年12月，20号染色体测序完成；</p><p>2003年2月，14号染色体测序完成；</p><p>2003年6月，男性特有的Y染色体测序完成；</p><p>2003年5月和7月，7号染色体测序完成；</p><p>2003年10月，6号染色体测序完成；</p><p>2004年4月，13号和19号染色体测序完成；</p><p>2004年5月，9号和10号染色体测序完成；</p><p>2004年9月，5号染色体测序完成；</p><p>2004年12月，16号染色体测序完成；</p><p>2005年3月，X染色体测序完成；</p><p>2005年4月，2号和4号染色体测序完成；</p><p>2005年9月，18号染色体测序完成；</p><p>2006年1月，8号染色体测序完成；</p><p>2006年3月，11号,12号和15号染色体测序完成；</p><p>2006年4月，17号和3号染色体测序完成；Human Genome Project Information</p><p>2006年5月，1号染色体测序完成；Human Genome Project Information</p><p>2004年，国际人类基因组测序联盟的研究者宣布，人类基因组中所含基因的预计数目从先前的30,000至40,000（在计划初期的预计数目则高达2,000,000）调整为20,000至25,000。预期还需要多年的时间来确定人类基因组中所含基因的精确数目。</p><p>截止到2005年，人类基因组计划的测序工作已经完成。</p><h2 id="the-research-contents-of-the-project">The Research Contents of the Project</h2><h3 id="遗传图谱">遗传图谱</h3><p>遗传图谱又称连锁图谱（linkage map），它是以具有遗传多态性（在一个遗传位点上具有一个以上的等位基因，在群体中的出现频率皆高于1%）的遗传标记为“路标”，以遗传学距离（在减数分裂事件中两个位点之间进行交换、重组的百分率，1%的重组率称为1cM）为图距的基因组图。遗传图谱的建立为基因识别和完成基因定位创造了条件。意义：6000多个遗传标记已经能够把人的基因组分成6000多个区域，使得连锁分析法可以找到某一致病的或表现型的基因与某一标记邻近（紧密连锁）的证据，这样可把这一基因定位于这一已知区域，再对基因进行分离和研究。对于疾病而言，找基因和分析基因是个关键。</p><h3 id="物理图谱">物理图谱</h3><p>物理图谱是指有关构成基因组的全部基因的排列和间距的信息，它是通过对构成基因组的DNA分子进行测定而绘制的。绘制物理图谱的目的是把有关基因的遗传信息及其在每条染色体上的相对位置线性而系统地排列出来。DNA物理图谱是指DNA链的限制性酶切片段的排列顺序，即酶切片段在DNA链上的定位。因限制性内切酶在DNA链上的切口是以特异序列为基础的，核苷酸序列不同的DNA，经酶切后就会产生不同长度的DNA片段，由此而构成独特的酶切图谱。因此，DNA物理图谱是DNA分子结构的特征之一。DNA是很大的分子，由限制酶产生的用于测序反应的DNA片段只是其中的极小部分，这些片段在DNA链中所处的位置关系是应该首先解决的问题，故DNA物理图谱是顺序测定的基础，也可理解为指导DNA测序的蓝图。广义地说，DNA测序从物理图谱制作开始，它是测序工作的第一步。制作DNA物理图谱的方法有多种，这里选择一种常用的简便方法──标记片段的部分酶解法，来说明图谱制作原理。</p><h3 id="序列图谱">序列图谱</h3><p>随着遗传图谱和物理图谱的完成，测序就成为重中之重的工作。DNA序列分析技术是一个包括制备DNA片段化及碱基分析、DNA信息翻译的多阶段的过程。通过测序得到基因组的序列图谱。</p><h3 id="基因图谱">基因图谱</h3><h4 id="简介">简介</h4><p>基因图谱是在识别基因组所包含的蛋白质编码序列的基础上绘制的结合有关基因序列、位置及表达模式等信息的图谱。在人类基因组中鉴别出占具2%~5%长度的全部基因的位置、结构与功能，最主要的方法是通过基因的表达产物mRNA反追到染色体的位置。</p><h4 id="意义-v2">意义</h4><p>它能有效地反应在正常或受控条件中表达的全基因的时空图。通过这张图可以了解某一基因在不同时间不同组织、不同水平的表达；也可以了解一种组织中不同时间、不同基因中不同水平的表达，还可以了解某一特定时间、不同组织中的不同基因不同水平的表达。人类基因组是一个国际合作项目：表征人类基因组，选择的模式生物的DNA测序和作图，发展基因组研究的新技术，完善人类基因组研究涉及的伦理、法律和社会问题，培训能利用HGP发展起来的这些技术和资源进行生物学研究的科学家，促进人类健康。</p><h2 id="the-contributions-of-the-project">The Contributions of the Project</h2><h3 id="对人类疾病的贡献">对人类疾病的贡献</h3><p>人类疾病相关的基因是人类基因组中结构和功能完整性至关重要的信息。对于单基因病，采用“定位克隆”和“定位候选克隆”的全新思路，导致了亨廷顿氏舞蹈症、遗传性结肠癌和乳腺癌等一大批单基因遗传病致病基因的发现，为这些疾病的基因诊断和基因治疗奠定了基础。对于心血管疾病、肿瘤、糖尿病、神经精神类疾病（老年性痴呆、精神分裂症）、自身免疫性疾病等多基因疾病是疾病基因研究的重点。健康相关研究是HGP的重要组成部分，1997年相继提出：“肿瘤基因组解剖计划”“环境基因组学计划”。</p><h3 id="对医学的贡献">对医学的贡献</h3><p>基因诊断、基因治疗和基于基因组知识的治疗、基于基因组信息的疾病预防、疾病易感基因的识别、风险人群生活方式、环境因子的干预。</p><h3 id="对生物技术的贡献">对生物技术的贡献</h3><h4 id="基因工程药物">基因工程药物</h4><p>分泌蛋白（多肽激素，生长因子，趋化因子，凝血和抗凝血因子等）及其受体。</p><h4 id="诊断和研究试剂">诊断和研究试剂</h4><p>基因和抗体试剂盒、诊断和研究用生物芯片、疾病和筛药模型。</p><h4 id="细胞工程">细胞工程</h4><p>胚胎和成年期干细胞、克隆技术、器官再造技术。</p><h2 id="the-project-with-china">The Project with China</h2><p>作为继美、英、法、德、日6个成员国之后中唯一的发展中国家，中国对人类基因组的的贡献不只是工作量，在这个划时代的里程碑上，已经刻上了中国人的名字，中国在生物组学的发展上占有一席之地，通过参与这一计划，我们可以分享数据、资源、技术与发言权，最终来开发我国自己的基因资源。中国的加入改变了国际人类基因组计划原有的组织格局，提高其国际合作的形象，带来了国际社会对“国际人类基因组计划精神”的支持，联合国教科文组织关于人类基因组基本信息免费共享的声明，就是在中国代表的直接努力下促成的。可以说，中国需要人类基因组计划，而基因组计划也使我国的基因测序能力进人世界前列，在中国本土成长起来的作为我国基因组学的典型代表、创新型机构——华大基因已经成为全球最大的基因组学中心。</p><p>因此，人类基因组计划对华大基因的影响力也是举足轻重的，华大基因也因此而“生”的伟大。华大基因随着“国际人类基因组计划1%项目”的正式启动而诞生。华大基因自成立之日起就站在世界同步的轨迹上，使得中国的基因组学研究位于跟踪——参与——同步的国际地位。为后期的华大基因在基因组上的引领及跨越式发展奠定了基础。</p><p>在人类基因组计划之后，人类基因研究开始朝着与人类生育健康、肿瘤个体化治疗、病原微生物、遗传性疾病、血液病等的相关疾病的基因检测方向发展，未来，医疗技术将从末端的疾病治疗，逐步走向前端的基因诊断和预防，个性化医疗及精准医疗。人类将通过基因检测技术、通过个性化医疗以更精确的诊断，预测潜在疾病的风险，提供更有效、更有针对性的治疗，预防某种疾病的发生，比“治有病”更节约治疗成本。</p><p>华大基因希望凭借全球领先的基因组学技术，华大基因将千万家庭远离遗传性出生缺陷，肿瘤能早期检测和诊断并能全景式、定期监控个人健康动态，人人做到“我的基因我知道，我的健康我做主”。其研究方向主要涉及遗传性出生缺陷、肿瘤、心脑血管疾病、精准医疗 # The ENCODE Project</p><h2 id="the-profile-of-the-project-v2">The Profile of the Project</h2><p>The ENCODE Project（即Encyclopedia Of DNA Elements，中文译作DNA元件百科全书计划），是美国国立人类基因组研究院（US National Human Genome Research Institute，NHGRI）在2003年9月启动的跨国研究项目。该项目旨在解析人类基因组中的所有功能性元件，它是人类基因组计划完成之后，又一重要的跨国基因组学研究项目。该项目联合了来自美国，英国，西班牙，新加坡和日本的32个实验室的422名科学家的努力，获得了迄今最详细的人类基因组分析数据（他们获得并分析了超过15兆兆字节的原始数据）。研究花费了约300年的计算机时间，对147个组织类型进行了分析，以确定哪些能打开和关闭特定的基因，以及不同类型细胞之间的“开关”存在什么差异。</p><h2 id="the-achievement-of-the-project-v2">The Achievement of the Project</h2><p>近年来基因研究已经取得巨大进展。不过，迄今为止，这些研究主要还集中在编码蛋白的特定基因上，而它们所佔的比例不到整个人类基因组的2%。ENCODE计划首次系统地研究了所有类型的功能元件的位点和组织方式。</p><p>迄今为止，ENCODE计划主要集中研究了44个靶标共3000万个DNA硷基对。负责该计划数据整合和分析工作的欧洲分子生物学实验室主任Ewan Birney说：“我们的结论揭示了有关DNA功能元件构成的重要原理，为从DNA转录到哺乳动物进化的一切过程提供了新的认识。”</p><p>研究发现，人类基因组中的大多数DNA都会转录成RNA，这些副本会普遍交叠。因此，人类基因组实际上是一个非常复杂的网络，所谓的无用基因实际上非常少。基因只不过是众多具有特定功能的DNA序列类型之一。科学家们在基因之外的调控区域新发现了4491个转录启动位点，这一数字超过了已知基因的10倍。这些都挑战了长期以来的一个观点，即基因组中的基因是孤立的，同时，新的发现也支持了人类基因数量应该超过3万个的看法。</p><p>ENCODE计划的另一个巨大成就就是对哺乳动物基因组进化的认识。传统理论认为，与生理功能相关的重要DNA序列往往位于基因组中的“进化限制”区域，它们在物种进化过程中更容易保存下来。但是，最新的研究表明，大约一半人类基因组中的功能元件在进化过程中不会受到很大限制。科学家认为，哺乳动物缺乏“进化限制”这一点，很可能意味著许多物种的基因组都囊括了大量包括RNA转录副本在内的功能元件，在进化过程中，这些功能元件成了基因“仓库”。</p><p>此次ENCODE计划的成果亮点还包括：确定了许多之前不为人知的DNA转录启动位点；推翻了传统观点的认识，调控区域也有可能位于DNA转录启动位点的下游；确定了组蛋白变化的特定标记；加深了人们对组蛋白改变协调DNA复制的理解。</p><p>2012年9月5日，ENCODE项目的阶段性研究结果被整理成30篇论文发表于《自然》（6篇），《基因组研究》（6篇）和《基因组生物学》（18篇）上。</p><p>研究结果显示，人类基因组内的非编码DNA至少80%是有生物活性的，而并非之前认为的“垃圾” DNA （junk DNA）。这些新的发现有望帮助研究人员理解基因受到控制的途径，以及澄清某些疾病的遗传学风险因子。 ENCODE是人类基因组计划之后国际科学界在基因组学研究领域取得的又一重大进展。</p><p>2012年12月21日，ENCODE项目被《科学》杂志评为本年度十大科学突破之一。</p><h2 id="the-research-contents-of-the-project-v2">The Research Contents of the Project</h2><h3 id="试点研究的内容">试点研究的内容</h3><p>对编码的功能DNA进行鉴定和分类；对已存在的几种方法进行测试和比较，严格分析了人类基因组序列中已被定义的序列。</p><p>阐明人类生物学和疾病之间的关系。</p><p>对大量鉴定基因特征的方法、技术和手段进行检测和评估。</p><h3 id="研究对象">研究对象</h3><p>编码蛋白基因</p><p>非编码蛋白基因</p><p>调控区域</p><p>染色体结构维持和调节染色体复制能力的DNA元件</p><h3 id="研究特点">研究特点</h3><p>采用综合性研究策略</p><p>重视新技术的研发</p><p>将计划向学术界和公司开放</p><h2 id="the-contributions-of-the-project-v2">The Contributions of the Project</h2><h3 id="人细胞转录全景图">人细胞转录全景图</h3><p>通过ENCODE项目，人们知道RNA是基因组编码的遗传信息的直接输出。细胞的大部分调节功能都集中在RNA的合成、加工和运输、修饰和翻译之中。研究人员证实，75%的人基因组能够发生转录，并且观察到几乎所有当前已标注的RNA和上千个之前未标注的RNA的表达范围与水平、定位、加工命运、调节区和修饰。总之，这些观察结果表明人们需要重新定义基因的概念。</p><h3 id="人基因组中可访问的染色质全景图">人基因组中可访问的染色质全景图</h3><p>DNase I超敏感位点(DNase I hypersensitive sites, DHSs)是调节性DNA序列的标记物。研究人员通过对125个不同的细胞和组织类型进行全基因组谱分析而鉴定出大约290万个人DHSs，并且首次大范围地绘制出人DHSs图谱。</p><h3 id="基因启动子的远距离相互作用全景图">基因启动子的远距离相互作用全景图</h3><p>在ENCODE项目中，研究人员选择1%的基因组作为项目试点区域，并且利用染色体构象捕获碳拷贝(chromosome conformation capture carbon copy, 简称为5C)技术来综合性地分析了这个区域中转录起始位点和远端序列元件之间的相互作用。他们获得GM12878、K562和HeLa-S3细胞的5C图谱。在每个细胞系，他们发现启动子和远端序列元件之间存在1000多个远距离相互作用。</p><h3 id="gencode：encode项目的人基因组参照标注">GENCODE：ENCODE项目的人基因组参照标注</h3><p>GENCODE项目旨在利用计算分析、人工标注和实验验证来鉴定出人基因组中所有的基因特征。GENCODE第七版(GENCODE v7)公开发布了基因组标注数据集，包含了20687个蛋白编码的RNA基因座位、9640个长链非编码RNA基因座位，并且拥有33977个在UCSC基因数据库和RefSeq数据库中不存在的编码性转录本。它还对公开获得的长链非编码RNA(long noncoding RNA, lncRNA)进行最全面的标注。</p><h1>我的认识</h1><p>在上这门课之前，我从没认真想过这个问题，到底研究基因有什么用？通过这几天的学习，以及对文章所提的两个项目的检索、认识，我对基因测序这一工作，有了更深层次的认识。</p><p>虽然外界关于基因测序有不同的看法，例如有人支持，因为它可以为医学做贡献；有人反对，因为这样做相当于为基因做了一次曝光，这样一来，就有优劣基因之分。在我看来，这一任务还是利大于弊的，毕竟现在看来是这样。科学家可以通过对已有的基因测序结果的分析，总结出基因的“中心法则”，使我们对自身有了更进一步的了解。再者，基因分析有很多好的应用，通过对胎儿基因分析可以达到优生的目的，以及对有基因缺陷、先天性遗传病患者可以提供治标治本的治疗方案。</p><p>当然，要了解所有基因的功能还有很长的一段路要走。例如以前人们所认为的垃圾DNA实际上并不“垃圾”，它们在基因组的进化、每个个体的差异性以及许多其他方面扮演着重要角色，是世界上许多实验室着力研究的目标。</p><p>即使已经过了将近30年，人类基因组也没有完成“完全”测序，不过我们了解到了基因并不是静态的，而是处在复杂的变化之中，所以对人类基因的研究也是对人类自身的研究，这一研究将会一直进行下去，永无终点。 虽然人类基因组目前也只是一张初步的蓝图，需要经过更多的研究和分析。但是人类已经通过对基因组的学习，进入了医学的新纪元，为预防、诊断和治疗疾病带来了新的方法。所以对基因组的研究势必将成为人类新的曙光。</p><p>总之，我对基因组计划以及ENCODE计划充满期待与支持。</p><h1>参考资料</h1><ol>  <li>HGP计划百度百科：<a href="http://dwz.cn/3ITVf3" target="_blank" rel="noopener">http://dwz.cn/3ITVf3</a></li>  <li>人类基因组计划- 维基百科http://dwz.cn/3JHOap</li>  <li>科学松鼠会之人类基因组计划 <a href="http://dwz.cn/3JHOXZ" target="_blank" rel="noopener">http://dwz.cn/3JHOXZ</a></li>  <li>ENCODE项目百度百科：<a href="http://dwz.cn/3ITSPr" target="_blank" rel="noopener">http://dwz.cn/3ITSPr</a></li>  <li>Genome网 <a href="https://www.genome.gov/10005107/encode-project" target="_blank" rel="noopener">https://www.genome.gov/10005107/encode-project</a></li>  <li>ENCODE项目官网：<a href="https://www.encodeproject.org" target="_blank" rel="noopener">https://www.encodeproject.org</a></li>  <li>“DNA元件百科全书”首批成果出炉，链接：<a href="http://big5.cas.cn/xw/kjsm/gjdt/200706/t20070619_1011212.shtml" target="_blank" rel="noopener">http://big5.cas.cn/xw/kjsm/gjdt/200706/t20070619_1011212.shtml</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;Human Genome Project&lt;/h1&gt;
&lt;h2 id=&quot;the-profile-of-the-project&quot;&gt;The Profile of the Project&lt;/h2&gt;
&lt;p&gt;人类基因组计划(Human Genome Project,简称HGP)是由美国
      
    
    </summary>
    
      <category term="生物信息" scheme="http://meng.uno/categories/%E7%94%9F%E7%89%A9%E4%BF%A1%E6%81%AF/"/>
    
    
      <category term="生物信息" scheme="http://meng.uno/tags/%E7%94%9F%E7%89%A9%E4%BF%A1%E6%81%AF/"/>
    
      <category term="Genome" scheme="http://meng.uno/tags/Genome/"/>
    
      <category term="ENCODE" scheme="http://meng.uno/tags/ENCODE/"/>
    
  </entry>
  
  <entry>
    <title>关于比特币（Bitcoin）</title>
    <link href="http://meng.uno/articles/7bfe1542/"/>
    <id>http://meng.uno/articles/7bfe1542/</id>
    <published>2018-02-14T11:47:44.000Z</published>
    <updated>2018-02-14T12:14:20.810Z</updated>
    
    <content type="html"><![CDATA[<h1>比特币术语</h1><h2 id="比特币">比特币</h2><p>首字母大写的Bitcoin用来表示比特币的概念或整个比特币网络本身。例如：“今天我学了些有关Bitcoin协议的内容。”</p><p>而没有大写的bitcoin则表示一个记账单位。例如：“我今天转出了10个bitcoin。”该单位通常也简写为BTC或XBT。</p><h2 id="比特币地址">比特币地址</h2><p>比特币地址就像一个物理地址或者电子邮件地址。这是别人付给你比特币时你唯一需要提供的信息。然而一个重要的区别是，每个地址应该只用于单笔交易。</p><h2 id="对等式网络">对等式网络</h2><p>对等式网络是指，通过允许单个节点与其他节点直接交互，从而实现整个系统像有组织的集体一样运作的系统 。对于比特币来说，比特币网络以这样一种方式构建——每个用户都在传播其他用户的交易。而且重要的是，不需要银行作为第三方。</p><h2 id="哈希率">哈希率</h2><p>哈希率是衡量比特币网络处理能力的测量单位。为保证安全，比特币网络必须进行大量的数学运算。当网络达到10Th/秒的哈希率时，就意味着它能够进行每秒10万亿次的计算。</p><h2 id="交易确认">交易确认</h2><p>交易确认意味着一笔交易已经被网络处理且不太可能被撤销。当交易被包含进一个块时会收到一个确认，后续的每一个块都对应一个确认。对于小金额交易单个确认便可视为安全，然而对于比如1000美元的大金额交易，等待6个以上的确认比较合理。每一个确认都成指数级地降低交易撤销的风险。</p><h2 id="块链">块链</h2><p>块链是一个按时间顺序排列的比特币交易公共记录。块链由所有比特币用户共享。它被用来验证比特币交易的永久性并防止双重消费。</p><h2 id="密码学">密码学</h2><p>密码学是数学的一个分支，它让我们创造出可以提供很高安全性的数学证明。电子商务和网上银行也用到了密码学。对于比特币来说，密码学用来保证任何人都不可能使用他人钱包里的资金，或者破坏块链。密码学也用来给钱包加密，这样没有密码就用不了钱包。</p><h2 id="签名">签名</h2><p>密码学签名是一个让人可以证明所有权的数学机制。对于比特币来说，一个比特币钱包和它的私钥通过一些数学魔法关联到一起。当你的比特币软件用对应的私钥为一笔交易签名，整个网络都能知道这个签名和已花费的比特币相匹配。但是，世界上没有人可以猜到你的私钥来窃取你辛苦赚来的比特币。</p><h2 id="钱包">钱包</h2><p>比特币钱包大致实体钱包在比特币网络中的等同物。钱包中实际上包含了你的私钥，可以让你消费块链中分配给钱包的比特币。和真正的钱包一样，每个比特币钱包都可以显示它所控制的所有比特币的总余额，并允许你将一定金额的比特币付给某人。这与商家进行扣款的信用卡不同。</p><h2 id="区块">区块</h2><p>一个块是块链中的一条记录，包含并确认待处理的交易。平均约每10分钟就有一个包含交易的新块通过挖矿的方式添加到块链中。</p><h2 id="双重消费">双重消费</h2><p>如果一个不怀好意的用户试图将比特币同时支付给两个不同的收款人，就被称为双重消费。比特币挖矿和块链将就两比交易中那笔获得确认并被视为有效在网络上达成一致。</p><h2 id="私钥">私钥</h2><p>私钥是一个证明你有权从一个特定的钱包消费比特币的保密数据块，是通过一个密码学签名来实现的 。如果你使用的是钱包软件，你的私钥就存储在你的计算机内；如果使用的是在线钱包，你的私钥就存储在远程服务器上。千万不能泄露私钥，因为它们可以让你消费对应比特币钱包里的比特币。</p><h2 id="挖矿">挖矿</h2><p>比特币挖矿是利用计算机硬件为比特币网络做数学计算进行交易确认和提高安全性的过程。作为对他们服务的奖励，矿工可以得到他们所确认的交易中包含的手续费，以及新创建的比特币。挖矿是一个专业的、竞争激烈的市场，奖金按照完成的计算量分割。并非所有的比特币用户都挖矿，挖矿赚钱也并不容易。</p><h2 id="bit">Bit</h2><p>Bit是标明一个比特币的次级单位的常用单位 -1,000,000 bit 等于1 比特币 (BTC 或 B⃦).，这个单位对于标示小费、商品和服务价格更方便。</p><h2 id="btc">BTC</h2><p>BTC 是用于标示一个比特币 (B⃦). 的常用单位。</p><h1>比特币账户</h1><p>我们可以在<code>bitcoin.org</code>上选择自己的钱包。我在这里向大家展示使用一个浏览器插件<code>GreenAddress</code>，下载链接是：<code>https://chrome.google.com/webstore/detail/greenaddress/dgbimgjoijjemhdamicmljbncacfndmp/related</code></p><h2 id="注册">注册</h2><p>打开安装好的<code>GreenAddress</code>，没有账户点击右上角，开始注册。</p><p><img src="http://www.meng.uno/images/bitcoins/1.jpg" alt="BITCOIN"></p><p><strong>打码的位置请保存下来，应该需要用它来登录</strong></p><p>接着是验证你保存没保存（想的还很周到）。</p><p>再就是添加两步验证，这个比较常见了，我只选了“邮件”验证，推荐是选两个，要不然总是有warning。</p><p><img src="http://www.meng.uno/images/bitcoins/2.jpg" alt="BITCOIN"></p><h2 id="使用">使用</h2><p>接着就进入主界面了，有很多配置需要大家自己去查看，主界面显示了你的“Bitcoin URI”，分享这个，别人就可以向你转钱了，应该。</p><p><img src="http://www.meng.uno/images/bitcoins/3.jpg" alt="BITCOIN"></p><p><strong>最后强调一下，我的比特币地址是：3CEzyZnpij4WnrAsHhhcaoD1Kf5JqSAEGj</strong></p><div><h1>推荐文章<span style="font-size:0.45em; color:gray"></h1><ul><li><a href="http://hodlerstreet.com/Opinion/how-serious-should-a-hodler-follow-mcafee/">How serious should a hodler follow McAfee?</a></li></ul></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;比特币术语&lt;/h1&gt;
&lt;h2 id=&quot;比特币&quot;&gt;比特币&lt;/h2&gt;
&lt;p&gt;首字母大写的Bitcoin用来表示比特币的概念或整个比特币网络本身。例如：“今天我学了些有关Bitcoin协议的内容。”&lt;/p&gt;
&lt;p&gt;而没有大写的bitcoin则表示一个记账单位。例如：“我今天转出
      
    
    </summary>
    
    
      <category term="比特币" scheme="http://meng.uno/tags/%E6%AF%94%E7%89%B9%E5%B8%81/"/>
    
      <category term="Bitcoin" scheme="http://meng.uno/tags/Bitcoin/"/>
    
  </entry>
  
  <entry>
    <title>简单的Python3爬虫</title>
    <link href="http://meng.uno/articles/51d32f19/"/>
    <id>http://meng.uno/articles/51d32f19/</id>
    <published>2018-02-12T12:18:15.000Z</published>
    <updated>2018-02-13T14:08:54.149Z</updated>
    
    <content type="html"><![CDATA[<blockquote>  <p>我们先从分析原理入手，然后再使用Python提供的基本的库urllib。</p>  <p>注意，我全程使用的是Python3，如果你必须使用不同版本，请自行百度某些库及函数的转换，需要使用的库不一定你的电脑上预装了，所以请自行百度安装。</p></blockquote><h1>原理</h1><p>网络爬虫，也叫网络蜘蛛(Web Spider)，如果把互联网比喻成一个蜘蛛网，Spider就是一只在网上爬来爬去的蜘蛛。网络爬虫就是根据网页的地址来寻找网页的，也就是URL。</p><h2 id="url">URL</h2><p>URL就是统一资源定位符(Uniform Resource Locator)，它的一般格式如下(带方括号[]的为可选项)：</p><p><code>protocol ://hostname[:port]/path/[;parameters][?query]#fragment</code></p><p>可见，一个URL包含三个部分：</p><ol>  <li>protocol：协议，例如https，http等；</li>  <li>hostname[:port]：主机名(端口号为可选参数)，一般网站默认的端口号为80，例如我的博客域名www.meng.uno，可以作为主机名使用;</li>  <li>path：第三部分就是主机资源的具体地址，如目录和文件名等。</li></ol><p>爬虫就是向URL发送请求，然后得到响应，基本就实现了爬取网页的功能。</p><p><strong>URI可以分为URL,URN或同时具备locators 和names特性的一个东西。URN作用就好像一个人的名字，URL就像一个人的地址。换句话说：URN确定了东西的身份，URL提供了找到它的方式。</strong></p><h2 id="从浏览器发送和接收数据看起">从浏览器发送和接收数据看起</h2><p>进入我的首页<code>www.meng.uno</code>，打开浏览器的“检查”功能，选项卡选到“Network”，然后点击所有文章，随便选择一条，我们可以发现如下截图的&quot;Headers&quot;</p><p><img src="http://meng.uno/images/crawl/1.png" alt="Headers"></p><p>我们可以发现最明显的有两个区域（我已经圈出来了）：“request”和“response”。从字面意思上来看，我们就知道分别是（发送的）请求和（收到的）回复。</p><p>接收的信息是我们请求的网页给的，不用我们管，但是“请求的网页”是我们需要提前设定的，当然最简单的方式就是什么都不设置。爬虫会增加网站的负荷，所以很多网站希望大家通过API的方式使用其开放的资源而禁止爬虫，其中的一个做法就是判断你的请求内容（不全的基本都是爬虫）。于是，为了做到一个完整的可用的爬虫，我们需要模拟真实用户的请求，这就要求我们伪造“User Agent”。</p><p>常见的“User Agent”列举如下：</p><ol>  <li>    <p>Android</p>    <ul>      <li>Mozilla/5.0 (Linux; Android 4.1.1; Nexus 7 Build/JRO03D) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.166 Safari/535.19</li>      <li>Mozilla/5.0 (Linux; U; Android 4.0.4; en-gb; GT-I9300 Build/IMM76D) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30</li>      <li>Mozilla/5.0 (Linux; U; Android 2.2; en-gb; GT-P1000 Build/FROYO) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1</li>    </ul>  </li>  <li>    <p>Firefox</p>    <ul>      <li>Mozilla/5.0 (Windows NT 6.2; WOW64; rv:21.0) Gecko/20100101 Firefox/21.0</li>      <li>Mozilla/5.0 (Android; Mobile; rv:14.0) Gecko/14.0 Firefox/14.0</li>    </ul>  </li>  <li>    <p>Google Chrome</p>    <ul>      <li>Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</li>      <li>Mozilla/5.0 (Linux; Android 4.0.4; Galaxy Nexus Build/IMM76B) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.133 Mobile Safari/535.19</li>    </ul>  </li>  <li>    <p>iOS</p>    <ul>      <li>Mozilla/5.0 (iPad; CPU OS 5_0 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9A334 Safari/7534.48.3</li>      <li>Mozilla/5.0 (iPod; U; CPU like Mac OS X; en) AppleWebKit/420.1 (KHTML, like Gecko) Version/3.0 Mobile/3A101a Safari/419.3</li>    </ul>  </li></ol><p>User Agent已经设置好了，但是还应该考虑一个问题，程序的运行速度是很快的，如果我们利用一个爬虫程序在网站爬取东西，一个固定IP的访问频率就会很高，这不符合人为操作的标准，因为人操作不可能在几ms内，进行如此频繁的访问。所以一些网站会设置一个IP访问频率的阈值，如果一个IP访问频率超过这个阈值，说明这个不是人在访问，而是一个爬虫程序。</p><p>一个很简单的解决办法就是设置延时，但是这显然不符合爬虫快速爬取信息的目的，所以另一种更好的方法就是使用IP代理。使用代理的步骤：</p><ul>  <li>调用urlib.request.ProxyHandler()，proxies参数为一个字典；</li>  <li>创建Opener(类似于urlopen，这个代开方式是我们自己定制的)；</li>  <li>安装Opener；</li></ul><p><strong>这个网站提供了很多代理主机：<a href="http://www.xicidaili.com/" target="_blank" rel="noopener">http://www.xicidaili.com/</a></strong></p><h2 id="正则表达式">正则表达式</h2><p>我直接以表格的形式呈现好了：</p><table>  <thead>    <tr>      <th style="text-align:center">元字符</th>      <th style="text-align:right">说明</th>    </tr>  </thead>  <tbody>    <tr>      <td style="text-align:center">.</td>      <td style="text-align:right">代表任意字符</td>    </tr>    <tr>      <td style="text-align:center"></td>      <td style="text-align:right"></td>    </tr>    <tr>      <td style="text-align:center">[ ]</td>      <td style="text-align:right">匹配内部的任一字符或子表达式</td>    </tr>    <tr>      <td style="text-align:center">[^]</td>      <td style="text-align:right">对字符集和取非</td>    </tr>    <tr>      <td style="text-align:center">-</td>      <td style="text-align:right">定义一个区间</td>    </tr>    <tr>      <td style="text-align:center">\</td>      <td style="text-align:right">对下一字符取非（通常是普通变特殊，特殊变普通）</td>    </tr>    <tr>      <td style="text-align:center">*</td>      <td style="text-align:right">匹配前面的字符或者子表达式0次或多次</td>    </tr>    <tr>      <td style="text-align:center">*?</td>      <td style="text-align:right">惰性匹配上一个</td>    </tr>    <tr>      <td style="text-align:center">+</td>      <td style="text-align:right">匹配前一个字符或子表达式一次或多次</td>    </tr>    <tr>      <td style="text-align:center">+?</td>      <td style="text-align:right">惰性匹配上一个</td>    </tr>    <tr>      <td style="text-align:center">?</td>      <td style="text-align:right">匹配前一个字符或子表达式0次或1次重复</td>    </tr>    <tr>      <td style="text-align:center">{n}</td>      <td style="text-align:right">匹配前一个字符或子表达式</td>    </tr>    <tr>      <td style="text-align:center">{m,n}</td>      <td style="text-align:right">匹配前一个字符或子表达式至少m次至多n次</td>    </tr>    <tr>      <td style="text-align:center">{n,}</td>      <td style="text-align:right">匹配前一个字符或者子表达式至少n次</td>    </tr>    <tr>      <td style="text-align:center">{n,}?</td>      <td style="text-align:right">前一个的惰性匹配</td>    </tr>    <tr>      <td style="text-align:center">^</td>      <td style="text-align:right">匹配字符串的开头</td>    </tr>    <tr>      <td style="text-align:center">\A</td>      <td style="text-align:right">匹配字符串开头</td>    </tr>    <tr>      <td style="text-align:center">$</td>      <td style="text-align:right">匹配字符串结束</td>    </tr>    <tr>      <td style="text-align:center">[\b]</td>      <td style="text-align:right">退格字符</td>    </tr>    <tr>      <td style="text-align:center">\c</td>      <td style="text-align:right">匹配一个控制字符</td>    </tr>    <tr>      <td style="text-align:center">\d</td>      <td style="text-align:right">匹配任意数字</td>    </tr>    <tr>      <td style="text-align:center">\D</td>      <td style="text-align:right">匹配数字以外的字符</td>    </tr>    <tr>      <td style="text-align:center">\t</td>      <td style="text-align:right">匹配制表符</td>    </tr>    <tr>      <td style="text-align:center">\w</td>      <td style="text-align:right">匹配任意数字字母下划线</td>    </tr>    <tr>      <td style="text-align:center">\W</td>      <td style="text-align:right">不匹配数字字母下划线</td>    </tr>  </tbody></table><h1>代码</h1><h2 id="简单带错误信息的获取网页内所有url的爬虫">简单带错误信息的获取网页内所有URL的爬虫</h2><figure class="highlight python">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="comment">#获取URL的包</span></span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="comment">#获取字符集编码方式</span></span><br><span class="line"><span class="keyword">import</span> chardet</span><br><span class="line"><span class="comment">#正则表达式</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment">#Request 对象</span></span><br><span class="line">req = urllib.request.Request(<span class="string">"http://meng.uno/"</span>)</span><br><span class="line">data = <span class="keyword">None</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment">#得到Response</span></span><br><span class="line">    response = urllib.request.urlopen(req,data)</span><br><span class="line">    <span class="comment">#读出response == 请求文件的全部字符</span></span><br><span class="line">    html = response.read()</span><br><span class="line">    <span class="comment">#获取这个response的编码方式</span></span><br><span class="line">    charset = chardet.detect(html)</span><br><span class="line">    print(<span class="string">"编码方式："</span>,charset)</span><br><span class="line">    <span class="comment">#以这种编码方式解码打印</span></span><br><span class="line">    html = html.decode(charset.get(<span class="string">"encoding"</span>))</span><br><span class="line">    print(html)</span><br><span class="line">    urls = re.findall(<span class="string">'href=\"https*://w*\.*meng\.uno/.*?\"'</span>, html,re.S)</span><br><span class="line">    uris = re.findall(<span class="string">'href=\"/[^/].*?[^\.]\"'</span>,html, re.S)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> urls:</span><br><span class="line">        print(item[<span class="number">6</span>:<span class="number">-1</span>])</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> uris:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">".html"</span> <span class="keyword">in</span> item:</span><br><span class="line">            print(<span class="string">"http://www.meng.uno"</span>+item[<span class="number">6</span>:<span class="number">-1</span>])</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">'.'</span> <span class="keyword">in</span> item:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"http://www.meng.uno"</span>+item[<span class="number">6</span>:<span class="number">-1</span>])</span><br><span class="line"><span class="keyword">except</span> urllib.error.HTTPError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">if</span> hasattr(e, <span class="string">'code'</span>):</span><br><span class="line">        print(<span class="string">"HTTPError"</span>)</span><br><span class="line">        print(e.code)</span><br><span class="line">    <span class="keyword">elif</span> hasattr(e, <span class="string">'reason'</span>):</span><br><span class="line">        print(<span class="string">"URLError"</span>)</span><br><span class="line">        print(e.reason)</span><br></pre>      </td>    </tr>  </table></figure><h2 id="模拟真实环境的爬虫">模拟真实环境的爬虫</h2><figure class="highlight python">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"> <span class="comment">#访问网址</span></span><br><span class="line">url = <span class="string">'http://www.whatismyip.com.tw/'</span></span><br><span class="line"><span class="comment">#这是代理IP</span></span><br><span class="line">proxy = &#123;<span class="string">'https'</span>:<span class="string">'110.73.48.189:8123'</span>&#125;</span><br><span class="line"><span class="comment">#创建ProxyHandler</span></span><br><span class="line">proxy_support = urllib.request.ProxyHandler(proxy)</span><br><span class="line"><span class="comment">#创建Opener</span></span><br><span class="line">opener = urllib.request.build_opener(proxy_support)</span><br><span class="line"><span class="comment">#添加User Angent</span></span><br><span class="line">opener.addheaders = [(<span class="string">'User-Agent'</span>,<span class="string">'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36'</span>)]</span><br><span class="line"><span class="comment">#安装OPener</span></span><br><span class="line">urllib.request.install_opener(opener)</span><br><span class="line"><span class="comment">#使用自己安装好的Opener</span></span><br><span class="line">response = urllib.request.urlopen(url)</span><br><span class="line"><span class="comment">#读取相应信息并解码</span></span><br><span class="line">html = response.read().decode(<span class="string">"utf-8"</span>)</span><br><span class="line"><span class="comment">#打印信息</span></span><br><span class="line">print(html)</span><br></pre>      </td>    </tr>  </table></figure><h2 id="通过队列获取网站所有url的爬虫">通过队列获取网站所有URL的爬虫</h2><figure class="highlight python">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="comment">#python系统关于队列的包</span></span><br><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"><span class="comment">#获取URL的包</span></span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="comment">#获取字符集编码方式</span></span><br><span class="line"><span class="keyword">import</span> chardet</span><br><span class="line"><span class="comment">#正则表达式</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">initial_page = <span class="string">"http://www.meng.uno"</span></span><br><span class="line"></span><br><span class="line">url_queue = queue.Queue()</span><br><span class="line">seen = set()</span><br><span class="line"></span><br><span class="line">seen.add(initial_page)</span><br><span class="line">url_queue.put(initial_page)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extract_urls</span><span class="params">(url)</span>:</span></span><br><span class="line">    req = urllib.request.Request(url)</span><br><span class="line">    <span class="comment">#得到Response</span></span><br><span class="line">    response = urllib.request.urlopen(req)</span><br><span class="line">    <span class="comment">#读出response == 请求文件的全部字符</span></span><br><span class="line">    html = response.read()</span><br><span class="line">    <span class="comment">#获取这个response的编码方式</span></span><br><span class="line">    charset = chardet.detect(html)</span><br><span class="line">    <span class="comment">#以这种编码方式解码打印</span></span><br><span class="line">    html = html.decode(charset.get(<span class="string">"encoding"</span>))</span><br><span class="line">    urls = re.findall(<span class="string">'href=\"https*://w*\.*meng\.uno/.*?\"'</span>, html,re.S)</span><br><span class="line">    uris = re.findall(<span class="string">'href=\"/[^/].*?[^\.]\"'</span>,html, re.S)</span><br><span class="line">    tempseen = set()</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> urls:</span><br><span class="line">        tempseen.add(item[<span class="number">6</span>:<span class="number">-1</span>])</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> uris:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">".html"</span> <span class="keyword">in</span> item:</span><br><span class="line">            tempseen.add(<span class="string">"http://www.meng.uno"</span>+item[<span class="number">6</span>:<span class="number">-1</span>])</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">'.'</span> <span class="keyword">in</span> item:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tempseen.add(<span class="string">"http://www.meng.uno"</span>+item[<span class="number">6</span>:<span class="number">-1</span>])</span><br><span class="line">    <span class="keyword">return</span> tempseen</span><br><span class="line">            </span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">True</span>): <span class="comment">#一直进行直到海枯石烂</span></span><br><span class="line">    <span class="keyword">if</span> url_queue.qsize()&gt;<span class="number">0</span>:</span><br><span class="line">        current_url = url_queue.get()    <span class="comment">#拿出队例中第一个的url</span></span><br><span class="line">        print(current_url)               <span class="comment">#把这个url代表的网页存储好</span></span><br><span class="line">        <span class="keyword">for</span> next_url <span class="keyword">in</span> extract_urls(current_url): <span class="comment">#提取把这个url里链向的url</span></span><br><span class="line">            <span class="keyword">if</span> next_url <span class="keyword">not</span> <span class="keyword">in</span> seen:      </span><br><span class="line">                seen.add(next_url)</span><br><span class="line">                url_queue.put(next_url)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre>      </td>    </tr>  </table></figure><p><strong><em>这里先简单解释，以后有实际项目会再补充！</em></strong></p><div><h1>推荐文章<span style="font-size:0.45em; color:gray"></h1><ul><li><a href="http://meng.uno/articles/5d4e2c71/">E-mail小爬虫</a></li><li><a href="http://www.libinx.com/2017/a-government-report-crawl-experience/">小记在中经网的一次爬虫踩坑经历</a></li></ul></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
  &lt;p&gt;我们先从分析原理入手，然后再使用Python提供的基本的库urllib。&lt;/p&gt;
  &lt;p&gt;注意，我全程使用的是Python3，如果你必须使用不同版本，请自行百度某些库及函数的转换，需要使用的库不一定你的电脑上预装了，所以请自行百度安装。&lt;/p
      
    
    </summary>
    
      <category term="Python" scheme="http://meng.uno/categories/Python/"/>
    
      <category term="爬虫" scheme="http://meng.uno/categories/Python/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="Python" scheme="http://meng.uno/tags/Python/"/>
    
      <category term="爬虫" scheme="http://meng.uno/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>CPAchecker</title>
    <link href="http://meng.uno/articles/c5d9877c/"/>
    <id>http://meng.uno/articles/c5d9877c/</id>
    <published>2018-02-11T14:08:59.000Z</published>
    <updated>2018-02-11T14:15:48.025Z</updated>
    
    <content type="html"><![CDATA[<p>CPAchecker is a tool for configurable software verification which means expressing different program analysis and model checking approaches in one single formalism. The main algorithm is configurable to perform a reachability analysis on arbitrary combinations  of existing configurable program analysis (CPA). One application of CPAchecker is the verification of Linux device drivers.</p><p>CPA provides a conceptual basis for expressing different verification approaches in the same formal setting. The CPA formalism provides an interface for the definition of program analyses, which includes the abstract domain, the post operator, the merge  operator, and the stop operator. Consequently, the corresponding tool implementation CPAchecker provides an implementation framework that allows the seamless integration of program analyses that are expressed in the CPA framework. The comparison of  different approaches in the same experimental setting becomes easy and the experimental results will be more meaningful.</p><h2 id="architecture">Architecture</h2><p><img src="http://www.meng.uno/images/cpa/1.png" alt="CPAchecker"></p><p>The above picture is the overview of CPAchecker’s architecture. The central data structure is a set of control-flow automata (CFA), which consist of control-flow locations and control-flow edges. A location represents a program-counter value, and an edge  represents a program operation, which is either an assume operation, an assignment block, a function call, or a function return. Before a program analysis starts, the input program is transformed into a syntax tree, and further into CFAs. The framework  provides interfaces to SMT solvers and interpolation procedures, such that the CPA operators can be written in a concise and convenient way. From the picture, we know that they use MathSAT as an SMT solver, and CSIsat and MathSAT as interpolation procedures.  They also use JavaBDD as a BDD package, and provide an interface to an Octagon Library as well. The CPA Algorithm is the center of this project and the detailed design is shown as follows.</p><p><img src="http://www.meng.uno/images/cpa/2.png" alt="CPAchecker"></p><p>The CPA algorithm (shown at the top in the above figure) takes as input a set of control-flow automata (CFA) representing the program, and a CPA, which is in most cases a Composite CPA. The interfaces correspond one-to-one to the formal framework. The  elements in the gray box (top right) represent the abstract interfaces of the CPA and the CPA operations. The two gray boxes at the bottom of the figure show two implementations of the interface CPA, one is a Composite CPA that can combine several other  CPAs, and the other is a Leaf CPA.</p><h2 id="build-and-test">Build and Test</h2><p>Owing to the long development history, this project is very prefect which means you could use its binary directly, build from the source and even use their jar-ball in Java applications. To experience it, I will build it from the source and use it in  the command-line.</p><p>We need to install “jdk”, “ant”, “svn” and “subversion” before we build it. Then enter the root directory and run “ant”. Wait a moment and this is the result.</p><p>To test this project, we need to write a C/C++ code without “#include  <headers>”. I choose a simple one (QuickSort) shown in the attachment.</headers></p><p>The result contains a log file, a statistics file and a report which is in “html” format.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;CPAchecker is a tool for configurable software verification which means expressing different program analysis and model checking approach
      
    
    </summary>
    
      <category term="Software Verification" scheme="http://meng.uno/categories/Software-Verification/"/>
    
      <category term="CPA" scheme="http://meng.uno/categories/Software-Verification/CPA/"/>
    
      <category term="CPAchecker" scheme="http://meng.uno/categories/Software-Verification/CPA/CPAchecker/"/>
    
    
      <category term="CPA" scheme="http://meng.uno/tags/CPA/"/>
    
      <category term="CPAchecker" scheme="http://meng.uno/tags/CPAchecker/"/>
    
  </entry>
  
  <entry>
    <title>Linux Test Project</title>
    <link href="http://meng.uno/articles/bfb74f68/"/>
    <id>http://meng.uno/articles/bfb74f68/</id>
    <published>2018-02-11T13:29:33.000Z</published>
    <updated>2018-02-11T14:04:49.151Z</updated>
    
    <content type="html"><![CDATA[<p>I found this project from the references of other papers, and I thought it was good, so I plan to run it. As we can see from its name, Linux Test Project (LTP) has a goal to deliver test suites to the open source community that validate the reliability,  robustness, and stability of Linux. This project wants to support Linux development by making unit testing more complete and minimizing user impact by building a barrier to keep bugs from making it to the user. There are two important testing techniques  which are supported by giving developers an ever growing set of tools to help identify any operational problems in their code: Design and Code Inspections. I knew that Yggdrasil and Hyperkernel which I have run successfully belong to the last category.  LTP doesn’t have a benchmark which means they don’t compare different kernel of Linux.</p><p>In LTP, we need to know:</p><ul>  <li>Test case: A single action and verification which has a result PASS/FAIL.</li>  <li>Test suite: Containing one or more test cases.</li>  <li>Test tags: Pairing a unique identifier with a test program and a set of command line options.</li></ul><p>We also need to know the ways of reporting the results of a test case. There are two main ways which are contained in LTP:</p><ul>  <li>Exit status: If a test program encounters unexpected or incorrect results, exit the test program with a non-zero exit status, i.e. exit(1). Conversely, if a program completes as expected, return a zero exit status, i.e. exit(0).</li>  <li>Standard output: Tools can be used to analyze the results, if they are written in a standard way.</li></ul><h2 id="build-and-run">Build and Run</h2><p>To build this project, we need to run the following executions:</p><figure class="highlight stylus">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>      </td>      <td class="code">        <pre><span class="line">$ git clone https:<span class="comment">//github.com/linux-test-project/ltp.git</span></span><br><span class="line">$ cd ltp</span><br><span class="line">$ make autotools</span><br><span class="line">$ ./configure</span><br><span class="line">$ make</span><br><span class="line">$ make install</span><br></pre>      </td>    </tr>  </table></figure><p>Before these, we need to ensure “git, autoconf, automake, m4” are installed. If not, we can use “apt-get” to get them. The output of “make” is shown as following.</p><p><img src="http://www.meng.uno/images/ltp/1.png" alt="LTP"></p><p>After building this project, let’s run it personally. If we want to run all the test suites, we just need run “./runltp” in the “opt/ltp/” directory. However, I will run a single test suite to verify this project only with “./runltp -f syscalls” execution.</p><p><img src="http://www.meng.uno/images/ltp/2.png" alt="LTP"></p><p>The picture above is the output of “abort01” test case. From it we can see that the test method is “Exit status test” and it passes all the situations.</p><p>If a test case needs datafiles to work, these would be put in a subdirectory named datafilesand installed in the testcases/data/$TCID directory</p><h2 id="analyze-test-cases">Analyze Test Cases</h2><p>We could find LTP in “/opt/ltp” and the test suites are installed in the “/opt/ltp/runtest/” directory. The following picture is a screenshot of it.</p><p><img src="http://www.meng.uno/images/ltp/3.png" alt="LTP"></p><p>In a single file, such as “syscalls” file, there exist many single test cases which are like the follows.</p><p><img src="http://www.meng.uno/images/ltp/4.png" alt="LTP"></p><p>From this picture, those words, like “abort01”, represent different test cases which are laid in “/opt/ltp/testcases/bin/” directory.</p><p><img src="http://www.meng.uno/images/ltp/5.png" alt="LTP"></p><p>Each test case is a binary written either in portable Shell or C such as “abort01” which is from “abort01.c” which lays in the “ltp/testcases/kernel/syscalls/abort” directory. The test gets a configuration via environment variables and/or command line  parameters, it prints additional information into the stdout and reports overall success/failure via the exit value.</p><p><img src="http://www.meng.uno/images/ltp/6.png" alt="LTP"></p><h2 id="write-a-test-suite">Write A Test Suite</h2><p>To make things simple, I will use LTP standard interface, not add custom reporting functions and use LTP build system. The following are my steps (These steps are very simple, so I didn’t list any screenshot):</p><ul>  <li>Add a new file “meng” to “ltp/runtest/” directory;</li>  <li>Write some test cases’ names, such as “abort01 accept01”;</li>  <li>Run “make” and “make install”;</li>  <li>Enter “/opt/ltp/” directory;</li>  <li>Run “./runltp -f meng”;</li>  <li>Get the result as the picture. (You can also find the full logs from “meng_output.txt” file in the attachment)</li></ul><p><img src="http://www.meng.uno/images/ltp/7.png" alt="LTP"></p><h2 id="write-a-test-case">Write A Test Case</h2><p>As I said before, we can use C language or Shell to write a test case, however, in this section, I will just use C language to write a simple one which may make me have a deep understanding of this project.</p><p><strong>I used the “man-pages” to find the untested system calls, however, my linux version maybe a little old (2015 release, version 16.04), so that I can’t find a untested one which is excluded by the newest LTP.</strong></p><p>I will write a test for verifying system call “file rename”. First, I create a new file “meng.c” in the “ltp/testcases/kernel/syscalls/meng/” directory. Then I need to write the codes. The next thing I need to do is to include “tst_test.h” (There are  also another headers, however, this one is basic). We need to write “main(), setup(), clean()” functions and the detailed realizations are in the “meng.c” which is in the attachment (I give some notes of the code in the “meng.c” file as well). What’s  more, we need to create a “Makefile” in the same directory and write the compiling information. The compiled file is like this.</p><p><img src="http://www.meng.uno/images/ltp/8.png" alt="LTP"></p><p>Last, I will add this test case to the “meng” test suite and see the result (You can find the full output in “meng_syscall_output.txt” in the attachment).</p><p><img src="http://www.meng.uno/images/ltp/9.png" alt="LTP"></p><p>From the above picture, we can see that the verification is “pass” which means that not only the “rename” system call is correct, but also my code is right.</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray"></h1><ul><li><a href="http://www.libinx.com/2017/five-steps-win10-ubuntu-dual-boot/">五步完美实现Win10 + Ubuntu 17.04双系统启动</a></li></ul></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I found this project from the references of other papers, and I thought it was good, so I plan to run it. As we can see from its name, Li
      
    
    </summary>
    
      <category term="Linux" scheme="http://meng.uno/categories/Linux/"/>
    
      <category term="Linux Test" scheme="http://meng.uno/categories/Linux/Linux-Test/"/>
    
    
      <category term="Linux" scheme="http://meng.uno/tags/Linux/"/>
    
      <category term="Linux Test" scheme="http://meng.uno/tags/Linux-Test/"/>
    
  </entry>
  
  <entry>
    <title>A Melody Composer for both Tonal and Non-Tonal Languages</title>
    <link href="http://meng.uno/articles/2251dcee/"/>
    <id>http://meng.uno/articles/2251dcee/</id>
    <published>2018-02-11T04:03:24.000Z</published>
    <updated>2018-02-11T04:39:53.403Z</updated>
    
    <content type="html"><![CDATA[<h1>Summary</h1><h2 id="abstract">Abstract</h2><p>This paper contains some improvements on an algorithmic melody composer called “T-music”. “T-music” is an algorithm which can compose a melody for users’ input lyrics by mining the relationship between the melodies and lyrics. These relationships are  known as frequent patterns (FPS) . The ameliorations are two ways to enhance the methods of mining frequent patterns form instrumental compositions and an optimal way of using FPS mined from songs in one language to compose a melody for the input things  in another language.</p><h2 id="propse">Propse</h2><p>The propose is to get an algorithm which take lyrics as input and a good melody as outcome in order to help those people who have little music background to compose songs. In view of the fact that there is already a pretty well method, T-music, the authors’  tasks are making some improvements on the basis of the original algorithm.</p><h2 id="deficiencies-of-original-algorithm">Deficiencies of original algorithm</h2><p>At the first place, I need to borrow a figure from the paper as follows to express my understanding of the original T-music method.</p><p><img src="http://www.meng.uno/images/t-music-arch.png" alt="t-musuc"></p><p>As the picture shows that the system architecture of T-music can be divided as two phases which are “Frequent Pattern Mining” and “Melody Composition”. I will report this method following the flow of the algorithm.</p><ul>  <li>    <p>Mining the FPS from “Song Database” and storing them in the “Frequent Pattern Database”:</p>    <ul>      <li>Obtaining tone sequences from “Song Database” by reading the “Language Dictionary”;</li>      <li>Generating s-sequence from a melody, a pitch sequence and a duration sequence;</li>      <li>Mining the FPS from s-sequence;</li>      <li>Storing the FPS to “Frequent Pattern Database”.</li>    </ul>  </li>  <li>    <p>Composing a melody for the “Lyrics” based on FPS in the “Frequent Pattern Database”:</p>    <ul>      <li>Obtaining the tone sequence of the lyrics by reading the “Language Dictionary”;</li>      <li>Adding some “Music Parameters” such as some music rules;</li>      <li>Generating “Melody” by the process “Melody Composition” using FPS.</li>    </ul>  </li></ul><p>There are some deficiencies of the original T-music algorithm as follows. It can only mine FPS from songs in which lyrics must be present. What’s more, the original one can’t use the FPS mined from a language to compose melody in another language. However,  we can’t always get the ideal songs data which have lyrics embedded easily. What we can get from the Internet are those instrumental compositions in which lyrics are absent. Also, we want to achieve that composing melody in a language with the FPS mined  from another language which can make the algorithm more efficient.</p><h2 id="improvements">Improvements</h2><p>What the authors have done provided two ways to mine Frequent Patterns from instrumental compositions and an optimal mapping method for composing a melody using FPS in different language with the input lyrics.</p><p>The first way is “Method emphasizing the original FPS”. I will use the following picture to express my comprehension. Firstly, mining the FPS from songs and storing them in “FP database (General)”. Secondly, mining the frequent pitch trends from “Instrumental  compositions with style database” and storing them in “Frequent pitch trends (Style)” and then using it as a selector to select those FPS storing the matches in “FP database (Style)”.</p><p><img src="http://www.meng.uno/images/t-music-database.png" alt="t-musuc"></p><p>The second way is “Method emphasizing the newly mined frequent pitch trends”. I will also introduce it using the screenshot from the paper. The FPS based on those of the first way was subdivided. The frequent pitch trends are mined as usually. The most  difference is that one pitch trend may match a set of several tone trends.</p><p><img src="http://www.meng.uno/images/t-music-database2.png" alt="t-musuc"></p><p>The optimal mapping method is shown as follows. Firstly, using the same method gets a “FP database” in one language. Then, generating several tone sequences for each tone trend in this “FP database”. There are some lemmas proofed on the paper to decide  the specific number of the mapping.</p><h1>Improvements</h1><p>In this section, I will analysis some excellent algorithms, important thoughts or some key points. Some of them may look small or nothing special, but each has its function.</p><h2 id="using-the-trend-representation">Using the “Trend” representation</h2><p>If I were doing this job, I could have chosen the simple “absolute” representation, just because this is the most intuitive frequent pattern we can get from songs. After careful consideration, just as the author explains that same melodies which start  at different pitches may sound similar to us. Then, I understand that it is a big wisdom to use the “trend” representation which uses a FP to extract the general rules of a set of FPS with different pitches, simplifying a large number of calculations  and making the result more obvious.</p><h2 id="using-frequent-pitch-trends-style-as-a-selector">Using “Frequent pitch trends (Style)” as a selector</h2><p>Though we know that “T-music” uses “the FPS between the tone port and the pitch part” and agree the mining method used on mining the frequent pattern which contains a tone trend and a pitch trend, there must be some correlation between “Tone trend” and  “Pitch trend”. Since the instrumental compositions don’t contain lyrics, we couldn’t mine a whole frequent pattern from them. However, we can also mine part of the frequent pattern from them which is “Pitch trend”. For we have so much instrumental compositions  which means we can get enough “Pitch trend” and we already know the correlation between “Tone trend” and “Pitch trend”, we can estimate the frequency of the original frequent pattern and eliminate part of them which have a zero frequency.</p><h2 id="using-the-subsequences-of-original-frequent-pattern">Using the subsequences of original frequent pattern</h2><p>According to the Apriori property that all nonempty subsets of frequent item set must also be frequent, the authors artfully break the original FPS into smaller form and then making them combine more FPS which can be selected from the original FP database.  By doing this, we can get more frequent patterns from the identical data which means our mining algorithm is more efficient.</p><h2 id="using-multi-map-as-a-data-structure">Using multi-map as a data structure</h2><p>This data structure allows the task of retrieving a value by a key quickly and returns more than one frequent pattern with a support. From it, we can get a tuple in top-k tuples with some selection strategies and ensure that a pattern with a very large  support isn’t always selected because it doesn’t mean that it is always the best choice.</p><h2 id="employing-the-divide-and-conquer-idea">Employing the divide and conquer idea</h2><p>Considering to compose a melody of a very long lyric, we may need to divide the original tone trend into several shorter tone trends, apply the same procedure on them and then return the concatenation of the results of the sub-problems. It is a simple  idea of solving such problem, but we can’t resist its correctness and effectiveness.</p><h1>Limitations</h1><p>I just list some areas that I think need improvements or I think it can be added slightly on the basis of the original research.</p><h2 id="applying-word-segmentation">Applying word segmentation</h2><p>Though the paper has mentioned the use of word segmentation, there is just a word and no detailed explanation. I think I should express my own idea here. Firstly, the word segmentation here isn’t the same of those applied in the fields of natural language  processing (NLP). As we all known, the latter has so many strict norms to follow, however, in the lyrics, the norms aren’t very same. Why we do this in the input lyrics is because we want to determine the length of durations between every two words,  which is different from the propose in the NLP which just wants to add pause at the same length of time between words and words.</p><h2 id="handling-the-tone-trend-with-a-length-of-1">Handling the tone trend with a length of 1</h2><p>In this paper, the authors just simply set the pitch trend to be the input tone trend where, I think, may need improvement. Firstly, we all know that “the tone trend with a length of 1” couldn’t appear individually. It is usually because we matched the  tone sequences before it or after it. I think if we consider dividing the original sequence into overlapping parts using the similar idea of divide and conquer idea, the question may disappear.</p><h2 id="mining-the-relationship-between-tone-trend-and-pitch-trend">Mining the relationship between “tone trend” and “pitch trend”</h2><p>The authors just determine the relationship based on statistics in whether the original T-music method or the improved edition, store the regulars on a multi-map and when using the frequent pattern, the method just randomly selects a tuple from top-k  tuples from the multi-map. Therefore, no matter which one we choose, it is just the original sequence in the FP-database. If there is a very large database which contains a large number of every frequent pattern, it may have a remarkable effect without  complex computations. However, we can’t ensure it or we just want to improve our algorithm with little support of so many records. Let’s look at the following samples which has the form as same as those in the multi-map and assume that the same tone  trend only has the three tuples.</p><figure class="highlight stylus">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&lt;<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&gt; —&gt; (&lt;<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,-<span class="number">1</span>,-<span class="number">2</span>&gt;, <span class="number">10</span>)</span><br><span class="line">&lt;<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&gt; —&gt; (&lt;<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,-<span class="number">2</span>,-<span class="number">1</span>&gt;, <span class="number">9</span>) </span><br><span class="line">&lt;<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&gt; —&gt; (&lt;<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>,-<span class="number">2</span>,-<span class="number">1</span>&gt;, <span class="number">5</span>)</span><br></pre>      </td>    </tr>  </table></figure><p>As we can see, they have the same tone trend and different pitch trends with different values of a support. If we just use the method described in the paper, we may get the result of the 1st, the 2nd, or the 3rd. However, is it the best one? Maybe not,  I think. I mean maybe <code>&lt;1,1,2,0,-2,-1&gt;</code> is better. I think we need to add some correlation analyses to the pitch trends which have the same tone trends.</p><h1>Expanding Research</h1><p>After reading this paper, I have some ideas for further research and some of them are listed as follows.</p><h2 id="adding-location-variables">Adding location variables</h2><p>I mean, as we all known, a same lyric may have different melodies when it is at the beginning or at the end of a song. Of course, if we just want to use a simple sentence as its input, this consideration is rather superfluous. However, if the input lyric  is long enough, it is very important then.</p><h2 id="generating-a-melody-with-a-longer-note">Generating a melody with a longer note</h2><p>This thought is mentioned in the end of the paper as well. We may have noticed that the normal notes will be longer than the syllables of lyrics, at least at the end of each sentence. We may need to modify the match method to add the frequent pattern  which contains group of pitch trends sequences and its corresponding longer tone trends sequences.</p><h2 id="applying-syntactic-analysis">Applying syntactic analysis</h2><p>The following is my exploratory opinion of the original T-music. If I have many songs with lyrics, I will mine the frequent patterns of syntactic analysis and add them to the “s-sequence” mentioned in this paper. Thus I will reform the original multi-map  as follows.</p><figure class="highlight stylus">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br></pre>      </td>      <td class="code">        <pre><span class="line">(&lt;pitch trend pattern&gt;, &lt;syntax pattern&gt;) —&gt; (&lt;tone trend pattern&gt;, support)</span><br></pre>      </td>    </tr>  </table></figure><p>When we match the input lyrics, we need to not only match the “pitch trend pattern” from the FP-database but also contrast the “syntax pattern” and then make the best decision.</p><h2 id="expanding-to-speech-recognization">Expanding to speech recognization</h2><p>I have a simple idea of speech recognization using the same method mentioned in this paper. If I could collect enough voice information spoken by the same person, I would mine the frequent patterns of his intonation habit from the voice data and then  using them to judge whether another voice is his or not.</p><h2 id="expanding-to-password-security">Expanding to password security</h2><p>In order to prevent the password being stolen, all websites are making efforts on password diversity. I think the method of mining frequent pattern can be applied to protect users’ password as well. For the same string of ciphers, different people may  type it out in different speeds with different intermission on every two letters. I, for example, usually use the combination of my name and birthday as a password and when I type it out there is a longer break between the last letter of my name and  the first number of my birthday. If we use the same way to mine the frequent patterns form enough times records of someone, we may use the frequent patterns to judge whether it is the right person or not who is typing the password.</p><h2 id="generating-good-problems">Generating “good problems”</h2><p>I often encounter some tricky programming problems and as we all known, “StackOverflow” is the biggest website which can offer you relevant solutions when you ask a question on it. However, we all want to get the best answer as soon as possible so we  may need to put forward “good questions”. I think the thought of this paper can be applied to this question. We can first collect enough “good questions” from the website and then mine the syntactic frequent patterns of each question by categories.  Finally, we can generate such “good questions” by adding the knowledge of sentence construction and providing some keywords needed.</p><h1>Related Research</h1><p>This paper is about mining frequent patterns which is a subfield of data mining. I will express my understanding mixing information retrieved from the Internet in this field.</p><p>With the rise of big data, so many research topics about data is more and more frequent such as forecasting passenger flow and passenger flow directions during the Spring Festival and predicting the composition of Chinese college entrance examination  this year. Data mining means the process of extracting valuable information and patterns from large amounts of data and these new discovery rules, patterns, information and concepts have potential value. It usually contains the association rules, classification,  estimation, clustering and so on.</p><p>As for association analysis, its propose is to discover interesting links hidden in large data sets and the patterns discovered are usually represented in association rules or frequent item sets just as this paper shown. There are several efficient and  scalable frequent item set mining methods such as Apriori algorithm and FP-growth which needs to construct FP-tree.</p><p>As for classification and prediction, I think it is a more stirring area. Think of this, a marketing manager needs data analysis to help guess whether or not a customer with a given profile will buy a new computer and then the marketing manager would  like to predict how much a given customer will spend during a sale, what an attractive job!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;Summary&lt;/h1&gt;
&lt;h2 id=&quot;abstract&quot;&gt;Abstract&lt;/h2&gt;
&lt;p&gt;This paper contains some improvements on an algorithmic melody composer called “T-music”
      
    
    </summary>
    
      <category term="Paper Report" scheme="http://meng.uno/categories/Paper-Report/"/>
    
      <category term="Data mining" scheme="http://meng.uno/categories/Paper-Report/Data-mining/"/>
    
    
      <category term="Paper Report" scheme="http://meng.uno/tags/Paper-Report/"/>
    
      <category term="Data Mining" scheme="http://meng.uno/tags/Data-Mining/"/>
    
  </entry>
  
  <entry>
    <title>.length与length()的区别</title>
    <link href="http://meng.uno/articles/61c2f1f1/"/>
    <id>http://meng.uno/articles/61c2f1f1/</id>
    <published>2018-02-10T13:58:04.000Z</published>
    <updated>2018-02-10T14:52:50.489Z</updated>
    
    <content type="html"><![CDATA[<blockquote>  <p>当我们需要使用数组或者字符串长度时，习惯了使用IDE自动补全的我们是否知道<code>.length</code>与<code>length()</code>的区别喻原因呢？</p></blockquote><p>上面问题的答案是：</p><ul>  <li>数组使用<code>.length</code>属性</li>  <li>字符串使用<code>length()</code>方法</li></ul><p>下面我来回答原因。</p><h2 id="为什么数组有-length属性？">为什么数组有<code>.length</code>属性？</h2><p>在Java中，数组是容器对象，其中包含了固定数量的同一类型的值，一旦数组创建，其长度就是固定的了，于是，其长度可以作为一个属性。</p><h2 id="为什么字符串需要length-方法？">为什么字符串需要<code>length()</code>方法？</h2><p>Java中的String，实际上是一个char类型数组，而char[]已经有了<code>.length</code>属性，所以在实现String时就没必要再定义重复的属性了，于是需要定义一个方法来返回其长度。</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray"></h1><ul><li><a href="http://meng.uno/articles/7526d370/">Java异常处理</a></li><li><a href="http://meng.uno/articles/fff444e8/">二分查找的效率</a></li><li><a href="http://meng.uno/articles/f3057e6c/">Java Substring() 的实现</a></li><li><a href="http://www.libinx.com/2017/auto-conversion-and-narrow-conversion-in-Java/">Java | 自动类型转换和强制类型转换</a></li></ul></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
  &lt;p&gt;当我们需要使用数组或者字符串长度时，习惯了使用IDE自动补全的我们是否知道&lt;code&gt;.length&lt;/code&gt;与&lt;code&gt;length()&lt;/code&gt;的区别喻原因呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上面问题的答案是：&lt;/p&gt;
      
    
    </summary>
    
      <category term="Java开发Tips" scheme="http://meng.uno/categories/Java%E5%BC%80%E5%8F%91Tips/"/>
    
      <category term="String" scheme="http://meng.uno/categories/Java%E5%BC%80%E5%8F%91Tips/String/"/>
    
      <category term="Object" scheme="http://meng.uno/categories/Java%E5%BC%80%E5%8F%91Tips/String/Object/"/>
    
    
      <category term="Java" scheme="http://meng.uno/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java异常结构层次图</title>
    <link href="http://meng.uno/articles/1164dab2/"/>
    <id>http://meng.uno/articles/1164dab2/</id>
    <published>2018-02-09T14:11:15.000Z</published>
    <updated>2018-02-10T14:51:35.021Z</updated>
    
    <content type="html"><![CDATA[<p>在Java中，异常分为<code>checked</code>与<code>unchecked</code>，他们都在一个分类层次中，如下图。</p><p><img src="http://www.meng.uno/images/ehd.jpeg" alt="DEH"></p><p>其中，红色的异常是<code>checked</code>异常，意味着在一个方法中，他们<code>throw</code>后必须<code>catch</code>或者<code>declare</code>。</p><p>另一种颜色的为<code>unchecked</code>异常，他们的异常不需要被<code>recover</code>。</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray"></h1><ul><li><a href="http://meng.uno/articles/7526d370/">Java异常处理</a></li><li><a href="http://meng.uno/articles/61c2f1f1/">.length与length()的区别</a></li><li><a href="http://meng.uno/articles/fff444e8/">二分查找的效率</a></li><li><a href="http://www.libinx.com/2017/auto-conversion-and-narrow-conversion-in-Java/">Java | 自动类型转换和强制类型转换</a></li></ul></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在Java中，异常分为&lt;code&gt;checked&lt;/code&gt;与&lt;code&gt;unchecked&lt;/code&gt;，他们都在一个分类层次中，如下图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.meng.uno/images/ehd.jpeg&quot; alt=&quot;DEH&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="Java开发Tips" scheme="http://meng.uno/categories/Java%E5%BC%80%E5%8F%91Tips/"/>
    
      <category term="Exception" scheme="http://meng.uno/categories/Java%E5%BC%80%E5%8F%91Tips/Exception/"/>
    
    
      <category term="Java" scheme="http://meng.uno/tags/Java/"/>
    
      <category term="Exception" scheme="http://meng.uno/tags/Exception/"/>
    
  </entry>
  
  <entry>
    <title>二分查找的效率</title>
    <link href="http://meng.uno/articles/fff444e8/"/>
    <id>http://meng.uno/articles/fff444e8/</id>
    <published>2018-02-08T09:20:00.000Z</published>
    <updated>2018-02-10T13:05:27.172Z</updated>
    
    <content type="html"><![CDATA[<blockquote>  <p>查找是比较常见的工作，今天我通过对比几种在数组中查找一个确定的值的例子来向大家展示二分查找的魅力。</p></blockquote><h2 id="数组查找元素的几种方法">数组查找元素的几种方法</h2><h3 id="使用list">使用List</h3><figure class="highlight java">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">useList</span><span class="params">(String[] arr, String targetValue)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Arrays.asList(arr).contains(targetValue);</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><h3 id="使用set">使用Set</h3><figure class="highlight java">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">useSet</span><span class="params">(String[] arr, String targetValue)</span> </span>&#123;</span><br><span class="line">Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;String&gt;(Arrays.asList(arr));</span><br><span class="line"><span class="keyword">return</span> set.contains(targetValue);</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><h3 id="使用for-loop">使用for-loop</h3><figure class="highlight java">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">useLoop</span><span class="params">(String[] arr, String targetValue)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(String s: arr)&#123;</span><br><span class="line"><span class="keyword">if</span>(s.equals(targetValue))</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><h3 id="使用二分">使用二分</h3><figure class="highlight java">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">useArraysBinarySearch</span><span class="params">(String[] arr, String targetValue)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a =  Arrays.binarySearch(arr, targetValue);</span><br><span class="line"><span class="keyword">if</span>(a &gt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><h2 id="时间复杂性">时间复杂性</h2><h3 id="代码">代码</h3><blockquote>  <p>使用如下代码来验证不同数据规模（5，1k，10k）的查找任务下四种方法的时间复杂性。（二分查找需要对数据排序，排序时间未计算在内。）</p></blockquote><figure class="highlight java">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String[] arr = <span class="keyword">new</span> String[] &#123;  <span class="string">"CD"</span>,  <span class="string">"BC"</span>, <span class="string">"EF"</span>, <span class="string">"DE"</span>, <span class="string">"AB"</span>&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//use list</span></span><br><span class="line"><span class="keyword">long</span> startTime = System.nanoTime();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">useList(arr, <span class="string">"A"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> endTime = System.nanoTime();</span><br><span class="line"><span class="keyword">long</span> duration = endTime - startTime;</span><br><span class="line">System.out.println(<span class="string">"useList:  "</span> + duration / <span class="number">1000000</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//use set</span></span><br><span class="line">startTime = System.nanoTime();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">useSet(arr, <span class="string">"A"</span>);</span><br><span class="line">&#125;</span><br><span class="line">endTime = System.nanoTime();</span><br><span class="line">duration = endTime - startTime;</span><br><span class="line">System.out.println(<span class="string">"useSet:  "</span> + duration / <span class="number">1000000</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//use loop</span></span><br><span class="line">startTime = System.nanoTime();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">useLoop(arr, <span class="string">"A"</span>);</span><br><span class="line">&#125;</span><br><span class="line">endTime = System.nanoTime();</span><br><span class="line">duration = endTime - startTime;</span><br><span class="line">System.out.println(<span class="string">"useLoop:  "</span> + duration / <span class="number">1000000</span>);</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><h3 id="5-结果">&quot;5&quot;结果</h3><figure class="highlight stylus">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>      </td>      <td class="code">        <pre><span class="line">useList:  <span class="number">13</span></span><br><span class="line">useSet:  <span class="number">72</span></span><br><span class="line">useLoop:  <span class="number">5</span></span><br></pre>      </td>    </tr>  </table></figure><h3 id="1k-结果">&quot;1k&quot;结果</h3><h4 id="随机生成数据">随机生成数据</h4><figure class="highlight java">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>      </td>      <td class="code">        <pre><span class="line">String[] arr = <span class="keyword">new</span> String[<span class="number">1000</span>];</span><br><span class="line"> </span><br><span class="line">Random s = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt; <span class="number">1000</span>; i++)&#123;</span><br><span class="line">arr[i] = String.valueOf(s.nextInt());</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><h4 id="结果">结果</h4><figure class="highlight stylus">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>      </td>      <td class="code">        <pre><span class="line">useList:  <span class="number">112</span></span><br><span class="line">useSet:  <span class="number">2055</span></span><br><span class="line">useLoop:  <span class="number">99</span></span><br><span class="line">useArrayBinary:  <span class="number">12</span></span><br></pre>      </td>    </tr>  </table></figure><h3 id="10k-结果">&quot;10k&quot;结果</h3><figure class="highlight stylus">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>      </td>      <td class="code">        <pre><span class="line">useList:  <span class="number">1590</span></span><br><span class="line">useSet:  <span class="number">23819</span></span><br><span class="line">useLoop:  <span class="number">1526</span></span><br><span class="line">useArrayBinary:  <span class="number">12</span></span><br></pre>      </td>    </tr>  </table></figure><h2 id="结论">结论</h2><p>通过以上结果，我们可以发现二分搜索确实很高效，而且当数据量变大时，其时间增长幅度还比较小。</p><p>以后，我们就可以使用<code>Arrays.binarySearch()</code>来高效查找某元素了。</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray"></h1><ul><li><a href="http://meng.uno/articles/7526d370/">Java异常处理</a></li><li><a href="http://meng.uno/articles/61c2f1f1/">.length与length()的区别</a></li><li><a href="http://meng.uno/articles/f3057e6c/">Java Substring() 的实现</a></li><li><a href="http://www.libinx.com/2017/auto-conversion-and-narrow-conversion-in-Java/">Java | 自动类型转换和强制类型转换</a></li></ul></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
  &lt;p&gt;查找是比较常见的工作，今天我通过对比几种在数组中查找一个确定的值的例子来向大家展示二分查找的魅力。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;数组查找元素的几种方法&quot;&gt;数组查找元素的几种方法&lt;/h2&gt;
&lt;h3 id=&quot;使用list&quot;&gt;
      
    
    </summary>
    
      <category term="Java开发Tips" scheme="http://meng.uno/categories/Java%E5%BC%80%E5%8F%91Tips/"/>
    
      <category term="Search" scheme="http://meng.uno/categories/Java%E5%BC%80%E5%8F%91Tips/Search/"/>
    
    
      <category term="Java" scheme="http://meng.uno/tags/Java/"/>
    
      <category term="算法复杂性" scheme="http://meng.uno/tags/%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E6%80%A7/"/>
    
      <category term="二分查找" scheme="http://meng.uno/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
  </entry>
  
  <entry>
    <title>Java Substring() 的实现</title>
    <link href="http://meng.uno/articles/f3057e6c/"/>
    <id>http://meng.uno/articles/f3057e6c/</id>
    <published>2018-02-08T07:43:08.000Z</published>
    <updated>2018-02-09T10:46:20.937Z</updated>
    
    <content type="html"><![CDATA[<p>写过Java的人应该都用过<code>substring(int bedinIndex, int endIndex)</code>方法。我发现这个简单的方法在实现上居然经过了一次大的变革。</p><h2 id="substring-的用途">substring()的用途</h2><p>代码:</p><figure class="highlight">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>      </td>      <td class="code">        <pre><span class="line">String origin = "asdfg"; </span><br><span class="line">origin = origin.substring(1,3);</span><br><span class="line">System.out.println(origin);</span><br></pre>      </td>    </tr>  </table></figure><p>输出:</p><figure class="highlight stylus">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br></pre>      </td>      <td class="code">        <pre><span class="line">sd</span><br></pre>      </td>    </tr>  </table></figure><p>我们发现它能将原始字符串中从下标为beginIndex到endIndex-1之间的子串取出。那它是怎么实现的呢？</p><h2 id="substring-的实现">substring()的实现</h2><blockquote>  <p>Java中的字符串有三个域：char value[], int offset以及int count，它们分别存储字符串的值，起始下标与长度。</p></blockquote><h3 id="jdk6版本">JDK6版本</h3><p>在这个版本中，每次执行substring()方法时并不会新建新的string，仅仅只是将上述三个域中的offset，count做必要的修改。返回对象仍指向原来的数据。</p><p><img src="http://www.meng.uno/images/substring_jdk.png" alt="Substring()实现版本一"></p><p>这样一来，<strong><em>缺点</em></strong>就比较明显：当原始字符串比较长，而截取的子串比较短时，在后续的使用中就会浪费大量的空间。</p><h3 id="jdk7-版本">JDK7+版本</h3><p>在上一个版本基础上，这个方法进行了改进，每次使用这个方法都会新建一个string对象，并将其返回。</p><p><img src="http://www.meng.uno/images/substring_jdk7.png" alt="Substring()实现版本二"></p><div><h1>推荐文章<span style="font-size:0.45em; color:gray"></h1><ul><li><a href="http://meng.uno/articles/7526d370/">Java异常处理</a></li><li><a href="http://meng.uno/articles/61c2f1f1/">.length与length()的区别</a></li><li><a href="http://meng.uno/articles/fff444e8/">二分查找的效率</a></li><li><a href="http://www.libinx.com/2017/auto-conversion-and-narrow-conversion-in-Java/">Java | 自动类型转换和强制类型转换</a></li></ul></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;写过Java的人应该都用过&lt;code&gt;substring(int bedinIndex, int endIndex)&lt;/code&gt;方法。我发现这个简单的方法在实现上居然经过了一次大的变革。&lt;/p&gt;
&lt;h2 id=&quot;substring-的用途&quot;&gt;substring()的用途&lt;
      
    
    </summary>
    
      <category term="Java开发Tips" scheme="http://meng.uno/categories/Java%E5%BC%80%E5%8F%91Tips/"/>
    
    
      <category term="Java" scheme="http://meng.uno/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java异常处理</title>
    <link href="http://meng.uno/articles/7526d370/"/>
    <id>http://meng.uno/articles/7526d370/</id>
    <published>2018-02-01T14:21:52.000Z</published>
    <updated>2018-02-10T14:51:35.019Z</updated>
    
    <content type="html"><![CDATA[<p>在Java中，调用某方法，就必须处理被调用方法抛出的异常，同时超类也可以用来捕获或者处理子类异常。</p><h2 id="调用方法必须处理被调用方法抛出的异常">调用方法必须处理被调用方法抛出的异常</h2><p>下面是一个处理异常的程序。我们可以测试一下，如果在一个方法中抛出一个异常，不仅是该方法，而且所有调用该方法的方法都必须声明或抛出异常。</p><figure class="highlight java">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">exceptionTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Exception exception;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            callDoOne(); </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doOne</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> exception;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">callDoOne</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        doOne();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><h2 id="超类可以用来捕获或处理子类异常">超类可以用来捕获或处理子类异常</h2><p>可以使用如下代码验证。</p><figure class="highlight java">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">exceptionTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Exception exception;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> myException myexception;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            callDoOne(); </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doOne</span><span class="params">()</span> <span class="keyword">throws</span> myException </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> myexception;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">callDoOne</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        doOne();</span><br><span class="line">        <span class="keyword">throw</span> exception;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>这也就是为什么catch子句只有一个父类在语法上安全的原因。</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray"></h1><ul><li><a href="http://meng.uno/articles/61c2f1f1/">.length与length()的区别</a></li><li><a href="http://meng.uno/articles/fff444e8/">二分查找的效率</a></li><li><a href="http://meng.uno/articles/f3057e6c/">Java Substring() 的实现</a></li><li><a href="http://www.libinx.com/2017/auto-conversion-and-narrow-conversion-in-Java/">Java | 自动类型转换和强制类型转换</a></li></ul></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在Java中，调用某方法，就必须处理被调用方法抛出的异常，同时超类也可以用来捕获或者处理子类异常。&lt;/p&gt;
&lt;h2 id=&quot;调用方法必须处理被调用方法抛出的异常&quot;&gt;调用方法必须处理被调用方法抛出的异常&lt;/h2&gt;
&lt;p&gt;下面是一个处理异常的程序。我们可以测试一下，如果在一个方
      
    
    </summary>
    
      <category term="Java开发Tips" scheme="http://meng.uno/categories/Java%E5%BC%80%E5%8F%91Tips/"/>
    
      <category term="Exception" scheme="http://meng.uno/categories/Java%E5%BC%80%E5%8F%91Tips/Exception/"/>
    
    
      <category term="Java" scheme="http://meng.uno/tags/Java/"/>
    
      <category term="Exception" scheme="http://meng.uno/tags/Exception/"/>
    
  </entry>
  
  <entry>
    <title>Eclipse的Google样式Java代码自动规范配置</title>
    <link href="http://meng.uno/articles/548d5dfd/"/>
    <id>http://meng.uno/articles/548d5dfd/</id>
    <published>2018-02-01T12:59:33.000Z</published>
    <updated>2018-03-01T13:41:32.053Z</updated>
    
    <content type="html"><![CDATA[<blockquote>  <p>不知道大家在用Eclipse的时候有没有感觉到，当代码量一大就看不懂自己代码了呢？有人可能要说了，eclipse不是自己带有格式化代码工具吗？确实如此，但是我们可能想使用更高级的自动化工具，例如Google—Java-Style。这篇博文，我将展示如何使用eclipse自带的自动化代码规范工具，以及怎么配置Google-Java-Style。</p></blockquote><h1>准备</h1><p>文件下载：</p><ul>  <li>Eclipse: <a href="http://www.eclipse.org/" target="_blank" rel="noopener">进入官网</a></li>  <li>Google Java Format File: <a href="http://meng.uno/utils/eclipse-java-google-style.xml">点击下载</a></li></ul><h1>使用Eclipse自带</h1><ul>  <li>快捷键： <code>Ctrl/Command + Shift + F</code></li>  <li>鼠标：    <ul>      <li>单个文件：进入文件/对着文件名<code>点右键</code> &gt; 找到<code>Source</code> &gt; 点击<code>Format</code> (其实就是快捷键的作用！)</li>      <li>项目：对着项目名/包名<code>点右键</code> &gt; 找到<code>Source</code> &gt; 点击<code>Format</code></li>    </ul>  </li></ul><p>如下截图：</p><p><img src="http://www.meng.uno/images/format/3.png" alt="右键"></p><h1>更换成Google Style</h1><p>当我们下载了本博客提供的<code>eclipse-java-google-style.xml</code>，就可以开始为formatter改风格了。</p><ul>  <li>打开eclipse的<code>Preferences</code>找到<code>Java</code>，再展开<code>Code Style</code>，找到<code>Formatter</code>。</li></ul><p><img src="http://www.meng.uno/images/format/1.jpg" alt="Code Style"></p><p>点击<code>Import</code>，在弹出窗口里选择我们下载的文件，确定即可。</p><p><img src="http://www.meng.uno/images/format/2.jpg" alt="Code Style"></p><p>再次进入项目，对着想要格式化的对象进行格式化操作，在进度条走完，我们就得到一份Google Java Style的代码了。</p><h1>后记</h1><ul>  <li>按照相似的步骤，我们也可以<code>Import</code>其他风格的代码规范；</li>  <li>Google不仅提供了eclipse上Java的代码规范，还有其他很多规范，详见<a href="https://github.com/google/styleguide" target="_blank" rel="noopener">Goole Style Guile</a></li>  <li>如果任何代码规范都不和心意，也可以打开某个代码规范，自己做相应的改动。</li></ul><p><img src="http://www.meng.uno/images/format/4.png" alt="Code Style"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
  &lt;p&gt;不知道大家在用Eclipse的时候有没有感觉到，当代码量一大就看不懂自己代码了呢？有人可能要说了，eclipse不是自己带有格式化代码工具吗？确实如此，但是我们可能想使用更高级的自动化工具，例如Google—Java-Style。这篇博文，我将
      
    
    </summary>
    
      <category term="Java开发Tips" scheme="http://meng.uno/categories/Java%E5%BC%80%E5%8F%91Tips/"/>
    
      <category term="代码规范" scheme="http://meng.uno/categories/Java%E5%BC%80%E5%8F%91Tips/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
    
      <category term="代码规范" scheme="http://meng.uno/tags/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
      <category term="Google Format" scheme="http://meng.uno/tags/Google-Format/"/>
    
      <category term="Eclipse" scheme="http://meng.uno/tags/Eclipse/"/>
    
  </entry>
  
  <entry>
    <title>Analysis For Hyperkernel</title>
    <link href="http://meng.uno/articles/55c9299d/"/>
    <id>http://meng.uno/articles/55c9299d/</id>
    <published>2018-01-29T13:43:03.000Z</published>
    <updated>2018-02-10T14:56:55.140Z</updated>
    
    <content type="html"><![CDATA[<blockquote>  <p>Homepage: <a href="https://locore.cs.washington.edu/hyperkernel/" target="_blank" rel="noopener">https://locore.cs.washington.edu/hyperkernel/</a> Code: <a href="https://github.com/locore/hv6" target="_blank" rel="noopener">https://github.com/locore/hv6</a></p></blockquote><h2 id="state-machine-specification">State-machine Specification</h2><p>State-machine specification means the system function will first verify the old procedure until the procedure is runnable and then return a new procedure and write to the system image. All of these must run in the user level. This specification consists  of two parts: a definition of abstract kernel state, and a definition of trap handlers (e.g., system calls) in terms of abstract state transitions. They use fully automated technique to find bugs and this method is full functional verification if program  is free of loops and state is finite.</p><p>The “hv6/hv6/spec/kernel/spec/specs.py” file contains the system calls which use this kind of specification. From the picture, we can see that they use Z3 to prove the correction of the “old” procedure and if it can transfer to a new state or it is runnable,  it will return the new procedure so that it can be proved true.</p><h2 id="declarative-specification">Declarative Specification</h2><p>The authors also provide a declarative specification of the high level properties that the state-machine specification should satisfy. The verifier will check that these high level properties are indeed satisfied, helping increase the programmer’s confidence  in the correctness of the state-machine specification. To improve confidence in its correctness, there is a higher-level declarative specification to better capture programmer intuition about kernel behavior, in the form of a conjunction of crosscutting  properties that hold across all trap handlers.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
  &lt;p&gt;Homepage: &lt;a href=&quot;https://locore.cs.washington.edu/hyperkernel/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://locore.cs.washing
      
    
    </summary>
    
      <category term="操作系统" scheme="http://meng.uno/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="系统验证" scheme="http://meng.uno/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E9%AA%8C%E8%AF%81/"/>
    
    
      <category term="System" scheme="http://meng.uno/tags/System/"/>
    
      <category term="Verification" scheme="http://meng.uno/tags/Verification/"/>
    
  </entry>
  
  <entry>
    <title>怎么处理噪声</title>
    <link href="http://meng.uno/articles/a12d1477/"/>
    <id>http://meng.uno/articles/a12d1477/</id>
    <published>2018-01-27T14:35:33.000Z</published>
    <updated>2018-02-17T02:10:40.282Z</updated>
    
    <content type="html"><![CDATA[<p>处理噪声是一个在机器学习学习过程中，总会被问到的问题。噪声可以出现在输入<code>X</code>，亦可以出现在输出<code>Y</code>中。</p><h2 id="x中缺失值"><code>X</code>中缺失值</h2><ol>  <li>使用来自所有可用数据的特征的平均值</li>  <li>忽略实例</li>  <li>使用来自类似项目的平均值</li>  <li>使用另一个机器学习算法来预测值</li></ol><ul>  <li>Bagging 或者 Boosting</li></ul><div><h1>推荐文章<span style="font-size:0.45em; color:gray"></h1><ul><li><a href="http://meng.uno/articles/6c0d033f/">主成分分析（PCA）</a></li><li><a href="http://meng.uno/articles/177fbbcc/">使用EM算法优化的GMM</a></li><li><a href="http://meng.uno/articles/1af17fd9/">多项式拟合曲线——最小二乘法</a></li><li><a href="http://www.libinx.com/2016/2016-11-09-machine-learning-algorithm-series-decision-tree/">机器学习算法系列（1）决策树</a></li></ul></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;处理噪声是一个在机器学习学习过程中，总会被问到的问题。噪声可以出现在输入&lt;code&gt;X&lt;/code&gt;，亦可以出现在输出&lt;code&gt;Y&lt;/code&gt;中。&lt;/p&gt;
&lt;h2 id=&quot;x中缺失值&quot;&gt;&lt;code&gt;X&lt;/code&gt;中缺失值&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;使用来自所有可
      
    
    </summary>
    
      <category term="AI" scheme="http://meng.uno/categories/AI/"/>
    
      <category term="机器学习" scheme="http://meng.uno/categories/AI/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="http://meng.uno/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="噪声" scheme="http://meng.uno/tags/%E5%99%AA%E5%A3%B0/"/>
    
  </entry>
  
  <entry>
    <title>Analysis for Yggdrasil</title>
    <link href="http://meng.uno/articles/5ed9f695/"/>
    <id>http://meng.uno/articles/5ed9f695/</id>
    <published>2018-01-16T14:31:00.000Z</published>
    <updated>2018-02-11T14:48:52.840Z</updated>
    
    <content type="html"><![CDATA[<p>Yggdrasil is a toolkit for verifying file system with push-button verification via crash refinement. As for push-button verification, it means that Yggdrasil needs no manual annotations or proofs. As for crash refinement, it is amenable to fully automated  SMT reasoning. The whole verification is something like the State-Machine Specification in the project “Hyperkernel”.</p><p>The whole system architecture is shown as follows.</p><p><img src="http://www.meng.uno/images/yggdrasil/1.png" alt="Yggdrasil"></p><p>From this picture, we know that Yggdrasil needs three inputs: a specification of the expected behavior, an implementation and consistency invariants which indicate whether a file system image is in a consistent state or not. For better run-time performance,  Yggdrasil optionally performs optimizations. If there is a bug, Yggdrasil produces a counterexample to help identify and fix the cause. It requires no manual annotations or proofs about the implementation code. Once the verification passes, Yggdrasil  emits C code, which is then compiled and linked using a C compiler to produce an executable file system, as well as a “fsck” checker.</p><p>The above is the entire overall content of this project. The authors also introduced every part of this project. I will analyze it by following the paper.</p><h2 id="single-level-file-system-yminlfs">Single-level File System (YminLFS)</h2><p>In this project, every file system must contain three parts: an abstract data structure, a set of operations and a state equivalence predicate which defines whether a given implementation satisfies the specification. So the authors first defines a file  system which contains these features.</p><p><img src="http://www.meng.uno/images/yggdrasil/2.png" alt="Yggdrasil"></p><p><img src="http://www.meng.uno/images/yggdrasil/3.png" alt="Yggdrasil"></p><p><img src="http://www.meng.uno/images/yggdrasil/4.png" alt="Yggdrasil"></p><p><img src="http://www.meng.uno/images/yggdrasil/5.png" alt="Yggdrasil"></p><p>Then it runs the verification. Yggdrasil uses the Z3 solver to prove a two-part crash refinement.</p><p>The first part deals with crash-free executions which requires the implementation and specification are similar in the absence of crashes, which means if both YminLFS and FSSpec start in equivalent and consistent states, they end up in equivalent and  consistent states (just like state-machine). This project defines equivalence using the equivalent predicate and defines consistency using the consistency invariants as the above pictures show.</p><p>The second part deals with crash executions which requires the implementation to exist no more crash states than the specification, which means each possible state of the YminLFS implementation must be equivalent to some crash state of FSSpec. What’s  more, Yggdrasil provides a greedy optimizer that tries to remove every disk flush and re-verify the code.</p><h2 id="multi-level-file-system-yxv6">Multi-level File System (Yxv6)</h2><p>We could directly prove crash refinement between the entire file system specification and implementation in a single-level file system, however, we couldn’t use the same method in a complex multi-level file system. First, let’s look at the structure of  Yxv6 journaling file system.</p><p><img src="http://www.meng.uno/images/yggdrasil/6.png" alt="Yggdrasil"></p><p>This is the 5 layers of abstraction and every layer contains a specification and a implementation. The authors use this project to prove crash refinement for each layer and upper layers then use the specifications of lower layers. The lowest layer of  the stack is a specification of an asynchronous disk. This specification comprises the asynchronous disk model which is to implement YminLFS.</p><h2 id="application-level-ycp">Application-level (“Ycp”)</h2><p>Ycp has a formal specification which means if the copy operation succeeds, the result is the same as “cp”, however, if it fails, the file system is unchanged. To achieve this propose, the implementation of Ycp is something similar to Yxv6 file system  specification. There are 3 atomicity patterns which are “create a temporary file”, “write the source data to it” and “rename it to atomically create the target file”. After doing such an analogy, verifying this operation is similar to verify the single-level  file system.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Yggdrasil is a toolkit for verifying file system with push-button verification via crash refinement. As for push-button verification, it 
      
    
    </summary>
    
      <category term="System Verification" scheme="http://meng.uno/categories/System-Verification/"/>
    
      <category term="Yggdrasil" scheme="http://meng.uno/categories/System-Verification/Yggdrasil/"/>
    
    
      <category term="Yggdrasil" scheme="http://meng.uno/tags/Yggdrasil/"/>
    
      <category term="System Verification" scheme="http://meng.uno/tags/System-Verification/"/>
    
  </entry>
  
  <entry>
    <title>KVM Unit Tests</title>
    <link href="http://meng.uno/articles/50351d5d/"/>
    <id>http://meng.uno/articles/50351d5d/</id>
    <published>2018-01-15T14:19:40.000Z</published>
    <updated>2018-02-11T14:48:52.840Z</updated>
    
    <content type="html"><![CDATA[<p>Kernel-based Virtual Machine (KVM) is a virtualization infrastructure for the Linux kernel that turns it into a hypervisor. KVM requires a processor with hardware virtualization extensions.</p><p>This project, as its name suggests, is to provide unit tests for KVM. The unit tests are tiny guest operating systems that generally execute only tens of lines of C and assembler test code in order to obtain its PASS/FAIL/SKIP result. Unit tests provide  KVM and virtual hardware functional testing by targeting the features through minimal implementations of their use per the hardware specification. The simplicity of unit tests make them easy to verify they are correct, easy to maintain, and easy to  use in timing measurements. Unit tests are also often used for quick and dirty bug reproducers.</p><h2 id="build-and-run">Build and Run</h2><p>Building this project is very easy, we just need to enter the directory and run “./configure; make”. If there isn’t any mistake, it means this project is successfully built. As can be seen from its name, it is a testing program so running it means running  some tests on KVM. In addition, as other verification systems, it also has some single test cases and a whole test suite. What has to be aware is we need to install “kvm” or “qemu-kvm” before testing, otherwise, the tests will just “SKIP” because it  is just for testing KVM.</p><p>First, I will run a single test case which is in the “x86/” directory named “syscall.flat”. The result is as follows.</p><p><img src="http://www.meng.uno/images/kvm/1.png" alt="KVM"></p><p>Then, I will run a test suite. The following picture is part of the result. I found that there are 3 status of the test results which are PASS, FAIL and SKIP.</p><p><img src="http://www.meng.uno/images/kvm/2.png" alt="KVM"></p><p>From the picture, we can see that not all tests are PASS, which means this version of KVM may have many points to be improved.</p><h2 id="analyze-the-test">Analyze the Test</h2><p>To write a test case/suite, we first need to analyze an example. From the file “run_tests.sh”, we could find that it runs each test in “x86/unittests.cfg”. This is a section of this file. From it, we could know that when the test suite runs to here, it  will find test case “apic.flat” and run it in the x86_64 architecture within 30 seconds.</p><p><img src="http://www.meng.uno/images/kvm/3.png" alt="KVM"></p><p>The result of every test case is printed to the screen by the “runtime.bash” script.</p><p><img src="http://www.meng.uno/images/kvm/4.png" alt="KVM"></p><p>What’s more, we could find the detailed information of every test case from “logs/” directory.</p><p><img src="http://www.meng.uno/images/kvm/5.png" alt="KVM"></p><p>After analyzing a test suite, let’s look at a single test case. I will choose the “syscall.flat” as an example. Let’s see the main function. There are two subfunctions which is consistent with the first screenshot.</p><p><img src="http://www.meng.uno/images/kvm/6.png" alt="KVM"></p><p>Now I will focus on a single function as the following picture shows. It just tests some single function calls and report the results.</p><p><img src="http://www.meng.uno/images/kvm/7.png" alt="KVM"></p><h2 id="write-a-test">Write A Test</h2><p>Because I can’t know about KVM clearly for such a short period of time, here I just write a simple test, in order to experience how to write a test case.</p><p><img src="http://www.meng.uno/images/kvm/8.png" alt="KVM"></p><p>After compiling and running it, we could get this expected output.</p><p><img src="http://www.meng.uno/images/kvm/9.png" alt="KVM"></p><p>Now I could put my test case to the test suite, adding such code to the “unittests.cfg” file.</p><p><img src="http://www.meng.uno/images/kvm/10.png" alt="KVM"></p><p>Also, it must be PASS as expected.</p><p><img src="http://www.meng.uno/images/kvm/11.png" alt="KVM"></p><h2 id="analyze-the-framework">Analyze the Framework</h2><p>In the beginning, let’s analyze the directory structure.</p><p><img src="http://www.meng.uno/images/kvm/12.png" alt="KVM"></p><ul>  <li>./api/: there are three API categories 1) libc, 2) functions typical of kernel code, and 3) kvm-unit-tests specific.</li>  <li>./lib/: general architecture neutral services for the tests.</li>  <li>./x86/: the sources of the tests and the created images of X86 architecture.</li>  <li>./logs/: the output information.</li>  <li>./scripts/: helper scripts for building and running tests.</li>  <li>others: configure script, top-level Makefile, and run_tests.sh.</li></ul><p>The framework has the following components:</p><ul>  <li>Test building support</li>  <li>Shared code for test setup and API</li>  <li>Test running support</li></ul><p>Test building is done through makefiles and some supporting bash scripts. Test setup code includes, for example, early system init, MMU enablement, and UART init. The API provides some common libc functions, as well as some low-level helper functions  commonly seen in kernel code and some kvm-unit-tests specific APIs. Test running is provided with a few bash scripts, using a unit tests configuration file as input. Generally tests are run from within the source root directory using the supporting  scripts, but tests may optionally be built as standalone tests as well.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Kernel-based Virtual Machine (KVM) is a virtualization infrastructure for the Linux kernel that turns it into a hypervisor. KVM requires 
      
    
    </summary>
    
      <category term="KVM" scheme="http://meng.uno/categories/KVM/"/>
    
    
      <category term="KVM" scheme="http://meng.uno/tags/KVM/"/>
    
  </entry>
  
  <entry>
    <title>Analysis for DynamoRIO</title>
    <link href="http://meng.uno/articles/a331aaad/"/>
    <id>http://meng.uno/articles/a331aaad/</id>
    <published>2018-01-13T13:57:16.000Z</published>
    <updated>2018-02-11T14:04:49.152Z</updated>
    
    <content type="html"><![CDATA[<p>DynamoRIO is a dynamic binary piling/translation platform. Through it, you can manipulate the running code of a program, that is, it can simulate running a program and allow you to transform and control any place of the running code. It is used for dynamic  analysis, optimization and translation of programs.</p><p>DynamoRIO is a cooperation project between HP and MIT. Dynamo comes from HP’s laboratory, RIO (Runtime Introspection and Optimization) comes from MIT’s computer science laboratory. The history is shown as follows.</p><p><img src="http://www.meng.uno/images/rio/1.png" alt="RIO"></p><h2 id="architecture">Architecture</h2><p>DynamoRIO’s architecture is like this. It is between the operating system and the application so that it can get the system calls and the applications’ code easily.</p><p><img src="http://www.meng.uno/images/rio/2.png" alt="RIO"></p><p>This picture is the Toolchain Control Points.</p><p><img src="http://www.meng.uno/images/rio/3.png" alt="RIO"></p><p>The process flow is as follows. The original program goes through the “basic block builder”, “trace selector”, “basic block cache” and “trace cache” to get the emulation propose.</p><p><img src="http://www.meng.uno/images/rio/4.png" alt="RIO"></p><h2 id="efficiency">Efficiency</h2><p>DynamoRIO is separated from the code of applications by the “context switch” as shown in the picture above. The applications’ code is copied to the instruction cache. The code in these caches will execute as native code. Until a jump instruction is encountered,  the applications’ “machine state” will be saved, and the control will turn back to DynamoRIO to find the basic block where the jump instruction is located. DynamoRIO is much faster than pure emulations by “code cache”.</p><p><img src="http://www.meng.uno/images/rio/5.png" alt="RIO"></p><p>There are several improvements in this project. The picture above is the first one — Basic Block Cache. If you copy each basic block into a code cache and run it natively, it greatly reduces the overhead of interpreting, however, we still need to explain  each jump instruction, and then return to DynamoRIO to find the target instruction. If a target instruction already exists in the code cache and is referred to by a direct jump instruction, DynamoRIO can directly jump to the target instruction in the  code cache to avoid the overhead of the context switch, which is called “Linking Direct Branches”.</p><p><img src="http://www.meng.uno/images/rio/6.png" alt="RIO"></p><p>The next improvement is “Linking Indirect Branches” since a conditional branch instruction can not be linked like a direct jump instruction because it has more than one goal and needs to make decisions and find the list’s jump target.</p><p><img src="http://www.meng.uno/images/rio/7.png" alt="RIO"></p><p>Some basic blocks, which are often executed sequentially, are combined into one execution stream to reduce the number of branches and increase the locality of the program. It reduces some overhead of indirect branch search, because it has put indirect  brach in this trace as well. This is also the last improvement — Trace Building.</p><p><img src="http://www.meng.uno/images/rio/8.png" alt="RIO"></p><h2 id="transparency">Transparency</h2><p>It has three transparency principles which are “As few changes as possible”, “Hide necessary changes” and “Separate resources”. Changes in these areas are few: application code, stored addresses, threads and application data. Changes in these fields are  hidden: application addresses, address space, error transparency and code cache consistency. This picture shows the principle 3 well. DynamoRIO’s own code also uses share libraries when loading applications, which may cause some conflicts if the application  also uses the same library. The solution is that, DynamoRIO doesn’t use the library directly, calling system call on Linux and calling system call via windows win32 API profile.</p><p><img src="http://www.meng.uno/images/rio/9.png" alt="RIO"></p><p>The heap memory allocated by DynamoRIO itself is distinguished from the heap memory requested by the application. In addition, DynamoRIO uses its own I/O routines for input and output to avoid conflicts with the applications’ I/O buffers. What’s more,  since the use of shared locks can also cause conflicts between DynamoRIO and applications, it also has synchronization transparency.</p><p>To avoid conflicts with applications, DynamoRIO doesn’t create its own thread, instead spawns threads in the application process to distinguish between its own status and applications’ status via a “Context Switch” as the first picture shows. Further  more, it chooses to leave the stack of application processes intact, creating a private stack of each thread.</p><h2 id="comprehensive">Comprehensive</h2><p>All data streams must go through handlers generated by the dispatcher. The data flow is like this.</p><p><img src="http://www.meng.uno/images/rio/10.png" alt="RIO"></p><h2 id="customization">Customization</h2><p>DynamoRIO has developed some event driven APIs that allow developers to customize instrument instructions. Using it, you can achieve some proposes such as: memory checking, performance testing, system call tracking, code coverage calculation.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;DynamoRIO is a dynamic binary piling/translation platform. Through it, you can manipulate the running code of a program, that is, it can 
      
    
    </summary>
    
      <category term="RIO" scheme="http://meng.uno/categories/RIO/"/>
    
      <category term="DynamoRIO" scheme="http://meng.uno/categories/RIO/DynamoRIO/"/>
    
    
      <category term="DynamoRIO" scheme="http://meng.uno/tags/DynamoRIO/"/>
    
      <category term="RIO" scheme="http://meng.uno/tags/RIO/"/>
    
  </entry>
  
  <entry>
    <title>Zsh</title>
    <link href="http://meng.uno/articles/d911b12b/"/>
    <id>http://meng.uno/articles/d911b12b/</id>
    <published>2018-01-11T02:22:44.000Z</published>
    <updated>2018-02-11T03:08:26.198Z</updated>
    
    <content type="html"><![CDATA[<blockquote>  <p>不少程序员都觉得Mac的一大优势就是其Shell，也有很多人觉得Mac与Linux在Shell上很相似。不错，但是Mac还是略胜一筹或者说高一个量级。今天，我将向大家介绍一个Mac特有的Shell（Linux也可以安装，但是不是系统自带。）—— Zsh。</p></blockquote><h2 id="切换到zsh">切换到Zsh</h2><p>使用<code>cat /etc/shells</code>指令，我们可以看看自己的系统有哪些Shells，下面是我的Mac的结果：</p><figure class="highlight stylus">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre>      </td>      <td class="code">        <pre><span class="line">/bin/bash</span><br><span class="line">/bin/csh</span><br><span class="line">/bin/ksh</span><br><span class="line">/bin/sh</span><br><span class="line">/bin/tcsh</span><br><span class="line">/bin/zsh</span><br><span class="line">/usr/local/bin/fish</span><br></pre>      </td>    </tr>  </table></figure><p>使用这个指令切换到Zsh：<code>chsh -s /bin/zsh</code>。（想使用其他Shell也是同样的指令哦。）</p><p>这是，我们的Shell配置文件就为<code>.zshrc</code>了。</p><blockquote>  <p>我觉得从这里我们应该可以知道，为什么之前的Shell配置文件要以<code>.bash_profile</code>命名了吧。因为Mac默认Shell是Bash。</p></blockquote><h2 id="迁移bash配置">迁移Bash配置</h2><p>我使用Bash有好几年了，那些配置都是一些环境变量啊什么的，如果在Zsh的配置里再写一遍，无疑是一件很费时又低效的事。那有没有什么快捷的方式呢？当然有！</p><p>通过如下指令：<code>source ~/.bash_profile</code>就可以将<code>.bash_profile</code>里的配置全部引入到<code>.zshrc</code>中了。同理，如果你想自己写配置，也可以通过这种方式引入。（后文你将看到一个第三方工具就是这么做的。）</p><h2 id="安装oh-my-zsh">安装oh my zsh</h2><p>通过<code>wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</code>指令安装。</p><p>这时我们发现在<code>.zshrc</code>文件中，多了两行：</p><figure class="highlight stylus">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br></pre>      </td>      <td class="code">        <pre><span class="line">export ZSH=/Users/NAME/.oh-my-zsh</span><br><span class="line">source <span class="variable">$ZSH</span>/oh-my-zsh.sh</span><br></pre>      </td>    </tr>  </table></figure><h2 id="自定义shell主题">自定义Shell主题</h2><p>使用oh my zsh主要的原因是使用其提供的漂亮的主题，主题目录在<code>.oh-my-zsh/themes/</code>下，选择主题<code>ZSH_THEME=&quot;robbyrussell&quot;</code>。这时我的Shell主题就是robbyrussell了。</p><p>打开robbyrussell.zsh-theme文件，我们可以看见几条配置。</p><p>我将其中的<code>PROMPT</code>修改为：</p><p><code>PROMPT='${ret_status} %{$fg[cyan]%}%d %{$reset_color%} $(git_prompt_info)%{$fg_bold[red]%}&gt;%{$fg_bold[yellow]%}&gt;%{$fg_bold[green]%}&gt; '</code></p><p>这时我的Shell就变成了这样：</p><p><img src="http://www.meng.uno/images/zsh.png" alt="Zsh"></p><p>可以发现我的定制有：显示绝对路径，<code>&gt;&gt;&gt;</code>等。</p><p>还有很多主题与配置，大家可以自己尝试。</p><h2 id="定制shell">定制Shell</h2><p>Zsh还有个功能就是“别名”。不知道大家有没有这样的经历，需要打开<code>.plist</code>这样的文件，如果用普通编辑器打开会非常界面不友好，而用Xcode打开则完美可观。那怎么在控制台直接用Xcode打开文件呢？（其他软件同理）</p><p>我在<code>.zshrc</code>中添加：<code>alias xcode=&quot;/Applications/Xcode.app/Contents/MacOS/Xcode&quot;</code>，之后我就可以使用<code>xcode X</code>来用Xcode打开X文件了。</p><p>我们也可以为某种类型文件设置默认打开方式：<code>alias -s html=atom</code>（当我们键入<code>.html</code>文件时，会自动用Atom打开）。</p><h2 id="安装插件">安装插件</h2><p>oh my zsh为Zsh提供了100+插件，如果我们需要安装某插件，只需要在<code>.zshrc</code>文件中的<code>plugins=()</code>中添加，用空格隔开，只需要填插件名字，默认添加了<code>git</code>。</p><p>在这里我向大家介绍几种网上很常见的插件：</p><ol>  <li><code>git</code>当你处于一个 git 受控的目录下时，Shell 会明确显示 「git」和 branch，如上图所示，另外对 git 很多命令进行了简化，例如 gco=’git checkout’、gd=’git diff’、gst=’git status’、g=’git’等等，熟练使用可以大大减少 git 的命令长度，命令内容可以参考~/.oh-my-zsh/plugins/git/git.plugin.zsh。</li>  <li><code>osx</code>tab 增强，quick-look filename 可以直接预览文件，man-preview grep 可以生成 grep手册 的pdf 版本等。</li>  <li><code>autojump</code>像他的名字一样，提供自动补全等很多功能，大家自己去尝试吧。</li></ol><p><strong>注意：安装autojump建议使用Homebrew</strong></p><p><code>brew install autojump</code></p><p>然后按照提示将一句类似这个</p><p><code>[ -f /usr/local/etc/profile.d/autojump.sh ] &amp;&amp; . /usr/local/etc/profile.d/autojump.sh</code></p><p>的句子插入到<code>.zshrc</code>文件中即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
  &lt;p&gt;不少程序员都觉得Mac的一大优势就是其Shell，也有很多人觉得Mac与Linux在Shell上很相似。不错，但是Mac还是略胜一筹或者说高一个量级。今天，我将向大家介绍一个Mac特有的Shell（Linux也可以安装，但是不是系统自带。）——
      
    
    </summary>
    
      <category term="Shells" scheme="http://meng.uno/categories/Shells/"/>
    
    
      <category term="Zsh" scheme="http://meng.uno/tags/Zsh/"/>
    
  </entry>
  
  <entry>
    <title>Deep Learning上手工具</title>
    <link href="http://meng.uno/articles/99be2c50/"/>
    <id>http://meng.uno/articles/99be2c50/</id>
    <published>2018-01-10T14:43:43.000Z</published>
    <updated>2018-02-17T02:11:39.642Z</updated>
    
    <content type="html"><![CDATA[<p>现在Deep Learning太火了，以至于没有任何计算机基础的人都想使用它，那么对于新手，甚至连Python代码都写不好的DL爱好者，有什么上手工具么？选择合适的工具可以帮助学习更快，很巧的是，有很多不同的工具可供选择，下图列出了常用的工具。</p><p><img src="http://www.meng.uno/images/tools_dp.png" alt="DL"></p><p>谷歌开发的<code>Tensorflow</code>，微软的<code>CNTK</code>以及<code>Theano</code>都是为深度学习而开发的库，它们促进了使用<code>GPU</code>计算。他们并不难，但与<code>Keras</code>相比，他们仍然非常复杂。<code>Keras</code>只是使用底层深度学习库的界面。使用<code>Keras</code>就像玩乐高一样简单。我建议初学者从<code>Keras</code>开始，因为我们可以快速了解深度学习可以做些什么，并积极进行一些有趣的项目。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;现在Deep Learning太火了，以至于没有任何计算机基础的人都想使用它，那么对于新手，甚至连Python代码都写不好的DL爱好者，有什么上手工具么？选择合适的工具可以帮助学习更快，很巧的是，有很多不同的工具可供选择，下图列出了常用的工具。&lt;/p&gt;
&lt;p&gt;&lt;img sr
      
    
    </summary>
    
      <category term="AI" scheme="http://meng.uno/categories/AI/"/>
    
      <category term="Deep Learning" scheme="http://meng.uno/categories/AI/Deep-Learning/"/>
    
    
      <category term="Deep Learning" scheme="http://meng.uno/tags/Deep-Learning/"/>
    
  </entry>
  
  <entry>
    <title>CryptoMinisat</title>
    <link href="http://meng.uno/articles/7d26fe8/"/>
    <id>http://meng.uno/articles/7d26fe8/</id>
    <published>2018-01-10T13:50:36.000Z</published>
    <updated>2018-02-11T14:04:49.150Z</updated>
    
    <content type="html"><![CDATA[<p>Inspired by other verification system projects, I want to further explore the means of verification they used such as SMT solver, SAT solver, Coq and so on. I’ll start with this report from an advanced SAT solver — CryptoMinisat. (I have written a report  about STP which is a SMT solver.)</p><p>The Boolean Satisfiability Problem (SAT for short) is the problem of determining if there exists an interpretation that satisfies a given boolean formula. In other words, it asks whether the variables of a given boolean formula can be consistently replaced  by the values TRUE or FALSE in such a way that the formula evaluates to TRUE. If this is the case, the formula is called satisfiable. Otherwise, the formula is unsatisfiable.</p><p>SAT solvers have recently been enjoying a boom in the application front: more and more applications can and do make use of SAT solvers to accomplish tasks ranging from the fairly trivial to the very complex. The benefit of the incredible improvements  in the design of efficient SAT solvers those recent years is now reaching our lives: The Intel Core7 processor for instance has been designed with the help of SAT technology, while the device drivers of Windows 7 are being certified thanks to an SMT  solver (based on a SAT solver).</p><h2 id="build-and-test">Build and Test</h2><p>This is the 5th version of CryptoMinisat which means the install instruction is very prefect now. To build and test this project, all we have to do is following the instruction. Firstly, we need to install many dependencies. Then, it is very simple to  build by “make”. The following is part of the output.</p><p><img src="http://www.meng.uno/images/cryptominisat/1.png" alt="CryptoMinisat"></p><p>Testing this project is very easy by the script written by the authors. Typing “make test” and waiting for a moment, we will get this output which means the tests are correct.</p><p><img src="http://www.meng.uno/images/cryptominisat/2.png" alt="CryptoMinisat"></p><h2 id="run-this-project">Run This Project</h2><p>This is a very mature project which can be run from the terminal or used as a C++/Python library. In this report, I just choose the first way.</p><p>As I said before, this project is a SAT solver which means it could find out the situations which fulfill the input or return error. The grammar is very simple just like this.</p><p><img src="http://www.meng.uno/images/cryptominisat/3.png" alt="CryptoMinisat"></p><p>The first line means this input has 2 variables and 4 clauses. Every line is a clause which is ended by “0”. Using the third line as an example, it says that 2 is TRUE and 3 is FALSE. I use this file as an input and run it in the terminal. The result  is shown as follows. It means 1 is TRUE, 2 and 3 are FALSE is the only solution to this problem.</p><p><img src="http://www.meng.uno/images/cryptominisat/4.png" alt="CryptoMinisat"></p><p>This is another example and the result.</p><p><img src="http://www.meng.uno/images/cryptominisat/5.png" alt="CryptoMinisat"></p><p><img src="http://www.meng.uno/images/cryptominisat/6.png" alt="CryptoMinisat"></p><p>It means there isn’t a solution to this problem.</p><h2 id="how-it-works">How It Works</h2><p>There are many improvements and techniques included in this project. It uses “Minisat” as its core and uses Gaussian Elimination on top-level. This is another part of its techniques.</p><ul>  <li>Variable elimination and replacement, strengthening and subsumption;</li>  <li>Gate-based clause shortening and removal;</li>  <li>No time or memory-outs on weird CNFs;</li>  <li>Variable renumbering and variable number hiding. due to this, XOR clauses are cut and the added variables are always consistently displayed;</li>  <li>Temporary results are stored in SQLite which supports high speed update;</li>  <li>XOR recovery.</li></ul><div><h1>推荐文章<span style="font-size:0.45em; color:gray"></h1><ul><li><a href="http://meng.uno/articles/cd3afb7d/">Simple Theorem Prover SMT solver</a></li></ul></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Inspired by other verification system projects, I want to further explore the means of verification they used such as SMT solver, SAT sol
      
    
    </summary>
    
      <category term="solver" scheme="http://meng.uno/categories/solver/"/>
    
      <category term="SAT" scheme="http://meng.uno/categories/solver/SAT/"/>
    
    
      <category term="CryptoMinisat" scheme="http://meng.uno/tags/CryptoMinisat/"/>
    
      <category term="SAT" scheme="http://meng.uno/tags/SAT/"/>
    
      <category term="solver" scheme="http://meng.uno/tags/solver/"/>
    
  </entry>
  
</feed>
